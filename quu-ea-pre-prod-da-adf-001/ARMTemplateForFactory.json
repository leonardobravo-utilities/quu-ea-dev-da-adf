{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "quu-ea-pre-prod-da-adf-001"
		},
		"LS_ABLB_quueaprdicndlslanding001_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ABLB_quueaprdicndlslanding001'"
		},
		"LS_ASQL_EDWDiscovery_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_EDWDiscovery'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=quu-ea-prd-da-sqlserver-001.database.windows.net;Initial Catalog=edw_discovery"
		},
		"LS_ASQL_EDWDiscovery_Dev_Test_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_EDWDiscovery_Dev_Test'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=quu-ea-tst-da-sqlserver-001.database.windows.net;Initial Catalog=edw_discovery;User ID=QuutstdaAdmin"
		},
		"LS_ASQL_EDWMart_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_EDWMart'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=quu-ea-prd-da-sqlserver-001.database.windows.net;Initial Catalog=edw_mart"
		},
		"LS_ASQL_EDWTactical_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_EDWTactical'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=quu-ea-prd-da-sqlserver-001.database.windows.net;Initial Catalog=edw_tactical"
		},
		"LS_MySQL_NetAppManagement_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_MySQL_NetAppManagement'",
			"defaultValue": "Server=@{linkedService().Servername};Port=3306;Database=@{linkedService().Databasename};User=@{linkedService().Username};SSLMode=1;UseSystemTrustStore=0"
		},
		"LS_ORAC_Framework_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ORAC_Framework'",
			"defaultValue": "host=@{linkedService().HostName};port=@{linkedService().PortNo};sid=@{linkedService().SID};user id=@{linkedService().UserName}"
		},
		"LS_SQL_Framework_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_Framework'",
			"defaultValue": "Integrated Security=True;Data Source=@{linkedService().Servername};Initial Catalog=@{linkedService().Databasename}"
		},
		"ADF_LS_AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://quu-ea-pprd-da-key-vault.vault.azure.net/"
		},
		"LS_ABLB_quueadadlslanding001_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://quueaprddadlslanding001.blob.core.windows.net"
		},
		"LS_ABLB_quueaprddasrclanding001_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://quueaprddasrclanding001.blob.core.windows.net/"
		},
		"LS_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://auapi.envizi.com/api/data/_Envizi-monthlydatasummaryallmeasures?End_Period=CURRENT_MONTH&Period=7"
		},
		"LS_API_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Analytics-Support@urbanutilities.com.au"
		},
		"LS_DBR_ADF_Job_Cluster_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "@linkedService().databricksclusterid"
		},
		"LS_FS_FTP_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().Host}"
		},
		"LS_FS_Globalscape_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().p_ServerPath}"
		},
		"LS_FS_Globalscape_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "urbanutilities\\SVC-EBI_PRDC04_AGT"
		},
		"LS_FS_NFUJPRD202_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\NFUJPRD202\\FDrive"
		},
		"LS_FS_NFUJPRD202_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "urbanutilities\\SVC-EBI_PRDC04_AGT"
		},
		"LS_FS_NFUJPRD202_GDrive_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\nfujprd202\\GDrive"
		},
		"LS_FS_NFUJPRD202_GDrive_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "URBANUTILITIES\\SVC-EBI_PRDC04_AGT"
		},
		"LS_FS_NFUJPRD301_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\NFUJPRD301\\EBI_PROD_LANDING"
		},
		"LS_FS_NFUJPRD301_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "urbanutilities\\SVC-EBI_PRDC04_AGT"
		},
		"LS_FS_ServiceNow_MidServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().p_MidServerLocation}"
		},
		"LS_FS_ServiceNow_MidServer_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "urbanutilities\\SVC-EBI_PRDC04_AGT"
		},
		"LS_FS_globalscape_PowerBI_file_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\NFUJPRD310\\Power_BI"
		},
		"LS_FS_globalscape_PowerBI_file_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "urbanutilities\\SVC-EBI_PRDC04_AGT"
		},
		"LS_HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseURL}"
		},
		"LS_HTTPS_Temetra_Geospatial_API_EndPoint_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat(linkedService().temetra_api_endpoint,'?networkmeterload=',linkedService().networkmeterload,'&auth=',linkedService().auth_token)}"
		},
		"LS_HTTP_Parameter_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().s_url}"
		},
		"LS_SF_properties_typeProperties_environmentUrl": {
			"type": "string",
			"defaultValue": "https://login.salesforce.com"
		},
		"LS_SF_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "analytics-support@urbanutilities.com.au"
		},
		"LS_SQL_ELLIPSE_ANALYTICS_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ellipse-analytics-connection-string"
		},
		"LS_SQL_ELLIPSE_ANALYTICS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "URBANUTILITIES\\SVC-EBI_PRDC04_AGT"
		},
		"LS_SQL_Framework_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().UserName}"
		},
		"BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "BOM Rainfall"
		},
		"BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "BOM_Daily_Rainfall"
		},
		"BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_SourceName": {
			"type": "string",
			"defaultValue": "BOM Weather Data"
		},
		"BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Bom_Forecast_Daily_Trigger_properties_PL_BOM_Forecast_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "BOM-FORECAST"
		},
		"Bom_Forecast_Daily_Trigger_properties_PL_BOM_Forecast_Main_parameters_databricksclusterid": {
			"type": "string",
			"defaultValue": "0417-051914-axons909"
		},
		"Bom_Forecast_Daily_Trigger_properties_PL_BOM_Forecast_Main_parameters_databrickssecretname": {
			"type": "string",
			"defaultValue": "databricks-token"
		},
		"Chloroclam_Daily_Trigger_properties_PL_Evoqua_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Evoqua-metadata"
		},
		"Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "CHRIS21"
		},
		"Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_EmailTo": {
			"type": "string",
			"defaultValue": "DL-IS-Analytics-Data-Foundation@urbanutilities.com.au"
		},
		"Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_LogicAppURL": {
			"type": "string",
			"defaultValue": "https://prod-08.australiaeast.logic.azure.com:443/workflows/b473972d5dc743d8a7fe7451183104e4/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=K1XqCE2ZWAsChqL1-cjnP57avlNPOmrYgj4cTAXJ2uU"
		},
		"Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Chris21_Weekly_Trigger_Monday"
		},
		"Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "CHRIS21"
		},
		"Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_EmailTo": {
			"type": "string",
			"defaultValue": "DL-IS-Analytics-Data-Foundation@urbanutilities.com.au"
		},
		"Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_LogicAppURL": {
			"type": "string",
			"defaultValue": "https://prod-08.australiaeast.logic.azure.com:443/workflows/b473972d5dc743d8a7fe7451183104e4/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=K1XqCE2ZWAsChqL1-cjnP57avlNPOmrYgj4cTAXJ2uU"
		},
		"Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Chris21_Weekly_Trigger_Thursday"
		},
		"Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Daptiv"
		},
		"Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Daptiv_Daily_Trigger"
		},
		"Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"EAMS_Integration_Daily_Trigger_properties_PL_EAMS_Integration_parameters_SourceName": {
			"type": "string",
			"defaultValue": "EAMS Integration"
		},
		"EAMS_Integration_Daily_Trigger_properties_PL_EAMS_Integration_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"EAMS_Integration_Daily_Trigger_properties_PL_EAMS_Integration_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Ellipse9"
		},
		"Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": true
		},
		"Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Ellipse9_Daily_Trigger"
		},
		"Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Envizi"
		},
		"Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Envizi_Monthly_Trigger"
		},
		"Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Field Service Edge"
		},
		"FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Field Service Edge Hourly_Refresh"
		},
		"FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "GIS_SQLServer_SDCM_SQL"
		},
		"GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "GIS_SDCM_Daily_Trigger"
		},
		"GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "GIS_SQLServer_SDPROC_SQL"
		},
		"GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "GIS_SDPROC_Weekly_Trigger"
		},
		"GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "GIS_SQLServer_SDUV_SQL"
		},
		"GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "GIS_SDUV_Daily_Trigger"
		},
		"GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"GIS_SD_MANAGED_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_SourceName": {
			"type": "string",
			"defaultValue": "GIS_Oracle_SD_MANAGED"
		},
		"GIS_SD_MANAGED_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SD_MANAGED_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SD_REFERENCE_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_SourceName": {
			"type": "string",
			"defaultValue": "GIS_Oracle_SD_REFERENCE"
		},
		"GIS_SD_REFERENCE_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"GIS_SD_REFERENCE_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_TargetServerName": {
			"type": "string",
			"defaultValue": "PRDC04-SQL"
		},
		"HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_TargetDatabaseName": {
			"type": "string",
			"defaultValue": "EDW_Discovery"
		},
		"HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_TargetUserName": {
			"type": "string",
			"defaultValue": "urbanutilities\\svc-EBI_PRDC04_AGT"
		},
		"HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_TargetSecretPasswordName": {
			"type": "string",
			"defaultValue": "SVC-EBI-PRDC04-AGT"
		},
		"HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourceHostName": {
			"type": "string",
			"defaultValue": "hcxdbprdmir.corporate.urbanutilities.internal"
		},
		"HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourcePortNo": {
			"type": "string",
			"defaultValue": "1901"
		},
		"HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourceSID": {
			"type": "string",
			"defaultValue": "HCXPRD"
		},
		"HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourceUserName": {
			"type": "string",
			"defaultValue": "ebi_hiaffinity_user"
		},
		"HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourceSecretPasswordName": {
			"type": "string",
			"defaultValue": "Hiaffinity-PRD-Password"
		},
		"Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_DataSources": {
			"type": "array",
			"defaultValue": [
				"QUU.BoM.RF3.IDR66"
			]
		},
		"Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Hydronet"
		},
		"Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_DestinationTable": {
			"type": "string",
			"defaultValue": "Hydronet.Location"
		},
		"Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Hydronet_PreReq_Daily"
		},
		"Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_KeyVaultPath": {
			"type": "string",
			"defaultValue": "https://quu-ea-prd-da-key-vault.vault.azure.net/secrets/<secretname>?api-version=7.0"
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_StartDate": {
			"type": "string",
			"defaultValue": "1900-01-01"
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_EndDate": {
			"type": "string",
			"defaultValue": "1900-01-01"
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_DaysPerFile": {
			"type": "int",
			"defaultValue": 90
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_LocationCodes": {
			"type": "string",
			"defaultValue": "1326,1327"
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_LocationCodesExclude": {
			"type": "string",
			"defaultValue": "@coalesce(null)"
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_TimeZone": {
			"type": "string",
			"defaultValue": "+1000"
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_DataSources": {
			"type": "array",
			"defaultValue": [
				"QUU.BoM.RF3.IDR66"
			]
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Hydronet"
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_DestinationTable": {
			"type": "string",
			"defaultValue": "Hydronet.Rainfall_Exceedance"
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_VariableCodes": {
			"type": "array",
			"defaultValue": [
				"EY_30min",
				"EY_1hr",
				"EY_2hr",
				"EY_3hr",
				"EY_4.5hr",
				"EY_6hr",
				"EY_9hr",
				"EY_12hr",
				"EY_18hr",
				"EY_24hr",
				"EY_36hr",
				"EY_48hr",
				"EY_72hr",
				"EY_168hr"
			]
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Hydronet_Daily_Trigger"
		},
		"Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_KeyVaultPath": {
			"type": "string",
			"defaultValue": "https://quu-ea-prd-da-key-vault.vault.azure.net/secrets/<secretname>?api-version=7.0"
		},
		"ICN_Payment_Extract_Daily_Trigger_properties_PL_File_Export_To_NFUJPRD202_parameters_FileExportName": {
			"type": "string",
			"defaultValue": "ICN"
		},
		"Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Ixom"
		},
		"Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Ixom_Daily_Trigger"
		},
		"Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Kantar"
		},
		"Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_Additional_MappingParam": {
			"type": "object",
			"defaultValue": null
		},
		"Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Kantar_Monthly_Trigger"
		},
		"LIMS_Daily_Trigger_properties_PL_LIMS_Source_To_ASQL_parameters_Source_Name": {
			"type": "string",
			"defaultValue": "LIMS"
		},
		"LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_SourceName": {
			"type": "string",
			"defaultValue": "LIWIS"
		},
		"LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Liwis_DataModel_Daily_Trigger_properties_PL_EDW_Mart_LIWIS_parameters_sourcename": {
			"type": "string",
			"defaultValue": "LIWIS"
		},
		"MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_SourceName": {
			"type": "string",
			"defaultValue": "MDSProd"
		},
		"MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "NOPV-Digital"
		},
		"NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_Additional_MappingParam": {
			"type": "string",
			"defaultValue": ",\"collectionReference\": \"$['Entry']['attribute']\",\"mapComplexValuesToString\": true"
		},
		"NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "NOPV_Digital_Daily_Trigger"
		},
		"NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "NOPV"
		},
		"NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "NOPV_Daily_Trigger"
		},
		"NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"NetworkAccess_Daily_Trigger_properties_PL_NetworkAccess_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "NetworkAccess"
		},
		"NetworkAccess_Daily_Trigger_properties_PL_NetworkAccess_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"NetworkAccess_Daily_Trigger_properties_PL_NetworkAccess_Main_parameters_Additional_MappingParam": {
			"type": "string",
			"defaultValue": ",\"collectionReference\": \"$['Entry']['attribute']\",\"mapComplexValuesToString\": true"
		},
		"OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_SourceName": {
			"type": "string",
			"defaultValue": "OpenWindows"
		},
		"OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Promaster"
		},
		"Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "Promaster_Monthly_Trigger"
		},
		"Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"QAO_File_Export_Monthly_Trigger_properties_PL_File_Export_To_globalscape_parameters_FileExportName": {
			"type": "string",
			"defaultValue": "QAO"
		},
		"REF_Daily_Trigger_properties_PL_Reference_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "REFERENCE"
		},
		"REF_Daily_Trigger_properties_PL_Reference_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"REF_Daily_Trigger_properties_PL_Reference_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"SILO_Daily_Trigger_properties_PL_Silo_Weather_Observations_parameters_Source_Name": {
			"type": "string",
			"defaultValue": "SILO"
		},
		"SILO_Daily_Trigger_properties_PL_Silo_Weather_Observations_parameters_Silo_load_type": {
			"type": "string",
			"defaultValue": "Incremental"
		},
		"SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "SUMS"
		},
		"SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "SUMS_Hourly_Trigger"
		},
		"SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"SUMS_Mart_Daily_Trigger_properties_PL_SUMS_Daily_Consumption_And_Analysis_parameters_Source_Name": {
			"type": "string",
			"defaultValue": "SUMS"
		},
		"SUMS_Mart_Daily_Trigger_properties_PL_SUMS_Daily_Consumption_And_Analysis_parameters_Load_Type": {
			"type": "string",
			"defaultValue": "Incremental"
		},
		"Salesforce_Daily_Trigger_properties_PL_Salesforce_DM_SourcetoBlob_Master_parameters_Source_Name": {
			"type": "string",
			"defaultValue": "SalesForce"
		},
		"Salesforce_Daily_Trigger_properties_PL_Salesforce_DM_SourcetoBlob_Master_parameters_SourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Salesforce_Daily_Trigger_properties_PL_Salesforce_DM_SourcetoBlob_Master_parameters_BlobtoAsql": {
			"type": "bool",
			"defaultValue": true
		},
		"ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "ServiceNow"
		},
		"ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_OnlySourceToGSFileServer": {
			"type": "bool",
			"defaultValue": true
		},
		"ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_OnlyGSFileServerToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_p_MidServerLocation": {
			"type": "string",
			"defaultValue": "\\\\NFUJPRD281\\c$\\Utils\\PROD2\\ServiceNow MID Server NFUJPRD281_Kusanagi\\agent\\export\\updates"
		},
		"TEMETRA_Daily_Trigger_properties_PL_Temetra_Main_parameters_databricks_cluster_id": {
			"type": "string",
			"defaultValue": "0818-004527-fleck168"
		},
		"TEMETRA_Daily_Trigger_properties_PL_Temetra_Main_parameters_databricks_secret_name": {
			"type": "string",
			"defaultValue": "databricks-token"
		},
		"Takadu_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Takadu-Reporting-API"
		},
		"Takadu_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Takadu_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Takadu_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"Takadu_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Takadu-Reporting-API-Week"
		},
		"Takadu_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"Takadu_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"Takadu_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"Temetra_Geospatial_Devices_Daily_Trigger_properties_PL_Temetra_Geospatial_File_Bulk_Load_parameters_sourcename": {
			"type": "string",
			"defaultValue": "TEMETRA-GEOSPATIAL-DEVICES"
		},
		"Temetra_Geospatial_Devices_Daily_Trigger_properties_PL_Temetra_Geospatial_File_Bulk_Load_parameters_databricks_cluster_id": {
			"type": "string",
			"defaultValue": "0818-004527-fleck168"
		},
		"Temetra_Geospatial_Devices_Daily_Trigger_properties_PL_Temetra_Geospatial_File_Bulk_Load_parameters_databricks_secret_name": {
			"type": "string",
			"defaultValue": "databricks-token"
		},
		"UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "UrbanHQ"
		},
		"UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "UrbanHQ_Monthly_Trigger"
		},
		"UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName": {
			"type": "string",
			"defaultValue": "UrbanHQ"
		},
		"UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery": {
			"type": "bool",
			"defaultValue": false
		},
		"UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob": {
			"type": "bool",
			"defaultValue": false
		},
		"UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL": {
			"type": "bool",
			"defaultValue": false
		},
		"UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName": {
			"type": "string",
			"defaultValue": "UrbanHQ_Daily_Trigger"
		},
		"UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory": {
			"type": "string",
			"defaultValue": "Trigger"
		},
		"UrbanHQ_daily_Trigger_properties_PL_UrbanHQ_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "UrbanHQ"
		},
		"UrbanHQ_daily_Trigger_properties_PL_UrbanHQ_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"UrbanHQ_daily_Trigger_properties_PL_UrbanHQ_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"WWI_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "WWI_SEC"
		},
		"WWI_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"WWI_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"WWI_Daily_Trigger_properties_PL_WWI_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "WWI"
		},
		"WWI_Daily_Trigger_properties_PL_WWI_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"WWI_Daily_Trigger_properties_PL_WWI_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"eDNA_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "eDNA_SEC"
		},
		"eDNA_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"eDNA_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"eDNA_Daily_Trigger_properties_PL_WWI_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "eDNA"
		},
		"eDNA_Daily_Trigger_properties_PL_WWI_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"eDNA_Daily_Trigger_properties_PL_WWI_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"eForms_daily_trigger_properties_PL_eForms_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "eForms"
		},
		"eForms_daily_trigger_properties_PL_eForms_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"eForms_daily_trigger_properties_PL_eForms_Main_parameters_additional_param": {
			"type": "string",
			"defaultValue": ",\"collectionReference\": \"$['Entry']['PhotoTable']\""
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Archive_delete_JSONFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_srcLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.BlobContainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.FilePath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Archive_Delete_loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterOnlyjsonFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterOnlyjsonFiles').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Archive_proccessed_jsons",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_ABLB_srclanding_json_source",
											"type": "DatasetReference",
											"parameters": {
												"Sourceblobfoldername": {
													"value": "@concat(pipeline().parameters.BlobContainer,'/',pipeline().parameters.FilePath)",
													"type": "Expression"
												},
												"Sourceblobfilename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_srclanding_json_source",
											"type": "DatasetReference",
											"parameters": {
												"Sourceblobfoldername": {
													"value": "@concat(pipeline().parameters.BlobContainer,'/',pipeline().parameters.FilePath,'/Archived')",
													"type": "Expression"
												},
												"Sourceblobfilename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete_files_after_archival",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Archive_proccessed_jsons",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_srclanding_json_source",
											"type": "DatasetReference",
											"parameters": {
												"Sourceblobfoldername": {
													"value": "@concat(pipeline().parameters.BlobContainer,'/',pipeline().parameters.FilePath)",
													"type": "Expression"
												},
												"Sourceblobfilename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterOnlyjsonFiles",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileNames').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, 'json')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BlobContainer": {
						"type": "string",
						"defaultValue": "eforms-datalanding/"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "ef039"
					}
				},
				"folder": {
					"name": "eForms"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_srcLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_srclanding_json_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ABN_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Process the ABN data in Databricks delta then move to Azure sql db",
				"activities": [
					{
						"name": "usp_get_tablelist_by_sourceid",
						"description": "Lookup activity to retrieve the list blob csv file need to be processed from the metadata table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachABNFiles",
						"description": "looping through the list of blob file.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "usp_get_tablelist_by_sourceid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('usp_get_tablelist_by_sourceid').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Exec_PL_Framework_TRFM_BlobToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"blobcontainer": {
												"value": "@item().TargetBlobContainer",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@item().StorageAccount",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@if(equals(item().SourceName,'EDW_Discovery'), item().Source_Column_list,item().ColumnSchemaList)",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@item().BusinessKeyColumnList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@item().DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@item().DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@item().DeltaStagingTableName",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@item().AzuresqldbMaxLastModifieddtm",
												"type": "Expression"
											},
											"tableid": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@item().azuresqltemptablename",
												"type": "Expression"
											},
											"blobfolderpath": {
												"value": "@item().TargetBlobFolderPath",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@item().deltastagingtableparquetfilepath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@item().DestinationHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"azuresqltargettablename": {
												"value": "@item().AzuresqlTargetTableName",
												"type": "Expression"
											},
											"skipcsvrows": "0",
											"ETLMergeNotebookPath": {
												"value": "@item().ETLMergeNotebookPath",
												"type": "Expression"
											},
											"StoredProcNameMergeAzuresqltable": {
												"value": "@item().StoredProcNameMergeAzuresqltable",
												"type": "Expression"
											},
											"databricksclustername": {
												"value": "@item().databricksclustername",
												"type": "Expression"
											},
											"databricksclusterid": {
												"value": "@item().databricksclusterid",
												"type": "Expression"
											},
											"SourceTableName": {
												"value": "@item().SourceTableName",
												"type": "Expression"
											},
											"skipchangedset": "0",
											"databrickssecretname": {
												"value": "@item().databrickssecretname",
												"type": "Expression"
											},
											"sourcecolumnlist": {
												"value": "@item().Source_Column_list",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ETL_usp_delete_from_azuresqltable",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exec_PL_Framework_TRFM_BlobToASQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_delete_from_azuresqltable]",
										"storedProcedureParameters": {
											"table_source": {
												"value": {
													"value": "@item().AzuresqlTempTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_target": {
												"value": {
													"value": "@item().AzuresqlTargetTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableid": {
												"value": {
													"value": "@item().TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "ABN"
					}
				},
				"folder": {
					"name": "ABN"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ABN_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Exec_PL_ABN",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ABN_SourceToBlob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Exec_PL_ABN_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Exec_PL_ABN",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ABN_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ABN"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ABN_SourceToBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ABN_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ABN_SourceToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is to validate the Supplier ABN Number.,",
				"activities": [
					{
						"name": "usp_get_tablelist_by_sourceid",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "usp_get_tablelist_by_sourceid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('usp_get_tablelist_by_sourceid').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourceToBlob_Oracle",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"Host_Name": {
												"value": "@item().Host_Name",
												"type": "Expression"
											},
											"Port_No": {
												"value": "@item().Port_No",
												"type": "Expression"
											},
											"SID": {
												"value": "@item().SID",
												"type": "Expression"
											},
											"User_Name": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"Secret_Password_Name": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"IsInitialLoad": {
												"value": "@item().IsInitialLoad",
												"type": "Expression"
											},
											"MaxInitialLoadDataIntegrationUnit": {
												"value": "@item().MaxInitialLoadDataIntegrationUnit",
												"type": "Expression"
											},
											"MaxInitialLoadDegreeOfCopyParallelism": {
												"value": "@item().MaxInitialLoadDegreeOfCopyParallelism",
												"type": "Expression"
											},
											"MaxDailyLoadDataIntegrationUnit": {
												"value": "@item().MaxDailyLoadDataIntegrationUnit",
												"type": "Expression"
											},
											"MaxDailyLoadDegreeOfCopyParallelism": {
												"value": "@item().MaxDailyLoadDegreeOfCopyParallelism",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Databricks_ABN_SEARCH_Notebook",
						"description": "Execute ABN_SEARCH_Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ForEachTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@pipeline().parameters.abn_search_databrick_notebook",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID,databricksclusterid,databrickssecretname FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"abn_search_databrick_notebook": {
						"type": "string",
						"defaultValue": "/edw_discovery/ABN/ABN_Search"
					},
					"Source_Name": {
						"type": "string",
						"defaultValue": "ABN_SUPPLIER_BUSINESS"
					}
				},
				"folder": {
					"name": "ABN"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-06T06:44:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourceToBlob_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_BulkCopyBlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_DataLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.SourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFiles",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": 1
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ABLB_DataLanding_FizeSize",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.SourceDirectory",
													"type": "Expression"
												},
												"file": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_EDWDiscovery_Table",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@concat('bom_',replace(item().name,'.CSV','' ))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceContainer": {
						"type": "string",
						"defaultValue": "bom-datalanding"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "evapotranspiration"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FizeSize')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery_Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_CopyandTransformSourceFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy BOM file to Blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": false,
									"wildcardFileName": {
										"value": "@{concat(pipeline().parameters.STATION_POINT_NAME,'-',pipeline().parameters.yesterdayyear,pipeline().parameters.yesterdaymonth,'.csv')}",
										"type": "Expression"
									},
									"useBinaryTransfer": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FS_FTP",
								"type": "DatasetReference",
								"parameters": {
									"FileFolderPath": {
										"value": "@pipeline().parameters.FileFolderPath",
										"type": "Expression"
									},
									"FileFolderName": {
										"value": "@pipeline().parameters.STATION_POINT_NAME",
										"type": "Expression"
									},
									"FileServer": "ftp://ftp.bom.gov.au/"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_FS_SUMS",
								"type": "DatasetReference",
								"parameters": {
									"targetblobfoldername": {
										"value": "@concat('bom-datalanding/',pipeline().parameters.STATION_POINT_NAME)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "PL_BOM_TRFM_BlobFile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "getlistofblobfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BOM_TRFM_BlobFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"blobcontainer": {
									"value": "@activity('getlistofblobfile').output.firstrow.TargetBlobContainer",
									"type": "Expression"
								},
								"blobfolderpath": {
									"value": "@pipeline().parameters.STATION_POINT_NAME",
									"type": "Expression"
								},
								"storageaccount": {
									"value": "@activity('getlistofblobfile').output.firstrow.StorageAccount",
									"type": "Expression"
								},
								"blobfilename": {
									"value": "@concat(activity('getlistofblobfile').output.firstrow.TargetBlobContainer,'/',pipeline().parameters.STATION_POINT_NAME)",
									"type": "Expression"
								},
								"columnlist": {
									"value": "@activity('getlistofblobfile').output.firstrow.ColumnSchemaList",
									"type": "Expression"
								},
								"QuoteCharacter": {
									"value": "@activity('getlistofblobfile').output.firstrow.QuoteCharacter",
									"type": "Expression"
								},
								"STATION_POINT_NAME": {
									"value": "@pipeline().parameters.STATION_POINT_NAME",
									"type": "Expression"
								},
								"ColumnDelimiter": {
									"value": "@activity('getlistofblobfile').output.firstrow.ColumnDelimiter",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('getlistofblobfile').output.firstrow.databrickssecretname",
									"type": "Expression"
								},
								"databricksclusterid": {
									"value": "@activity('getlistofblobfile').output.firstrow.databricksclusterid",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "getlistofblobfile",
						"description": "Lookup activity to retrieve the list blob csv file need to be processed from the metadata table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy BOM file to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "ETL.usp_get_tablelist_by_sourceid_and_tableid",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									},
									"TableID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.TableID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Fileserverlocation": {
						"type": "string"
					},
					"FileFolderPath": {
						"type": "string"
					},
					"STATION_POINT_NAME": {
						"type": "string"
					},
					"TableID": {
						"type": "string"
					},
					"yesterdayyear": {
						"type": "string"
					},
					"yesterdaymonth": {
						"type": "string"
					},
					"SourceID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-26T00:04:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_FTP')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_SUMS')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_TRFM_BlobFile')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_DM_SourcetoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lkp_LocalDates",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select substring(dbo.udf_covert_utc_to_local_Datetime(getdate()), 1,4)  as  currentyear\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(getdate()),6,2)  as  currentmonth\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(getdate()),9,2)  as  currentdayofmonth\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(dateadd(DAY,-1,getdate())), 1,4)  as  yesterdayyear\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(dateadd(DAY,-1,getdate())),6,2)  as  yesterdaymonth\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(dateadd(DAY,-1,getdate())),9,2)  as  yesterdaydayofmonth",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lkp_FTPFolderDetails",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lkp_LocalDates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select \n\t\tss.*, STD.TableID\n From \n (\n\n\t SELECT \n\t\tsourceid, Fileserverlocation, FileFolderPath,value as STATION_POINT_NAME\n\tFROM  ETL.SourceSystem \n\t\tcross apply STRING_SPLIT(filefoldername, ',')\n\twhere sourceid = @{pipeline().parameters.SourceID}\n\n) SS join  [ETL].[SourceTableDetails] STD on STD.sourceid = ss.sourceid\nand TargetBlobFileName = ss.STATION_POINT_NAME",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each Station Point Name",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_FTPFolderDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_FTPFolderDetails').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute PL_BOM_CopyandTransformSourceFile",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_BOM_CopyandTransformSourceFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Fileserverlocation": {
												"value": "@item().Fileserverlocation",
												"type": "Expression"
											},
											"FileFolderPath": {
												"value": "@item().FileFolderPath",
												"type": "Expression"
											},
											"STATION_POINT_NAME": {
												"value": "@item().STATION_POINT_NAME",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"yesterdayyear": {
												"value": "@activity('Lkp_LocalDates').output.firstrow.yesterdayyear",
												"type": "Expression"
											},
											"yesterdaymonth": {
												"value": "@activity('Lkp_LocalDates').output.firstrow.yesterdaymonth",
												"type": "Expression"
											},
											"SourceID": {
												"value": "@pipeline().parameters.SourceID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "38"
					}
				},
				"variables": {
					"Fileserverlocation": {
						"type": "String"
					},
					"FileFolderPath": {
						"type": "String"
					},
					"STATION_POINT_NAME": {
						"type": "String"
					},
					"TableID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_CopyandTransformSourceFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_DM_SourcetoBlob_stageTransform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lkp_TableStationsDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									},
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each Station Point Name",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_TableStationsDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_TableStationsDetails').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute PL_BOM_Transform",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_BOM_TransformSourceFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"STATION_POINT_NAME": {
												"value": "@item().Data_Destination_File_Name\n",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"SourceID": {
												"value": "@pipeline().parameters.SourceID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "int"
					},
					"TriggerName": {
						"type": "string",
						"defaultValue": "Null"
					}
				},
				"variables": {
					"Fileserverlocation": {
						"type": "String"
					},
					"FileFolderPath": {
						"type": "String"
					},
					"STATION_POINT_NAME": {
						"type": "String"
					},
					"TableID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-26T00:04:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_TransformSourceFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_DM_SourcetoBlob_stages')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Exc copy Stage",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BOM_Evapo_SourcetoBlob_stageCopy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@pipeline().parameters.SourceID",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Exc transform Stage",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Exc copy Stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BOM_DM_SourcetoBlob_stageTransform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@pipeline().parameters.SourceID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "11"
					}
				},
				"variables": {
					"Fileserverlocation": {
						"type": "String"
					},
					"FileFolderPath": {
						"type": "String"
					},
					"STATION_POINT_NAME": {
						"type": "String"
					},
					"TableID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-26T00:04:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_Evapo_SourcetoBlob_stageCopy')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_DM_SourcetoBlob_stageTransform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_Evapo_SourcetoBlob_stageCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lkp_FTPFolderDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select \n\t\tss.*, STD.TableID,STD.skipcsvrows,  TargetBlobFileName as STATION_POINT_NAME,   cyear, cmonth, cday\nFrom \n (\t\n select substring(dbo.udf_covert_utc_to_local_Datetime(getdate()), 1,4)  as  cyear\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(getdate()),6,2)  as  cmonth\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(getdate()),9,2)  as  cday\nunion\nselect\n\tsubstring(dbo.udf_covert_utc_to_local_Datetime(dateadd(DAY,-1,getdate())), 1,4)  as  yesterdayyear\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(dateadd(month,-1,getdate())),6,2)  as  yesterdaymonth\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(dateadd(DAY,-1,getdate())),9,2)  as  yesterdaydayofmonth\n\t\n) as ft  cross apply ETL.SourceSystem SS \n\njoin  [ETL].[SourceTableDetails] STD on STD.sourceid = ss.sourceid\nand isActive =1\nwhere STD.sourceid =   @{pipeline().parameters.SourceID}\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Station Point Name cross dates",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_FTPFolderDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_FTPFolderDetails').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute PL_BOM_Copy",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_BOM_FTPBlob_Copy",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Fileserverlocation": {
												"value": "@item().Fileserverlocation",
												"type": "Expression"
											},
											"FileFolderPath": {
												"value": "@item().FileFolderPath",
												"type": "Expression"
											},
											"STATION_POINT_NAME": {
												"value": "@item().STATION_POINT_NAME",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"yesterdayyear": {
												"value": "@item().cyear",
												"type": "Expression"
											},
											"yesterdaymonth": {
												"value": "@item().cmonth",
												"type": "Expression"
											},
											"SourceID": {
												"value": "@pipeline().parameters.SourceID",
												"type": "Expression"
											},
											"skip_row": {
												"value": "@item().skipcsvrows",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "38"
					}
				},
				"variables": {
					"Fileserverlocation": {
						"type": "String"
					},
					"FileFolderPath": {
						"type": "String"
					},
					"STATION_POINT_NAME": {
						"type": "String"
					},
					"TableID": {
						"type": "String"
					},
					"fromDate": {
						"type": "String"
					},
					"ToDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-26T00:04:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_FTPBlob_Copy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_FTPBlob_Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy BOM file to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lkp_Station_no",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "station_no",
										"value": {
											"value": "@activity('Lkp_Station_no').output.firstRow.Station_Number",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": false,
									"wildcardFileName": {
										"value": "@{concat(pipeline().parameters.STATION_POINT_NAME,'-',pipeline().parameters.yesterdayyear,pipeline().parameters.yesterdaymonth,'.csv')}",
										"type": "Expression"
									},
									"useBinaryTransfer": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FS_FTP",
								"type": "DatasetReference",
								"parameters": {
									"FileFolderPath": {
										"value": "@pipeline().parameters.FileFolderPath",
										"type": "Expression"
									},
									"FileFolderName": {
										"value": "@pipeline().parameters.STATION_POINT_NAME",
										"type": "Expression"
									},
									"FileServer": {
										"value": "@pipeline().parameters.Fileserverlocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_FS_SUMS",
								"type": "DatasetReference",
								"parameters": {
									"targetblobfoldername": {
										"value": "@concat('bom-datalanding/',pipeline().parameters.STATION_POINT_NAME)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Lkp_Station_no",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select Station_Number from  [ETL].[SourceTableDetails] STD join  ETL.SourceSystem ss on STD.sourceid = ss.sourceid join bom.station on TargetBlobFileName = station.BOM_Folder_Name\nwhere TableID = '@{pipeline().parameters.TableID}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Fileserverlocation": {
						"type": "string"
					},
					"FileFolderPath": {
						"type": "string"
					},
					"STATION_POINT_NAME": {
						"type": "string"
					},
					"TableID": {
						"type": "string"
					},
					"yesterdayyear": {
						"type": "string"
					},
					"yesterdaymonth": {
						"type": "string"
					},
					"SourceID": {
						"type": "string"
					},
					"skip_row": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-26T00:04:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_FTP')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_SUMS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_Forecast_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePL_TRFM_BLOBToASQL",
						"description": "Loading Temetra API Data into databricks delta and Azure sql db",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.firstRow['SourceID']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "BOM-FORECAST"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_Forecast_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BOM_Brisbane_Forecast",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/BOM_Forecasts/BOM_Brisbane_Forecast"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricksclusterid",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databrickssecretname",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_BOM_Forecast_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BOM_Brisbane_Forecast",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BOM_Forecast_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceName": {
									"value": "@pipeline().parameters.SourceName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "BOM-FORECAST"
					},
					"databricksclusterid": {
						"type": "string",
						"defaultValue": "1015-043022-have239"
					},
					"databrickssecretname": {
						"type": "string",
						"defaultValue": "databricks-token"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_Forecast_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_HTTPZIPtoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy HTTP bin Zip",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set url_variable",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lkp_tmp_folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_HTTP_ZipBin_Parameter",
								"type": "DatasetReference",
								"parameters": {
									"s_url_base": {
										"value": "@activity('Lkp_tmp_folder').output.firstRow.ParameterValue",
										"type": "Expression"
									},
									"s_url_relative": {
										"value": "@concat(variables('url_variable'),'.zip')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Binary_Sink_File",
								"type": "DatasetReference",
								"parameters": {
									"blob_directory": {
										"value": "@concat(pipeline().parameters.blobfolder,'/zip')",
										"type": "Expression"
									},
									"blob_File": {
										"value": "@concat(variables('url_variable'),'.zip')",
										"type": "Expression"
									},
									"blob_storageaccount": {
										"value": "@pipeline().parameters.src_blobstorageaccount",
										"type": "Expression"
									},
									"blob_container": {
										"value": "@pipeline().parameters.src_blobcontainer",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set url_variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set year",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "url_variable",
							"value": {
								"value": "@concat(toUpper(pipeline().parameters.blobfile),'_',variables('year'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BOM Daily Rainfall Weather",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:05:00",
							"retry": 10,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.webrequest_url,pipeline().parameters.relative_url)",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"disableCertValidation": true
						}
					},
					{
						"name": "Unzip SRC Blob to  ADLS Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy HTTP bin Zip",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ABLB_BinZip_Source",
								"type": "DatasetReference",
								"parameters": {
									"blob_directory": {
										"value": "@concat(pipeline().parameters.blobfolder,'/zip/')",
										"type": "Expression"
									},
									"blob_container": {
										"value": "@pipeline().parameters.src_blobcontainer",
										"type": "Expression"
									},
									"storage_account": {
										"value": "@pipeline().parameters.src_blobstorageaccount",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Binary_Sink",
								"type": "DatasetReference",
								"parameters": {
									"blob_container": {
										"value": "@pipeline().parameters.src_blobcontainer",
										"type": "Expression"
									},
									"storage_account": {
										"value": "@pipeline().parameters.src_blobstorageaccount",
										"type": "Expression"
									},
									"blob_folder": {
										"value": "@concat(pipeline().parameters.blobfolder,'/unzip/')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy BOM file to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Unzip SRC Blob to  ADLS Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lkp_Station_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "station_no",
										"value": {
											"value": "@activity('Lkp_Station_Name').output.firstRow.Display_Name",
											"type": "Expression"
										}
									},
									{
										"name": "observation_date",
										"value": {
											"value": "@convertTimeZone(utcNow(),'UTC','E. Australia Standard Time')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": {
										"value": "@concat('*',pipeline().parameters.fileNameExt)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@pipeline().parameters.fileNameExt",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ABLB_CSVFile_Source",
								"type": "DatasetReference",
								"parameters": {
									"src_blobcontainer": {
										"value": "@pipeline().parameters.src_blobcontainer",
										"type": "Expression"
									},
									"src_blobfolder": {
										"value": "@concat(pipeline().parameters.blobfolder,'/unzip/')",
										"type": "Expression"
									},
									"delimiter": {
										"value": "@pipeline().parameters.delimiter",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_DataLanding_CSV",
								"type": "DatasetReference",
								"parameters": {
									"target_storageaccount": {
										"value": "@pipeline().parameters.blobstorageaccount",
										"type": "Expression"
									},
									"target_blobcontainer": {
										"value": "@pipeline().parameters.blobcontainer",
										"type": "Expression"
									},
									"target_blobfolder": {
										"value": "@pipeline().parameters.blobfolder",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set year",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BOM Daily Rainfall Weather",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@if(equals(substring(activity('BOM Daily Rainfall Weather').output.Response, add(indexOf(activity('BOM Daily Rainfall Weather').output.Response,pipeline().parameters.blobfile),18),4),'BLIC'),pipeline().parameters.year,substring(activity('BOM Daily Rainfall Weather').output.Response,add(indexOf(activity('BOM Daily Rainfall Weather').output.Response,pipeline().parameters.blobfile),18),4))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lkp_Station_Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TOP 1 Display_Name \nFROM BOM.Station s  \njoin [ETL].[SourceTableDetails] STD \non  s.Station_Number =  SUBSTRING (SourceTableName, charindex('_',SourceTableName,1)+1 ,6)\njoin  ETL.SourceSystem ss \non STD.SourceID = ss.SourceID \nwhere 1=1\nand  TableID = '@{pipeline().parameters.TableID}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Lkp_tmp_folder",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [ParameterValue],\ndbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2\n  FROM [ETL].[SourceTableParameter]\n  WHERE IsActive = 1\n  AND ParameterName = 'URL_Folder_Data'\n  AND [TableID] = '@{pipeline().parameters.TableID}'\n  \n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Archive_Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy BOM file to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.src_blobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@concat(pipeline().parameters.blobfolder,'/unzip/')",
										"type": "Expression"
									},
									"blobfilename": {
										"value": "@concat(variables('url_variable'),'_Data',pipeline().parameters.fileNameExt)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.src_blobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@concat(pipeline().parameters.blobfolder,'/Archived')",
										"type": "Expression"
									},
									"blobfilename": {
										"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1),concat(variables('url_variable'),'-',activity('Lkp_tmp_folder').output.firstRow.localstarttime2,pipeline().parameters.fileNameExt),concat(variables('url_variable'),pipeline().parameters.fileNameExt))",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete_Old_From_SRCLanding",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.src_blobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@concat(pipeline().parameters.blobfolder,'/unzip/')",
										"type": "Expression"
									},
									"blobfilename": {
										"value": "@concat(variables('url_variable'),'_Data',pipeline().parameters.fileNameExt)",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"relative_url": {
						"type": "string",
						"defaultValue": "av?p_nccObsCode=136&p_display_type=dailyDataFile&p_startYear=&p_c=&p_stn_num=040120"
					},
					"year": {
						"type": "string",
						"defaultValue": "2023"
					},
					"fileNameExt": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"blobcontainer": {
						"type": "string",
						"defaultValue": "bom-datalanding"
					},
					"blobfolder": {
						"type": "string",
						"defaultValue": "rainfall/idcjac0009_040120"
					},
					"blobfile": {
						"type": "string",
						"defaultValue": "idcjac0009_040120"
					},
					"src_blobstorageaccount": {
						"type": "string",
						"defaultValue": "quueaprddasrclanding001"
					},
					"webrequest_url": {
						"type": "string",
						"defaultValue": "http://www.bom.gov.au/jsp/ncc/cdio/weatherData/"
					},
					"station": {
						"type": "string",
						"defaultValue": "040120"
					},
					"blobstorageaccount": {
						"type": "string",
						"defaultValue": "quueaprddadlslanding001"
					},
					"src_blobcontainer": {
						"type": "string",
						"defaultValue": "http-datalanding/bom-datalanding"
					},
					"delimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1508"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"url_variable": {
						"type": "String"
					},
					"year": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HTTP_ZipBin_Parameter')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Binary_Sink_File')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_BinZip_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Binary_Sink')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_CSVFile_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_Srclanding_Binary_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_SourceToAsql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_BOM_DM_SourcetoBlob_stages",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.FirstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "BOM Weather Data"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-17T04:56:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_DM_SourcetoBlob_stages')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_TRFM_BlobFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_DataLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.blobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.blobfolderpath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyCsvFilesAndExecuteDatabricks",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "executedatabricksnotebook",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "MoveEmptyFile",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": "/edw_discovery/FileTransfer",
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.blobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": {
															"value": "@pipeline().parameters.databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@pipeline().parameters.databrickssecretname",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "ETL_Change_DateFormat",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": "/edw_discovery/ETL_Change_DateFormat_BOM",
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.blobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														},
														"columnlist": {
															"value": "@pipeline().parameters.columnlist",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@base64(pipeline().parameters.QuoteCharacter)",
															"type": "Expression"
														},
														"STATION_POINT_NAME": {
															"value": "@pipeline().parameters.STATION_POINT_NAME",
															"type": "Expression"
														},
														"databrickssecretnamee": {
															"value": "@pipeline().parameters.databrickssecretname",
															"type": "Expression"
														},
														"databricksclusterid": {
															"value": "@pipeline().parameters.databricksclusterid",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": {
															"value": "@pipeline().parameters.databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@pipeline().parameters.databrickssecretname",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(AND(greater(variables('FileSize'),'0'), contains(variables('FileName'),'.csv') ),true,false)\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_DataLanding_FizeSize",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.blobcontainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.blobfolderpath",
													"type": "Expression"
												},
												"file": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					},
					"storageaccount": {
						"type": "string"
					},
					"blobfilename": {
						"type": "string"
					},
					"columnlist": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"STATION_POINT_NAME": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"databrickssecretname": {
						"type": "string"
					},
					"databricksclusterid": {
						"type": "string"
					}
				},
				"variables": {
					"processfile": {
						"type": "Boolean"
					},
					"FileNames": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"FileSize": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-17T04:56:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FizeSize')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_TransformSourceFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_BOM_TRFM_BlobFile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "getlistofblobfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BOM_TRFM_BlobFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"blobcontainer": {
									"value": "@activity('getlistofblobfile').output.firstrow.TargetBlobContainer",
									"type": "Expression"
								},
								"blobfolderpath": {
									"value": "@pipeline().parameters.STATION_POINT_NAME",
									"type": "Expression"
								},
								"storageaccount": {
									"value": "@activity('getlistofblobfile').output.firstrow.StorageAccount",
									"type": "Expression"
								},
								"blobfilename": {
									"value": "@concat(activity('getlistofblobfile').output.firstrow.TargetBlobContainer,'/',pipeline().parameters.STATION_POINT_NAME)",
									"type": "Expression"
								},
								"columnlist": {
									"value": "@activity('getlistofblobfile').output.firstrow.ColumnSchemaList",
									"type": "Expression"
								},
								"QuoteCharacter": {
									"value": "@activity('getlistofblobfile').output.firstrow.QuoteCharacter",
									"type": "Expression"
								},
								"STATION_POINT_NAME": {
									"value": "@pipeline().parameters.STATION_POINT_NAME",
									"type": "Expression"
								},
								"ColumnDelimiter": {
									"value": "@activity('getlistofblobfile').output.firstrow.ColumnDelimiter",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('getlistofblobfile').output.firstrow.databrickssecretname",
									"type": "Expression"
								},
								"databricksclusterid": {
									"value": "@activity('getlistofblobfile').output.firstrow.databricksclusterid",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "getlistofblobfile",
						"description": "Lookup activity to retrieve the list blob csv file need to be processed from the metadata table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "ETL.usp_get_tablelist_by_sourceid_and_tableid",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									},
									"TableID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.TableID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"STATION_POINT_NAME": {
						"type": "string"
					},
					"TableID": {
						"type": "string"
					},
					"SourceID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-26T00:04:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_TRFM_BlobFile')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Chris21_Archive_updateFileLoadDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Transfer file to Archive folder in global scape",
				"activities": [
					{
						"name": "Lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select  \n\n     FileFolderName \n\t ,SourceFileName\n    ,ArchiveFileFolderName =FileFolderName  + '\\Archive\\' + convert(varchar(20),dbo.udf_getLocalDTM(),112)\n\t,CheckpointColumn\n\t,CheckpointColumnValue\n\t,AzuresqlTargetTableName\nfrom etl.sourcesystem s\nLEFT OUTER JOIN ETL.SourceTableDetails d ON s.sourceid = d.sourceid \nLEFT OUTER JOIN ETL.SourceFileLoad SFL on replace(SFL.FileName,'.csv','') = d.SourceTableName\nwhere sourcename = '@{pipeline().parameters.SourceName}'  and d.isactive = 1\nand d.TriggerName like concat('%','@{pipeline().parameters.TriggerName}','%')",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_getfilemetadata').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Chris21_Files_Copy_to_Blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": 0
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "FileServerWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FS_GlobalScape_Chris21_Source",
											"type": "DatasetReference",
											"parameters": {
												"filefolder": {
													"value": "@item().FileFolderName",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().SourceFileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_FS_GlobalScape_Chris21_Source",
											"type": "DatasetReference",
											"parameters": {
												"filefolder": {
													"value": "@item().ArchiveFileFolderName",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().SourceFileName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "StoredProcedureUpdateFileLoadDate",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Chris21_Files_Copy_to_Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_SourceFileLoad]",
										"storedProcedureParameters": {
											"FileName": {
												"value": {
													"value": "@item().SourceFileName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Checkpoint Column check",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "StoredProcedureUpdateFileLoadDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(coalesce(item().CheckpointColumn, ''),'')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Get Max CheckPointValue",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT max(@{item().CheckpointColumn}) AS CheckpointColumnMaxValue FROM @{item().AzuresqlTargetTableName}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "PL_File_Monitoring_CheckPointValueCheck",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Get Max CheckPointValue",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_File_Monitoring_CheckPointValueCheck",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"CheckpointTableValue": {
															"value": "@activity('Get Max CheckPointValue').output.firstRow['CheckpointColumnMaxValue']",
															"type": "Expression"
														},
														"CheckpointFileLoadValue": {
															"value": "@item().CheckpointColumnValue",
															"type": "Expression"
														},
														"ErrorMessage": {
															"value": "@concat(item().SourceFileName,' was not received with latest ',item().CheckpointColumn, '. The current ', item().CheckpointColumn, ' is ',item().CheckpointColumnValue)",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@pipeline().parameters.EmailTo",
															"type": "Expression"
														},
														"Subject": {
															"value": "@pipeline().parameters.Subject",
															"type": "Expression"
														},
														"LogicAppURL": {
															"value": "@pipeline().parameters.LogicAppURL",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "CHRIS21"
					},
					"Subject": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"LogicAppURL": {
						"type": "string"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"Testvar": {
						"type": "String"
					},
					"targetblobfoldername": {
						"type": "String"
					},
					"ErrorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Chris21"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-14T05:51:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_Chris21_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_File_Monitoring_CheckPointValueCheck')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Chris21_DM_SourcetoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Transfer file to Blob storage",
				"activities": [
					{
						"name": "Lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select  FileFolderName,SourceFileName,TargetBlobFilePath,TargetBlobFileName = lower(TargetBlobFileName + '_' + convert(varchar(20),dbo.udf_getLocalDTM(),112) + targetBlobFileNameExt )\nfrom etl.sourcesystem s\nLEFT OUTER JOIN ETL.SourceTableDetails d\nON s.sourceid = d.sourceid \nand d.isactive = 1\nwhere sourcename = '@{pipeline().parameters.sourcename}'\nand d.TriggerName like concat('%','@{pipeline().parameters.TriggerName}','%')\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_getfilemetadata').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Chris21_Files_Copy_to_Blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": 0
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_FS_GlobalScape_Chris21_Source",
											"type": "DatasetReference",
											"parameters": {
												"filefolder": {
													"value": "@item().FileFolderName",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().SourceFileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_FS_Chris21_Sink",
											"type": "DatasetReference",
											"parameters": {
												"targetblobfoldername": {
													"value": "@item().TargetBlobFilePath ",
													"type": "Expression"
												},
												"targetblobfilename": {
													"value": "@item().TargetBlobFileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "CHRIS21"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"Testvar": {
						"type": "String"
					},
					"targetblobfoldername": {
						"type": "String",
						"defaultValue": "tankerfillingstation-dataloading/CardService"
					}
				},
				"folder": {
					"name": "Chris21"
				},
				"annotations": [],
				"lastPublishTime": "2020-07-15T02:00:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_Chris21_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_Chris21_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Chris21_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "FileMonitoring",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Chris21_DM_SourcetoBlob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourcename": {
												"value": "@pipeline().parameters.SourceName",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Archive_UpdateLoadDateforFile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForBlobToASQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Chris21_Archive_updateFileLoadDate",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourcename": {
									"value": "@pipeline().parameters.SourceName",
									"type": "Expression"
								},
								"Subject": {
									"value": "@pipeline().parameters.SourceName",
									"type": "Expression"
								},
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"LogicAppURL": {
									"value": "@pipeline().parameters.LogicAppURL",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().parameters.TriggerName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "FileMonitoring",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_File_Monitoring",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Sourcename": "CHRIS21",
								"ErrorMessageFileNotReceived": "File not received",
								"EmailTo": {
									"value": "@pipeline().parameters.EmailTo",
									"type": "Expression"
								},
								"LogicAppURL": {
									"value": "@pipeline().parameters.LogicAppURL",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().parameters.TriggerName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "CHRIS21"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					},
					"EmailTo": {
						"type": "string",
						"defaultValue": "DL-IS-Analytics-Data-Foundation@urbanutilities.com.au"
					},
					"LogicAppURL": {
						"type": "string",
						"defaultValue": "https://prod-08.australiaeast.logic.azure.com:443/workflows/b473972d5dc743d8a7fe7451183104e4/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=K1XqCE2ZWAsChqL1-cjnP57avlNPOmrYgj4cTAXJ2uU"
					},
					"TriggerName": {
						"type": "string",
						"defaultValue": "Chris21_Weekly_Trigger_Monday"
					}
				},
				"folder": {
					"name": "Chris21"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-05T05:45:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Chris21_Archive_updateFileLoadDate')]",
				"[concat(variables('factoryId'), '/pipelines/PL_File_Monitoring')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Chris21_DM_SourcetoBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Cost_Summary_By_Region')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "usp_load_Cost_Summary_by_Region",
						"description": "execute the stored procedure to reload the data into cost_summary_by_region table in tactical database",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_load_Cost_Summary_by_Region]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWTactical",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Cost_Summary_By_Region"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWTactical')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EAMS_Integration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "EAMS Integration"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "EAMS Integration"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscover_DM_SourceToBlob_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Framework_CopyFiletoBlob_Pipeline",
									"description": "Execute copy file to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetTableInfo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_File",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceFolderLocation": {
												"value": "@activity('GetTableInfo').output.firstRow.SourceFolderLocation",
												"type": "Expression"
											},
											"SourceFileName": {
												"value": "@activity('GetTableInfo').output.firstRow.SourceFileName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetTableInfo",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid_and_tableid]",
											"storedProcedureParameters": {
												"sourceid": {
													"type": "Int32",
													"value": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													}
												},
												"tableid": {
													"type": "Int32",
													"value": {
														"value": "@item().TableID",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToASQL_HiAffinity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyEachTableData",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableLists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableLists').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyHAData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"additionalColumns": [
												{
													"name": "ROW_CREATED_DTM",
													"value": {
														"value": "@formatDateTime(convertTimeZone(pipeline().TriggerTime,'UTC','E. Australia Standard Time'), 'yyyy-MMM-dd hh:mm:ss tt')",
														"type": "Expression"
													}
												}
											],
											"oracleReaderQuery": {
												"value": "@{concat('select * from ', item().SourceSchemaName, '.', item().TableName)}",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBatchTimeout": "15:00:00",
											"preCopyScript": {
												"value": "@{concat('truncate table ', item().TargetSchemaName, '.', item().TableName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Oracle_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"HostName": {
													"value": "@pipeline().parameters.SourceHostName",
													"type": "Expression"
												},
												"PortNo": {
													"value": "@pipeline().parameters.SourcePortNo",
													"type": "Expression"
												},
												"SID": {
													"value": "@pipeline().parameters.SourceSID",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.SourceUserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SourceSecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem_Table",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.TargetServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.TargetDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.TargetUserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.TargetSecretPasswordName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().TargetSchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "GetTableLists",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT 'custima' AS SourceSchemaName, 'BPACKAGE' AS TableName, 'HiAffinity' AS TargetSchemaName",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.TargetServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.TargetDatabaseName",
										"type": "Expression"
									},
									"UserName": {
										"value": "@pipeline().parameters.TargetUserName",
										"type": "Expression"
									},
									"SecretPasswordName": {
										"value": "@pipeline().parameters.TargetSecretPasswordName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TargetServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV052"
					},
					"TargetDatabaseName": {
						"type": "string",
						"defaultValue": "EDW_Discovery"
					},
					"TargetUserName": {
						"type": "string",
						"defaultValue": "urbanutilities\\svc-EBI_PRDC04_AGT"
					},
					"TargetSecretPasswordName": {
						"type": "string",
						"defaultValue": "SVC-EBI-PRDC04-AGT"
					},
					"SourceHostName": {
						"type": "string",
						"defaultValue": "hcxdbprdmir.corporate.urbanutilities.internal"
					},
					"SourcePortNo": {
						"type": "string",
						"defaultValue": "1901"
					},
					"SourceSID": {
						"type": "string",
						"defaultValue": "HCXPRD"
					},
					"SourceUserName": {
						"type": "string",
						"defaultValue": "ebi_hiaffinity_user"
					},
					"SourceSecretPasswordName": {
						"type": "string",
						"defaultValue": "Hiaffinity-PRD-Password"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_EDWDiscovery_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Oracle_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_EDWDiscovery_OnPrem_Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_API')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_API",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"DeltaTargetTableName": {
												"value": "@item().DeltaTargetTableName",
												"type": "Expression"
											},
											"APIBaseURL": {
												"value": "@item().APIBaseURL",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2020-01-29T04:03:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_BlobJSONtoCSVFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select \ns.sourceID,\ntableID, \nSourceLandingContainer,\nconcat(LOWER(SourceSchemaName),'-datalanding/',SourceTableName) as SourceFilePath,\nTargetBlobContainer,\nTargetBlobFilePath,\nTargetBlobFileName = lower(TargetBlobFileName + '_' + cast(SYSDATETIME() as varchar(100))+ targetBlobFileNameExt ),\nColumnDelimiter,QuoteCharacter\nfrom etl.sourcesystem s\nLEFT OUTER JOIN ETL.SourceTableDetails d\nON s.sourceid = d.sourceid \nand d.isactive = 1\nwhere s.sourceid='@{pipeline().parameters.sourceid}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOREACH_json_to_csv",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_getfilemetadata').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Execute_json_csv_conversion",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_json_to_csv",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceLandingContainer": {
												"value": "@item().SourceLandingContainer",
												"type": "Expression"
											},
											"SourceFilePath": {
												"value": "@item().SourceFilePath",
												"type": "Expression"
											},
											"sourceID": {
												"value": "@item().sourceID",
												"type": "Expression"
											},
											"tableID": {
												"value": "@item().tableID",
												"type": "Expression"
											},
											"TargetBlobFilePath": {
												"value": "@item().TargetBlobFilePath",
												"type": "Expression"
											},
											"TargetBlobFileName": {
												"value": "@item().TargetBlobFileName",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"TargetBlobContainer": {
												"value": "@item().TargetBlobContainer",
												"type": "Expression"
											},
											"Additional_MappingParam": {
												"value": "@pipeline().parameters.Additional_MappingParam",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceId": {
						"type": "int"
					},
					"Additional_MappingParam": {
						"type": "string"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-11T12:29:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_json_to_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_Blob_ActualExcelTabs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetExcelWorkbookTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid_sourcefilename]",
								"storedProcedureParameters": {
									"SourceFileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ExcelConfigWorkbookName",
											"type": "Expression"
										}
									},
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetExcelWorkbookTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetExcelWorkbookTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Framework_CopyFiletoBlob_Pipeline",
									"description": "Execute copy file to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_Blob_ActualExcelTab",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@split(pipeline().parameters.ExcelActualWorkbookName,'.')[0]",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceFolderLocation": {
												"value": "@item().SourceFolderLocation",
												"type": "Expression"
											},
											"SourceFileName": {
												"value": "@pipeline().parameters.ExcelActualWorkbookName",
												"type": "Expression"
											},
											"SourceLandingContainer": {
												"value": "@item().SourceLandingContainer",
												"type": "Expression"
											},
											"SourceFileFolderName": {
												"value": "@item().FileFolderName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					},
					"ExcelConfigWorkbookName": {
						"type": "string",
						"defaultValue": "KANTAR Data File Example*.xlsx"
					},
					"ExcelActualWorkbookName": {
						"type": "string",
						"defaultValue": "KANTAR Data File Example 250123.xlsx"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T05:48:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_Blob_ActualExcelTab')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_Blob_ActualExcelWorkbooks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_srcLanding_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_srcLanding_Collection').output.value\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Excel File",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set ActualExcelFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(startswith(toLower(item().FileName),toLower(\n    replace(pipeline().parameters.ConfigSourceFileName, '*', '')\n    ))\n,endswith(toLower(item().FileName),toLower(pipeline().parameters.ConfigSourceFileNameExt)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy to Archive_Empty",
												"description": "Full Copy from source table into blob storage",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "lkp_getlocaltime_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 0
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.SourceLandingContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"blobfilename": {
																"value": "@item().FileName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.SourceLandingContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.FileFolderName, '/Archived')",
																"type": "Expression"
															},
															"blobfilename": {
																"value": "@concat(variables('ActualExcelFileNameWithoutExt') \n    ,'-'\n            ,activity('lkp_getlocaltime_Empty').output.firstRow.localstarttime, '.'\n             ,pipeline().parameters.ConfigSourceFileNameExt)",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete files from Blob_Empty",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Copy to Archive_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.SourceLandingContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"blobfilename": {
																"value": "@item().FileName",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "lkp_getlocaltime_Empty",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Execute DM_SourcetoBlob_Blob_ActualExcelWorkTabs",
												"description": "Execute copy file to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_Blob_ActualExcelTabs",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"SourceID": {
															"value": "@pipeline().parameters.SourceID",
															"type": "Expression"
														},
														"ExcelConfigWorkbookName": {
															"value": "@pipeline().parameters.ConfigSourceFileNameWithExt",
															"type": "Expression"
														},
														"ExcelActualWorkbookName": {
															"value": "@item().FileName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Copy to Archive",
												"description": "Full Copy from source table into blob storage",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "lkp_getlocaltime",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 0
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.SourceLandingContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"blobfilename": {
																"value": "@item().FileName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.SourceLandingContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.FileFolderName, '/Archived')",
																"type": "Expression"
															},
															"blobfilename": {
																"value": "@concat(variables('ActualExcelFileNameWithoutExt') \n    ,'-'\n            ,activity('lkp_getlocaltime').output.firstRow.localstarttime, '.'\n             ,pipeline().parameters.ConfigSourceFileNameExt)",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete files from Blob",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Copy to Archive",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.SourceLandingContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"blobfilename": {
																"value": "@item().FileName",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "lkp_getlocaltime",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Execute DM_SourcetoBlob_Blob_ActualExcelWorkTabs",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set ActualExcelFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ActualExcelFileNameWithoutExt",
										"value": {
											"value": "@split(item().FileName,'.')[0]",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "GetActualExcelWorkbooksList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_ABLB_srcLanding_Binary_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.SourceLandingContainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.FileFolderName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "lkp_Sort_srcLanding_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetActualExcelWorkbooksList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetActualExcelWorkbooksList').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					},
					"ConfigSourceFileName": {
						"type": "string"
					},
					"ConfigSourceFileNameExt": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"ConfigSourceFileNameWithExt": {
						"type": "string"
					},
					"SourceLandingContainer": {
						"type": "string"
					},
					"FileFolderName": {
						"type": "string"
					}
				},
				"variables": {
					"ActualExcelFileNameWithoutExt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T05:48:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_ABLB_srcLanding_Binary_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_Srclanding_Binary_File')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_Blob_ActualExcelTabs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_Blob_ConfigExcelWorkbooks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetConfigExcelWorkbooksList",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct \nCASE \n         WHEN a.SourceFileName LIKE ''%.%'' THEN SUBSTRING(a.SourceFileName, 1, Charindex(''.'', a.SourceFileName) - 1) \n         ELSE a.SourceFileName\n       END AS ConfigSourceFileName \n,\nCASE \n         WHEN a.SourceFileName LIKE ''%.%'' THEN RIGHT(a.SourceFileName, Len(a.SourceFileName) - \n                                                       Charindex(''.'', a.SourceFileName)) \n         ELSE a.SourceFileName\n       END AS ConfigSourceFileNameExt \n, b.SourceName, a.SourceFileName AS ConfigSourceFileNameWithExt, b.SourceLandingContainer, b.FileFolderName from etl.SourceTableDetails a \nINNER JOIN etl.SourceSystem b ON a.SourceId = b.SourceId \nwhere a.IsActive = 1 and a.SourceId = ', pipeline().parameters.SourceID)",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetConfigExcelWorkbooksList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetConfigExcelWorkbooksList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute DM_SourcetoBlob_Blob_ActualExcelWorkbooks",
									"description": "Execute copy file to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_Blob_ActualExcelWorkbooks",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@pipeline().parameters.SourceID",
												"type": "Expression"
											},
											"ConfigSourceFileName": {
												"value": "@item().ConfigSourceFileName",
												"type": "Expression"
											},
											"ConfigSourceFileNameExt": {
												"value": "@item().ConfigSourceFileNameExt",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"ConfigSourceFileNameWithExt": {
												"value": "@item().ConfigSourceFileNameWithExt",
												"type": "Expression"
											},
											"SourceLandingContainer": {
												"value": "@item().SourceLandingContainer",
												"type": "Expression"
											},
											"FileFolderName": {
												"value": "@item().FileFolderName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T05:48:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_Blob_ActualExcelWorkbooks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_Databricks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Source Tables",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Source Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Source Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Is Data Up to Date",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Refresh Values",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Get Refresh Values').output.firstRow.Uptodate_Ind, 1)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute_SourceToBlob_Notebook",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@item().Command",
														"type": "Expression"
													},
													"baseParameters": {
														"Watermark_Value": {
															"value": "@activity('Get Refresh Values').output.firstRow.Watermark_Value",
															"type": "Expression"
														},
														"Expected_Fields": {
															"value": "@item().ColumnSchemaList",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": {
															"value": "@item().databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@item().databrickssecretname",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "PostProcessingAfterDelta",
												"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Execute_SourceToBlob_Notebook",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
													"storedProcedureParameters": {
														"LastModifiedDTM": {
															"value": {
																"value": "@activity('Get Refresh Values').output.firstRow.Current_Max_Value",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"TableID": {
															"value": {
																"value": "@item().TableID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Get Refresh Values",
									"description": "",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablerefreshvalues]",
											"storedProcedureParameters": {
												"tableID": {
													"type": "Int32",
													"value": {
														"value": "@item().TableID",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "int",
						"defaultValue": 3
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_ActualExcelTabs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetExcelWorkbookTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid_sourcefilename]",
								"storedProcedureParameters": {
									"SourceFileName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ExcelConfigWorkbookName",
											"type": "Expression"
										}
									},
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetExcelWorkbookTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetExcelWorkbookTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Framework_CopyFiletoBlob_Pipeline",
									"description": "Execute copy file to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_GlobalScape_ActualExcelTab",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@split(pipeline().parameters.ExcelActualWorkbookName,'.')[0]",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceFolderLocation": {
												"value": "@item().SourceFolderLocation",
												"type": "Expression"
											},
											"SourceFileName": {
												"value": "@pipeline().parameters.ExcelActualWorkbookName",
												"type": "Expression"
											},
											"SourceLandingContainer": {
												"value": "@item().SourceLandingContainer",
												"type": "Expression"
											},
											"SourceFileFolderName": {
												"value": "@item().FileFolderName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					},
					"ExcelConfigWorkbookName": {
						"type": "string",
						"defaultValue": "Bank_Details_Check*.xlsx"
					},
					"ExcelActualWorkbookName": {
						"type": "string",
						"defaultValue": "Bank_Details_Check_2023_02_08.xlsx"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T05:48:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_GlobalScape_ActualExcelTab')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_ActualExcelWorkbooks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_srcLanding_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_srcLanding_Collection').output.value\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set ActualExcelFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ActualExcelFileNameWithoutExt",
										"value": {
											"value": "@split(item().FileName,'.')[0]",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Excel File",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set ActualExcelFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(startswith(toLower(item().FileName),toLower(\n    replace(pipeline().parameters.ConfigSourceFileName, '*', '')\n    ))\n,endswith(toLower(item().FileName),toLower(pipeline().parameters.ConfigSourceFileNameExt)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy to Archive_Empty",
												"description": "Full Copy from source table into blob storage",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "lkp_getlocaltime_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 0
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.SourceLandingContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"blobfilename": {
																"value": "@item().FileName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.SourceLandingContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.FileFolderName, '/Archived')",
																"type": "Expression"
															},
															"blobfilename": {
																"value": "@concat(variables('ActualExcelFileNameWithoutExt') \n    ,'-'\n            ,activity('lkp_getlocaltime_Empty').output.firstRow.localstarttime, '.'\n             ,pipeline().parameters.ConfigSourceFileNameExt)",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete files from Blob_Empty",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Copy to Archive_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_FS_Srclanding_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.SourceLandingContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"blobfilename": {
																"value": "@item().FileName",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "lkp_getlocaltime_Empty",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Execute DM_SourcetoBlob_Globalscape_ActualExcelWorkTabs",
												"description": "Execute copy file to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_ActualExcelTabs",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"SourceID": {
															"value": "@pipeline().parameters.SourceID",
															"type": "Expression"
														},
														"ExcelConfigWorkbookName": {
															"value": "@pipeline().parameters.ConfigSourceFileNameWithExt",
															"type": "Expression"
														},
														"ExcelActualWorkbookName": {
															"value": "@item().FileName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Copy to Archive",
												"description": "Full Copy from source table into blob storage",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "lkp_getlocaltime",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 0
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_FS_GlobalScape_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"GSfolderpath": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"GSfilename": {
																"value": "@item().FileName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_FS_GlobalScape_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"GSfolderpath": {
																"value": "@concat(pipeline().parameters.FileFolderName, '/Archived')",
																"type": "Expression"
															},
															"GSfilename": {
																"value": "@concat(variables('ActualExcelFileNameWithoutExt') \n    ,'-'\n            ,activity('lkp_getlocaltime').output.firstRow.localstarttime, '.'\n             ,pipeline().parameters.ConfigSourceFileNameExt)",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete files from Blob",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Copy to Archive",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_FS_GlobalScape_Binary_File",
														"type": "DatasetReference",
														"parameters": {
															"GSfolderpath": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"GSfilename": {
																"value": "@item().FileName",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": false,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "lkp_getlocaltime",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Execute DM_SourcetoBlob_Globalscape_ActualExcelWorkTabs",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "GetActualExcelWorkbooksList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_GlobalScape_BinaryFile_source",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@pipeline().parameters.FileFolderName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "lkp_Sort_srcLanding_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetActualExcelWorkbooksList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetActualExcelWorkbooksList').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					},
					"ConfigSourceFileName": {
						"type": "string"
					},
					"ConfigSourceFileNameExt": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"ConfigSourceFileNameWithExt": {
						"type": "string"
					},
					"SourceLandingContainer": {
						"type": "string"
					},
					"FileFolderName": {
						"type": "string"
					}
				},
				"variables": {
					"ActualExcelFileNameWithoutExt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T05:48:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_BinaryFile_source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_Srclanding_Binary_File')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_ActualExcelTabs')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_GlobalScape_Binary_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_CSVFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									},
									"TriggerName": {
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Incremental Load",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().IncrementalLoadInd,'1')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Full_Framework_CopyCSVFiletoBlob_Pipeline",
												"description": "Execute copy file to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Full_GetTableInfo",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_Framework_DM_SourcetoBlob_GlobalScape_CSVFile",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Data_Source_Table_Name": {
															"value": "@item().Data_Source_Table_Name",
															"type": "Expression"
														},
														"Data_Source_WaterMarkColumn": {
															"value": "@item().Data_Source_WaterMarkColumn",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path": {
															"value": "@item().Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"Control_Table_Table_Name": {
															"value": "@item().Control_Table_Table_Name",
															"type": "Expression"
														},
														"Control_Table_Column_Name": {
															"value": "@item().Control_Table_Column_Name",
															"type": "Expression"
														},
														"TableID": {
															"value": "@item().TableID",
															"type": "Expression"
														},
														"Data_Destination_File_Name": {
															"value": "@item().Data_Destination_File_Name",
															"type": "Expression"
														},
														"SourceServerName": {
															"value": "@item().SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@item().SourceDatabaseName",
															"type": "Expression"
														},
														"IncrementalLoadInd": {
															"value": "@item().IncrementalLoadInd",
															"type": "Expression"
														},
														"File_Name_Ext": {
															"value": "@item().File_Name_Ext",
															"type": "Expression"
														},
														"File_Name_DateTime_Ind": {
															"value": "@item().File_Name_DateTime_Ind",
															"type": "Expression"
														},
														"Join_Condition": {
															"value": "@item().Join_Condition",
															"type": "Expression"
														},
														"Source_Column_List": {
															"value": "@item().Source_Column_List",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@item().ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@item().QuoteCharacter",
															"type": "Expression"
														},
														"source_where_filter": {
															"value": "@item().Source_Where_Filter",
															"type": "Expression"
														},
														"UserName": {
															"value": "@item().UserName",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@item().SecretPasswordName",
															"type": "Expression"
														},
														"SourceFolderLocation": {
															"value": "@activity('Full_GetTableInfo').output.firstRow.SourceFolderLocation",
															"type": "Expression"
														},
														"SourceFileName": {
															"value": "@activity('Full_GetTableInfo').output.firstRow.SourceFileName",
															"type": "Expression"
														},
														"SourceLandingContainer": {
															"value": "@item().SourceLandingContainer",
															"type": "Expression"
														},
														"SourceName": {
															"value": "@item().SourceName",
															"type": "Expression"
														},
														"DatabricksClusterId": {
															"value": "@item().databricksclusterid",
															"type": "Expression"
														},
														"DatabricksSecretName": {
															"value": "@item().databrickssecretname",
															"type": "Expression"
														},
														"SourceTableName": {
															"value": "@item().SourceFileName",
															"type": "Expression"
														},
														"IsInitialLoad": {
															"value": "@item().IsInitialLoad",
															"type": "Expression"
														},
														"FileFolderName": {
															"value": "@item().FileFolderName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Full_GetTableInfo",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid_and_tableid]",
														"storedProcedureParameters": {
															"sourceid": {
																"type": "Int32",
																"value": {
																	"value": "@pipeline().parameters.SourceID",
																	"type": "Expression"
																}
															},
															"tableid": {
																"type": "Int32",
																"value": {
																	"value": "@item().TableID",
																	"type": "Expression"
																}
															},
															"TriggerName": {
																"type": "String",
																"value": {
																	"value": "@pipeline().parameters.TriggerName",
																	"type": "Expression"
																}
															}
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Inc_Framework_CopyCSVFiletoBlob_Pipeline",
												"description": "Execute copy file to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Inc_GetTableInfo",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_Framework_DM_SourcetoBlob_GlobalScape_CSVFile",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Data_Source_Table_Name": {
															"value": "@item().Data_Source_Table_Name",
															"type": "Expression"
														},
														"Data_Source_WaterMarkColumn": {
															"value": "@item().Data_Source_WaterMarkColumn",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path": {
															"value": "@item().Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"Control_Table_Table_Name": {
															"value": "@item().Control_Table_Table_Name",
															"type": "Expression"
														},
														"Control_Table_Column_Name": {
															"value": "@item().Control_Table_Column_Name",
															"type": "Expression"
														},
														"TableID": {
															"value": "@item().TableID",
															"type": "Expression"
														},
														"Data_Destination_File_Name": {
															"value": "@item().Data_Destination_File_Name",
															"type": "Expression"
														},
														"SourceServerName": {
															"value": "@item().SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@item().SourceDatabaseName",
															"type": "Expression"
														},
														"IncrementalLoadInd": {
															"value": "@item().IncrementalLoadInd",
															"type": "Expression"
														},
														"File_Name_Ext": {
															"value": "@item().File_Name_Ext",
															"type": "Expression"
														},
														"File_Name_DateTime_Ind": {
															"value": "@item().File_Name_DateTime_Ind",
															"type": "Expression"
														},
														"Join_Condition": {
															"value": "@item().Join_Condition",
															"type": "Expression"
														},
														"Source_Column_List": {
															"value": "@item().Source_Column_List",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@item().ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@item().QuoteCharacter",
															"type": "Expression"
														},
														"source_where_filter": {
															"value": "@item().Source_Where_Filter",
															"type": "Expression"
														},
														"UserName": {
															"value": "@item().UserName",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@item().SecretPasswordName",
															"type": "Expression"
														},
														"SourceFolderLocation": {
															"value": "@activity('Inc_GetTableInfo').output.firstRow.SourceFolderLocation",
															"type": "Expression"
														},
														"SourceFileName": {
															"value": "@activity('Inc_GetTableInfo').output.firstRow.SourceFileName",
															"type": "Expression"
														},
														"SourceLandingContainer": {
															"value": "@item().SourceLandingContainer",
															"type": "Expression"
														},
														"SourceName": {
															"value": "@item().SourceName",
															"type": "Expression"
														},
														"DatabricksClusterId": {
															"value": "@item().databricksclusterid",
															"type": "Expression"
														},
														"DatabricksSecretName": {
															"value": "@item().databrickssecretname",
															"type": "Expression"
														},
														"SourceTableName": {
															"value": "@item().SourceFileName",
															"type": "Expression"
														},
														"IsInitialLoad": {
															"value": "@item().IsInitialLoad",
															"type": "Expression"
														},
														"FileFolderName": {
															"value": "@item().FileFolderName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Inc_GetTableInfo",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid_and_tableid]",
														"storedProcedureParameters": {
															"sourceid": {
																"type": "Int32",
																"value": {
																	"value": "@pipeline().parameters.SourceID",
																	"type": "Expression"
																}
															},
															"tableid": {
																"type": "Int32",
																"value": {
																	"value": "@item().TableID",
																	"type": "Expression"
																}
															},
															"TriggerName": {
																"type": "String",
																"value": {
																	"value": "@pipeline().parameters.TriggerName",
																	"type": "Expression"
																}
															}
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_GlobalScape_CSVFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_ConfigExcelWorkbooks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetConfigExcelWorkbooksList",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select distinct \nCASE \n         WHEN a.SourceFileName LIKE ''%.%'' THEN SUBSTRING(a.SourceFileName, 1, Charindex(''.'', a.SourceFileName) - 1) \n         ELSE a.SourceFileName\n       END AS ConfigSourceFileName \n,\nCASE \n         WHEN a.SourceFileName LIKE ''%.%'' THEN RIGHT(a.SourceFileName, Len(a.SourceFileName) - \n                                                       Charindex(''.'', a.SourceFileName)) \n         ELSE a.SourceFileName\n       END AS ConfigSourceFileNameExt \n, b.SourceName, a.SourceFileName AS ConfigSourceFileNameWithExt, b.SourceLandingContainer, b.FileFolderName from etl.SourceTableDetails a \nINNER JOIN etl.SourceSystem b ON a.SourceId = b.SourceId \nwhere a.IsActive = 1 and a.SourceId = ', pipeline().parameters.SourceID)",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetConfigExcelWorkbooksList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetConfigExcelWorkbooksList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute DM_SourcetoBlob_Global_ActualExcelWorkbooks",
									"description": "Execute copy file to globalscape pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_ActualExcelWorkbooks",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@pipeline().parameters.SourceID",
												"type": "Expression"
											},
											"ConfigSourceFileName": {
												"value": "@item().ConfigSourceFileName",
												"type": "Expression"
											},
											"ConfigSourceFileNameExt": {
												"value": "@item().ConfigSourceFileNameExt",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"ConfigSourceFileNameWithExt": {
												"value": "@item().ConfigSourceFileNameWithExt",
												"type": "Expression"
											},
											"SourceLandingContainer": {
												"value": "@item().SourceLandingContainer",
												"type": "Expression"
											},
											"FileFolderName": {
												"value": "@item().FileFolderName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T05:48:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_ActualExcelWorkbooks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_MySQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_MySQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"DeltaTargetTableName": {
												"value": "@item().DeltaTargetTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_MySQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									},
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Generate Source To Blob Delete Files Required",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Source To Blob Files Required",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@if(and(equals(pipeline().parameters.ProcessType, 'SourceToBlobDelete'), equals(item().IncrementalLoadInd, '1')), true, false)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Framework_CopyDBtoBlobDelete_Pipeline",
												"description": "Execute copy db to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_Framework_DM_SourcetoBlob_Oracle_Delete",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Data_Source_Table_Name": {
															"value": "@item().Data_Source_Table_Name",
															"type": "Expression"
														},
														"Data_Source_WaterMarkColumn": {
															"value": "@item().Data_Source_WaterMarkColumn",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path": {
															"value": "@item().Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"TableID": {
															"value": "@item().TableID",
															"type": "Expression"
														},
														"Data_Destination_File_Name": {
															"value": "@item().Data_Destination_File_Name",
															"type": "Expression"
														},
														"SourceServerName": {
															"value": "@item().SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@item().SourceDatabaseName",
															"type": "Expression"
														},
														"File_Name_Ext": {
															"value": "@item().File_Name_Ext",
															"type": "Expression"
														},
														"Join_Condition": {
															"value": "@item().Join_Condition",
															"type": "Expression"
														},
														"Source_Column_List": {
															"value": "@replace(replace(item().Source_Column_List,'[',''),']','')",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@item().ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@item().QuoteCharacter",
															"type": "Expression"
														},
														"source_where_filter": {
															"value": "@item().Source_Where_Filter",
															"type": "Expression"
														},
														"UserName": {
															"value": "@item().UserName",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@item().SecretPasswordName",
															"type": "Expression"
														},
														"BlobContainer": {
															"value": "@item().TargetBlobContainer",
															"type": "Expression"
														},
														"BusinessKeyList": {
															"value": "@item().BusinessKeyColumnListWithAlias",
															"type": "Expression"
														},
														"DeltaTargetDbName": {
															"value": "@item().DeltaTargetDbName",
															"type": "Expression"
														},
														"StorageAccount": {
															"value": "@item().StorageAccount",
															"type": "Expression"
														},
														"RowSource": {
															"value": "@item().SourceName",
															"type": "Expression"
														},
														"DbHostName": {
															"value": "@item().DestinationHostName",
															"type": "Expression"
														},
														"AzureTargetTableName": {
															"value": "@item().AzuresqlTargetTableName",
															"type": "Expression"
														},
														"DeltaStagingTableParquetFilePath": {
															"value": "@item().DeltaStagingTableParquetFilePath",
															"type": "Expression"
														},
														"DeleteProcessCompletionDTM": {
															"value": "@item().DeleteProcessCompletionDTM",
															"type": "Expression"
														},
														"DeltaStagingDbName": {
															"value": "@item().DeltaStagingDbName",
															"type": "Expression"
														},
														"DeltaStageTableName": {
															"value": "@item().DeltaStagingTableName",
															"type": "Expression"
														},
														"AzureSqlTempDeleteTableName": {
															"value": "@item().AzuresqlTempDeleteTableName",
															"type": "Expression"
														},
														"Host_Name": {
															"value": "@item().Host_Name",
															"type": "Expression"
														},
														"Port_No": {
															"value": "@item().Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@item().SID",
															"type": "Expression"
														},
														"databricksclustername": {
															"value": "@item().databricksclustername",
															"type": "Expression"
														},
														"databricksclusterid": {
															"value": "@item().databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@item().databrickssecretname",
															"type": "Expression"
														},
														"CheckForDeletes": {
															"value": "@item().CheckForDeletes",
															"type": "Expression"
														},
														"File_Name_DateTime_Ind": {
															"value": "@item().File_Name_DateTime_Ind",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path_DeleteProcess": {
															"value": "@item().Data_Destination_Folder_Path_DeleteProcess",
															"type": "Expression"
														},
														"SourceId": {
															"value": "@pipeline().parameters.SourceID",
															"type": "Expression"
														},
														"IsInitialLoad": {
															"value": "@item().IsInitialLoad",
															"type": "Expression"
														},
														"MaxInitialLoadDataIntegrationUnit": {
															"value": "@item().MaxInitialLoadDataIntegrationUnit",
															"type": "Expression"
														},
														"MaxInitialLoadDegreeOfCopyParallelism": {
															"value": "@item().MaxInitialLoadDegreeOfCopyParallelism",
															"type": "Expression"
														},
														"MaxDailyLoadDataIntegrationUnit": {
															"value": "@item().MaxDailyLoadDataIntegrationUnit",
															"type": "Expression"
														},
														"MaxDailyLoadDegreeOfCopyParallelism": {
															"value": "@item().MaxDailyLoadDegreeOfCopyParallelism",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Generate Source To Blob Files Required",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@if(equals(pipeline().parameters.ProcessType, 'SourceToBlob'), true, false)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Framework_CopyDBtoBlob_Pipeline",
												"description": "Execute copy db to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_Framework_DM_SourceToBlob_Oracle",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Data_Source_Table_Name": {
															"value": "@item().Data_Source_Table_Name",
															"type": "Expression"
														},
														"Data_Source_WaterMarkColumn": {
															"value": "@item().Data_Source_WaterMarkColumn",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path": {
															"value": "@item().Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"Control_Table_Table_Name": {
															"value": "@item().Control_Table_Table_Name",
															"type": "Expression"
														},
														"Control_Table_Column_Name": {
															"value": "@item().Control_Table_Column_Name",
															"type": "Expression"
														},
														"TableID": {
															"value": "@item().TableID",
															"type": "Expression"
														},
														"Data_Destination_File_Name": {
															"value": "@item().Data_Destination_File_Name",
															"type": "Expression"
														},
														"SourceServerName": {
															"value": "@item().SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@item().SourceDatabaseName",
															"type": "Expression"
														},
														"IncrementalLoadInd": {
															"value": "@item().IncrementalLoadInd",
															"type": "Expression"
														},
														"File_Name_Ext": {
															"value": "@item().File_Name_Ext",
															"type": "Expression"
														},
														"File_Name_DateTime_Ind": {
															"value": "@item().File_Name_DateTime_Ind",
															"type": "Expression"
														},
														"Join_Condition": {
															"value": "@item().Join_Condition",
															"type": "Expression"
														},
														"Source_Column_List": {
															"value": "@replace(replace(item().Source_Column_List,'[',''),']','')",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@item().ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@item().QuoteCharacter",
															"type": "Expression"
														},
														"source_where_filter": {
															"value": "@item().Source_Where_Filter",
															"type": "Expression"
														},
														"Host_Name": {
															"value": "@item().Host_Name",
															"type": "Expression"
														},
														"Port_No": {
															"value": "@item().Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@item().SID",
															"type": "Expression"
														},
														"User_Name": {
															"value": "@item().UserName",
															"type": "Expression"
														},
														"Secret_Password_Name": {
															"value": "@item().SecretPasswordName",
															"type": "Expression"
														},
														"IsInitialLoad": {
															"value": "@item().IsInitialLoad",
															"type": "Expression"
														},
														"MaxInitialLoadDataIntegrationUnit": {
															"value": "@item().MaxInitialLoadDataIntegrationUnit",
															"type": "Expression"
														},
														"MaxInitialLoadDegreeOfCopyParallelism": {
															"value": "@item().MaxInitialLoadDegreeOfCopyParallelism",
															"type": "Expression"
														},
														"MaxDailyLoadDataIntegrationUnit": {
															"value": "@item().MaxDailyLoadDataIntegrationUnit",
															"type": "Expression"
														},
														"MaxDailyLoadDegreeOfCopyParallelism": {
															"value": "@item().MaxDailyLoadDegreeOfCopyParallelism",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					},
					"TriggerName": {
						"type": "string"
					},
					"ProcessType": {
						"type": "string",
						"defaultValue": "SourceToBlob"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-09T23:26:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_Oracle_Delete')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourceToBlob_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_SalesForce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_Salesforce",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"DeltaTargetTableName": {
												"value": "@item().DeltaTargetTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_Salesforce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									},
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Generate Source To Blob Files Required",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@if(equals(pipeline().parameters.ProcessType, 'SourceToBlob'), true, false)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Framework_CopyDBtoBlob_Pipeline",
												"description": "Execute copy db to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_Framework_DM_SourcetoBlob_SqlServer",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Data_Source_Table_Name": {
															"value": "@item().Data_Source_Table_Name",
															"type": "Expression"
														},
														"Data_Source_WaterMarkColumn": {
															"value": "@item().Data_Source_WaterMarkColumn",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path": {
															"value": "@item().Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"Control_Table_Table_Name": {
															"value": "@item().Control_Table_Table_Name",
															"type": "Expression"
														},
														"Control_Table_Column_Name": {
															"value": "@item().Control_Table_Column_Name",
															"type": "Expression"
														},
														"TableID": {
															"value": "@item().TableID",
															"type": "Expression"
														},
														"Data_Destination_File_Name": {
															"value": "@item().Data_Destination_File_Name",
															"type": "Expression"
														},
														"SourceServerName": {
															"value": "@item().SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@item().SourceDatabaseName",
															"type": "Expression"
														},
														"IncrementalLoadInd": {
															"value": "@item().IncrementalLoadInd",
															"type": "Expression"
														},
														"File_Name_Ext": {
															"value": "@item().File_Name_Ext",
															"type": "Expression"
														},
														"File_Name_DateTime_Ind": {
															"value": "@item().File_Name_DateTime_Ind",
															"type": "Expression"
														},
														"Join_Condition": {
															"value": "@item().Join_Condition",
															"type": "Expression"
														},
														"Source_Column_List": {
															"value": "@item().Source_Column_List",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@item().ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@item().QuoteCharacter",
															"type": "Expression"
														},
														"source_where_filter": {
															"value": "@item().Source_Where_Filter",
															"type": "Expression"
														},
														"UserName": {
															"value": "@item().UserName",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@item().SecretPasswordName",
															"type": "Expression"
														},
														"SourceName": {
															"value": "@item().SourceName",
															"type": "Expression"
														},
														"DeltaTargetTableName": {
															"value": "@item().DeltaTargetTableName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Generate Source To Blob Delete Files Required",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Generate Source To Blob Files Required",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@if(and(equals(pipeline().parameters.ProcessType, 'SourceToBlobDelete'), equals(item().IncrementalLoadInd, '1')), true, false)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					},
					"TriggerName": {
						"type": "string"
					},
					"ProcessType": {
						"type": "string",
						"defaultValue": "SourceToBlob"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2020-01-29T04:03:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_globalscape')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select S.FileFolderName,T.SourceFileName,TargetBlobFilePath,\n File_Name_DateTime_Ind,TargetBlobFileName,TargetBlobFileNameExt\n,ColumnDelimiter,QuoteCharacter , skipcsvrows\nfrom [ETL].[SourceSystem] S INNER JOIN [ETL].[SourceTableDetails] T\nON S.sourceID = T.sourceID  \n where  S.sourceID=@{pipeline().parameters.sourceID} and  isactive=1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy_files_toBlob",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_getfilemetadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFiles_to_Blob",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DS_Files_NFUJPRD202_GDrive",
											"type": "DatasetReference",
											"parameters": {
												"TargetFilePath": {
													"value": "@item().FileFolderName",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@item().SourceFileName",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@item().ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@item().QuoteCharacter",
													"type": "Expression"
												},
												"EscapeCharacter": "º",
												"FirstRowHeader": 0
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@item().TargetBlobFilePath",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(item().File_Name_DateTime_Ind,1),\nconcat(item().TargetBlobFileName,'-',\nactivity('lkp_getlocalstarttime2').output.firstrow.localstarttime2,item().TargetBlobFileNameExt),\nconcat(item().TargetBlobFileName,item().TargetBlobFileNameExt))",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@item().ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@item().QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Archive_Data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "CopyFiles_to_Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "FileServerWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_Files_NFUJPRD202_GDrive",
											"type": "DatasetReference",
											"parameters": {
												"TargetFilePath": "@item().FileFolderName",
												"TargetFileName": "@item().SourceFileName",
												"ColumnDelimiter": "@item().ColumnDelimiter",
												"QuoteCharacter": "@item().QuoteCharacter",
												"EscapeCharacter": "º",
												"FirstRowHeader": 0
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Files_NFUJPRD202_GDrive",
											"type": "DatasetReference",
											"parameters": {
												"TargetFilePath": {
													"value": "@concat(item().FileFolderName,'/Archived')",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(item().File_Name_DateTime_Ind,1),\nconcat(item().TargetBlobFileName,'-',\nactivity('lkp_getlocalstarttime2').output.firstrow.localstarttime2,item().TargetBlobFileNameExt),\nconcat(item().TargetBlobFileName,item().TargetBlobFileNameExt))",
													"type": "Expression"
												},
												"ColumnDelimiter": "@item().ColumnDelimiter",
												"QuoteCharacter": "@item().QuoteCharacter",
												"EscapeCharacter": "º",
												"FirstRowHeader": 0
											}
										}
									]
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceID": {
						"type": "string",
						"defaultValue": "117"
					}
				},
				"folder": {
					"name": "UrbanHQ"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-30T01:33:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_Files_NFUJPRD202_GDrive')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourcetoBlob_HTTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For HTTP request",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetActiveLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetActiveLoadTableList').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 2,
							"activities": [
								{
									"name": "source system",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().SourceName",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "BOM Rainfall",
												"activities": [
													{
														"name": "Execute HTTPZip",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_BOM_HTTPZIPtoBlob",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"relative_url": {
																	"value": "@item().APIRelativeURL\r\n",
																	"type": "Expression"
																},
																"fileNameExt": {
																	"value": "@item().File_Name_Ext",
																	"type": "Expression"
																},
																"blobcontainer": {
																	"value": "@item().TargetBlobContainer",
																	"type": "Expression"
																},
																"blobfolder": {
																	"value": "@item().TargetBlobFolderPath",
																	"type": "Expression"
																},
																"blobfile": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"src_blobstorageaccount": {
																	"value": "@item().SourceStorageAccount",
																	"type": "Expression"
																},
																"webrequest_url": {
																	"value": "@item().APIBaseURL\r\n",
																	"type": "Expression"
																},
																"station": {
																	"value": "@replace(item().Data_Destination_File_Name,'idcjac0009_','')",
																	"type": "Expression"
																},
																"blobstorageaccount": {
																	"value": "@item().StorageAccount",
																	"type": "Expression"
																},
																"src_blobcontainer": {
																	"value": "@item().SourceLandingContainer",
																	"type": "Expression"
																},
																"delimiter": {
																	"value": "@item().ColumnDelimiter",
																	"type": "Expression"
																},
																"TableID": {
																	"value": "@item().TableID",
																	"type": "Expression"
																},
																"File_Name_DateTime_Ind": {
																	"value": "@item().File_Name_DateTime_Ind",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "Ixom",
												"activities": [
													{
														"name": "Ixom",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "PL_Framework_DM_SourcetoBlob_HTTPKeyVault",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"relative_url": {
																	"value": "@item().APIRelativeURL\r\n",
																	"type": "Expression"
																},
																"fileNameExt": {
																	"value": "@item().File_Name_Ext",
																	"type": "Expression"
																},
																"blobcontainer": {
																	"value": "@item().TargetBlobContainer",
																	"type": "Expression"
																},
																"blobfolder": {
																	"value": "@item().TargetBlobFolderPath",
																	"type": "Expression"
																},
																"blobfile": {
																	"value": "@item().SourceTableName",
																	"type": "Expression"
																},
																"src_blobstorageaccount": {
																	"value": "@item().SourceStorageAccount",
																	"type": "Expression"
																},
																"webrequest_url": {
																	"value": "@item().APIBaseURL\r\n",
																	"type": "Expression"
																},
																"station": {
																	"value": "@replace(item().Data_Destination_File_Name,'idcjac0009_','')",
																	"type": "Expression"
																},
																"blobstorageaccount": {
																	"value": "@item().StorageAccount",
																	"type": "Expression"
																},
																"src_blobcontainer": {
																	"value": "@item().SourceLandingContainer",
																	"type": "Expression"
																},
																"ColumnDelimiter": {
																	"value": "@item().ColumnDelimiter",
																	"type": "Expression"
																},
																"TableID": {
																	"value": "@item().TableID",
																	"type": "Expression"
																},
																"File_Name_DateTime_Ind": {
																	"value": "@item().File_Name_DateTime_Ind",
																	"type": "Expression"
																},
																"Host_Name": {
																	"value": "@item().Host_Name",
																	"type": "Expression"
																},
																"SID": {
																	"value": "@item().SID",
																	"type": "Expression"
																},
																"UserName": {
																	"value": "@item().UserName",
																	"type": "Expression"
																},
																"SecretPasswordName": {
																	"value": "@item().SecretPasswordName",
																	"type": "Expression"
																},
																"QuoteCharacter": {
																	"value": "@item().QuoteCharacter",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "GetActiveLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									},
									"TriggerName": {
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"Fileserverlocation": {
						"type": "String"
					},
					"FileFolderPath": {
						"type": "String"
					},
					"STATION_POINT_NAME": {
						"type": "String"
					},
					"TableID": {
						"type": "String"
					},
					"fromDate": {
						"type": "String"
					},
					"ToDate": {
						"type": "String"
					},
					"year": {
						"type": "String"
					},
					"current_year": {
						"type": "String"
					},
					"Url_variable": {
						"type": "String"
					},
					"url_array": {
						"type": "Array"
					},
					"url_param": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-26T00:04:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_HTTPZIPtoBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_HTTPKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_Migration_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getlistofblobfile",
						"description": "Lookup activity to retrieve the list blob csv file need to be processed from the metadata table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "foreachblobfile",
						"description": "looping through the list of blob file.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getlistofblobfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getlistofblobfile').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "execute_databricks_merge_pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_Migration_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"blobcontainer": {
												"value": "@item().TargetBlobContainer",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@item().StorageAccount",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@item().ColumnSchemaList",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@item().BusinessKeyColumnList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@item().DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@item().DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@item().DeltaStagingTableName",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@item().AzuresqldbMaxLastModifieddtm",
												"type": "Expression"
											},
											"tableid": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@item().azuresqltemptablename",
												"type": "Expression"
											},
											"blobfolderpath": {
												"value": "@item().TargetBlobFolderPath",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@item().deltastagingtableparquetfilepath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@item().DestinationHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"azuresqltargettablename": {
												"value": "@item().AzuresqlTargetTableName",
												"type": "Expression"
											},
											"skipcsvrows": {
												"value": "@item().skipcsvrows",
												"type": "Expression"
											},
											"ETLMergeNotebookPath": {
												"value": "@item().ETLMergeNotebookPath",
												"type": "Expression"
											},
											"StoredProcNameMergeAzuresqltable": {
												"value": "@item().StoredProcNameMergeAzuresqltable",
												"type": "Expression"
											},
											"databricksclustername": {
												"value": "@item().databricksclustername",
												"type": "Expression"
											},
											"databricksclusterid": {
												"value": "@item().databricksclusterid",
												"type": "Expression"
											},
											"CDCMigrationCompleted": {
												"value": "@item().CDCMigrationCompleted",
												"type": "Expression"
											},
											"CDCBlobPath": {
												"value": "@item().CDCBlobPath",
												"type": "Expression"
											},
											"SourceTableName": {
												"value": "@item().SourceTableName",
												"type": "Expression"
											},
											"CDCMigrationInd": {
												"value": "@item().CDCMigrationInd",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@item().databrickssecretname",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_Migration_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_Migration_SourceToBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_Migration_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"DeltaTargetTableName": {
												"value": "@item().DeltaTargetTableName",
												"type": "Expression"
											},
											"CDCMigrationCompleted": {
												"value": "@item().CDCMigrationCompleted",
												"type": "Expression"
											},
											"CDCMigrationInd": {
												"value": "@item().CDCMigrationInd",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_Migration_SourceToBlob_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_SourceToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SourceToBlob_CommandType",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "fetchSwitchCommandType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('fetchSwitchCommandType').output.firstRow.ADFAction",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "DATABRICKS_NOTEBOOK",
									"activities": [
										{
											"name": "Execute DM_SourcetoBlob_Databricks",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_Databricks",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SourceID": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "DB_SQL",
									"activities": [
										{
											"name": "Execute DM_SourcetoBlob_SQLDatabase",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SourceID": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													},
													"TriggerName": {
														"value": "@pipeline().parameters.TriggerName",
														"type": "Expression"
													},
													"ProcessType": {
														"value": "@pipeline().parameters.ProcessType",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "BLOB_EXCEL_FILE",
									"activities": [
										{
											"name": "Exec DM_SourcetoBlob_Blob_ConfigExcelWorkbooks",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_Blob_ConfigExcelWorkbooks",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SourceID": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "GLOBALSCAPE_CSV_FILE",
									"activities": [
										{
											"name": "Execute DM_SourcetoBlob_GlobalScape_CSVFile",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_CSVFile",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SourceID": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													},
													"TriggerName": {
														"value": "@pipeline().parameters.TriggerName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "API",
									"activities": [
										{
											"name": "Execute DM_SourcetoBlob_API",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_API",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SourceID": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "GLOBALSCAPE_EXCEL_FILE",
									"activities": [
										{
											"name": "Exec DM_SourcetoBlob_GlobalScape_ConfigExcelWorkbooks",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_ConfigExcelWorkbooks",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SourceID": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "DB_ORACLE",
									"activities": [
										{
											"name": "Execute DM_SourcetoBlob_OracleDatabase",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_Oracle",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SourceID": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													},
													"TriggerName": {
														"value": "@pipeline().parameters.TriggerName",
														"type": "Expression"
													},
													"ProcessType": {
														"value": "@pipeline().parameters.ProcessType",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "HTTP_CSV_FILE",
									"activities": [
										{
											"name": "Execute file copy",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EDWDiscovery_DM_SourcetoBlob_HTTP",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SourceID": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													},
													"TriggerName": {
														"value": "@pipeline().parameters.TriggerName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "BLOB_JSON_FILE",
									"activities": [
										{
											"name": "Execute SourceToBlob_BlobJSONtoCSVFile",
											"description": "Executes the PL_EDWDiscovery_DM_SourceToBlob_BlobJSONtoCSVFile pipeline",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_BlobJSONtoCSVFile",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SourceId": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													},
													"Additional_MappingParam": {
														"value": "@pipeline().parameters.Additional_MappingParam",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "fetchSwitchCommandType",
						"description": "Based on SourceType and LoadType SQL procedure will fetch switch command type",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "EXEC etl.usp_get_switch_command_type '@{pipeline().parameters.SourceID}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "int"
					},
					"LoadTypeName": {
						"type": "string"
					},
					"Additional_MappingParam": {
						"type": "string"
					},
					"TriggerName": {
						"type": "string"
					},
					"ProcessType": {
						"type": "string",
						"defaultValue": "SourceToBlob"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T05:48:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_Databricks')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_Blob_ConfigExcelWorkbooks')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_CSVFile')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_API')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_GlobalScape_ConfigExcelWorkbooks')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_Oracle')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourcetoBlob_HTTP')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_BlobJSONtoCSVFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_SourceToDiscovery_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Source ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT\n  srcSys.SourceID\n, ldTyp.LoadTypeName AS SourceToBlobLoadTypeName\nFROM ETL.SourceSystem srcSys\nLEFT JOIN ETL.LoadType ldTyp ON ldTyp.LoadTypeId = srcSys.LoadTypeId\nWHERE srcSys.SourceName = '@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Is Source to Blob Load Required",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Source ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_SourceToBlob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get Source ID').output.firstRow['SourceID']",
												"type": "Expression"
											},
											"LoadTypeName": {
												"value": "@activity('Get Source ID').output.firstRow['SourceToBlobLoadTypeName']",
												"type": "Expression"
											},
											"Additional_MappingParam": {
												"value": "@pipeline().parameters.Additional_MappingParam",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											},
											"ProcessType": {
												"value": "SourceToBlob",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute PL_Framework_TRFM_TransformSourceDate",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_TRFM_TransformSourceDate",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceName": {
												"value": "@pipeline().parameters.SourceName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CaptureError2a",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('Activity2a: ', activity('ExecutePL_EDWOnPrem_DM_SourcetoBlob').Error['message'])}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CaptureError2b",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Execute PL_Framework_TRFM_TransformSourceDate",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('Activity2b: ', activity('Execute PL_Framework_TRFM_TransformSourceDate').Error['message'])}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is Blob to ASQL Required - No Failure",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is Source To Blob Delete Required - No Failure",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL - No Failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get Source ID').output.firstRow['SourceID']",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@if(equals(pipeline().parameters.TriggerName, ''), pipeline().TriggerName, pipeline().parameters.TriggerName)",
												"type": "Expression"
											},
											"ProcessType": {
												"value": "BlobToASQL",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CaptureError4a_Success",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "ExecutePL_TRFM_BLOBToASQL - No Failure",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('Activity4a_Success: ', activity('ExecutePL_TRFM_BLOBToASQL - No Failure').Error['message'])}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is Blob to ASQL Required - Has Failure",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is Source To Blob Delete Required - Has Failure",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(pipeline().parameters.OnlyBlobtoASQL, pipeline().parameters.AllowPartialUpdateOfDiscovery)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL - Has Failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get Source ID').output.firstRow['SourceID']",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											},
											"ProcessType": {
												"value": "BlobToASQL",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CaptureError4a_failure",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "ExecutePL_TRFM_BLOBToASQL - Has Failure",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('Activity4a_failure: ', activity('ExecutePL_TRFM_BLOBToASQL - Has Failure').Error['message'])}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is Source To Blob Delete Required - No Failure",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is Source to Blob Load Required",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyExtractDeletedRecordsFromSourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Extract Deleted Records from SourceToBlob - No Failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_SourceToBlob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get Source ID').output.firstRow['SourceID']",
												"type": "Expression"
											},
											"LoadTypeName": {
												"value": "@activity('Get Source ID').output.firstRow['SourceToBlobLoadTypeName']",
												"type": "Expression"
											},
											"Additional_MappingParam": {
												"value": "@pipeline().parameters.Additional_MappingParam",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											},
											"ProcessType": {
												"value": "SourceToBlobDelete",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CaptureError3a_Success",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Extract Deleted Records from SourceToBlob - No Failure",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('Activity3a_Success: ', activity('Extract Deleted Records from SourceToBlob - No Failure').Error['message'])}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is Source To Blob Delete Required - Has Failure",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is Source to Blob Load Required",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(pipeline().parameters.OnlyExtractDeletedRecordsFromSourceToBlob, pipeline().parameters.AllowPartialUpdateOfDiscovery)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Extract Deleted Records from SourceToBlob - Has Failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_SourceToBlob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get Source ID').output.firstRow['SourceID']",
												"type": "Expression"
											},
											"LoadTypeName": {
												"value": "@activity('Get Source ID').output.firstRow['SourceToBlobLoadTypeName']",
												"type": "Expression"
											},
											"Additional_MappingParam": {
												"value": "@pipeline().parameters.Additional_MappingParam",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											},
											"ProcessType": {
												"value": "SourceToBlobDelete",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CaptureError3a_failure",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Extract Deleted Records from SourceToBlob - Has Failure",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('Activity3_failure: ', activity('Extract Deleted Records from SourceToBlob - Has Failure').Error['message'])}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is Blob To ASQL Delete Required - No Failure",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is Blob to ASQL Required - No Failure",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyDeleteRecordsFromBlobToASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Records from Delta and ASQL - No Failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get Source ID').output.firstRow['SourceID']",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											},
											"ProcessType": {
												"value": "BlobToASQLDelete",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CaptureError5a_success",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Delete Records from Delta and ASQL - No Failure",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('Activity5_Success: ', activity('Delete Records from Delta and ASQL - No Failure').Error['message'])}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Is Blob To ASQL Delete Required - Has Failure",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is Blob to ASQL Required - Has Failure",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(pipeline().parameters.OnlyDeleteRecordsFromBlobToASQL, pipeline().parameters.AllowPartialUpdateOfDiscovery)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Records from Delta and ASQL - Has Failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get Source ID').output.firstRow['SourceID']",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											},
											"ProcessType": {
												"value": "BlobToASQLDelete",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CaptureError5a_failure",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Delete Records from Delta and ASQL - Has Failure",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('Activity5_failure: ', activity('Delete Records from Delta and ASQL - Has Failure').Error['message'])}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "CaptureError1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Get Source ID",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity1: ', activity('Get Source ID').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CaptureError2",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Is Source to Blob Load Required",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity2: ', activity('Is Source to Blob Load Required').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CaptureError3_Success",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Is Source To Blob Delete Required - No Failure",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity3_Success: ', activity('Is Source To Blob Delete Required - No Failure').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CaptureError4_Success",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Is Blob to ASQL Required - No Failure",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity4_Success: ', activity('Is Blob to ASQL Required - No Failure').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CaptureError5_success",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Is Blob To ASQL Delete Required - No Failure",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity5_Success: ', activity('Is Blob To ASQL Delete Required - No Failure').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CaptureError3_failure",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Is Source To Blob Delete Required - Has Failure",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity3_failure: ', activity('Is Source To Blob Delete Required - Has Failure').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CaptureError4_failure",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Is Blob to ASQL Required - Has Failure",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity4_failure: ', activity('Is Blob to ASQL Required - Has Failure').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CaptureError5_failure",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Is Blob To ASQL Delete Required - Has Failure",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity5_failure: ', activity('Is Blob To ASQL Delete Required - Has Failure').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Errors Caught",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is Blob To ASQL Delete Required - No Failure",
								"dependencyConditions": [
									"Completed",
									"Skipped"
								]
							},
							{
								"activity": "Is Blob To ASQL Delete Required - Has Failure",
								"dependencyConditions": [
									"Completed",
									"Skipped"
								]
							},
							{
								"activity": "CaptureError5_failure",
								"dependencyConditions": [
									"Completed",
									"Skipped"
								]
							},
							{
								"activity": "CaptureError5_success",
								"dependencyConditions": [
									"Completed",
									"Skipped"
								]
							},
							{
								"activity": "CaptureError1",
								"dependencyConditions": [
									"Skipped",
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@{empty(variables('ErrorArray'))}",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "HTTP Trigger",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_PE_HttpRequest",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get Source ID').output.firstRow.SourceID",
												"type": "Expression"
											},
											"SourceCategoryType": "Failed",
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineStartTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineMessage": {
												"value": "@{replace(replace(replace(replace(string(variables('ErrorArray')),'[',''),']',''),'\"',''),',|','\\n')}",
												"type": "Expression"
											},
											"PipelineEndTime": {
												"value": "@utcnow()",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"SourceCategory": {
												"value": "@pipeline().parameters.HttpTriggerCategory",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Raise Failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "HTTP Trigger",
											"dependencyConditions": [
												"Completed"
											]
										},
										{
											"activity": "Append Error Array",
											"dependencyConditions": [
												"Skipped",
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@{replace(replace(replace(replace(string(variables('ErrorArray')),'[',''),']',''),'\"',''),',|','\\n')}",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								},
								{
									"name": "Append Error Array",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "HTTP Trigger",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('HTTP Trigger: ', activity('HTTP Trigger').Error['message'])}",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "HTTP Triggers",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_PE_HttpRequest",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get Source ID').output.firstRow.SourceID",
												"type": "Expression"
											},
											"SourceCategoryType": "Succeeded",
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineStartTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineMessage": {
												"value": "@{replace(replace(replace(replace(string(variables('ErrorArray')),',[',''),']',''),'\"',''),'[','')}",
												"type": "Expression"
											},
											"PipelineEndTime": {
												"value": "@utcnow()",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"SourceCategory": {
												"value": "@pipeline().parameters.HttpTriggerCategory",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "GIS_SQLServer_SDCM_SQL"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					},
					"AllowPartialUpdateOfDiscovery": {
						"type": "bool",
						"defaultValue": false
					},
					"Additional_MappingParam": {
						"type": "string"
					},
					"OnlyExtractDeletedRecordsFromSourceToBlob": {
						"type": "bool",
						"defaultValue": false
					},
					"OnlyDeleteRecordsFromBlobToASQL": {
						"type": "bool",
						"defaultValue": false
					},
					"TriggerName": {
						"type": "string",
						"defaultValue": "GIS_SDCM_Daily_Trigger"
					},
					"HttpTriggerCategory": {
						"type": "string"
					}
				},
				"variables": {
					"hasFailedFlag": {
						"type": "Boolean",
						"defaultValue": false
					},
					"ErrorArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2021-09-06T05:55:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_TRFM_TransformSourceDate')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_PE_HttpRequest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_TRFM_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getlistofblobfile",
						"description": "Lookup activity to retrieve the list blob csv file need to be processed from the metadata table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									},
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "foreachblobfile",
						"description": "looping through the list of blob file.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getlistofblobfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getlistofblobfile').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Process Blob To ASQL",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@if(equals(pipeline().parameters.ProcessType, 'BlobToASQL'), true, false)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "execute_databricks_merge_pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_Framework_TRFM_BlobToASQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"blobcontainer": {
															"value": "@item().TargetBlobContainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@item().StorageAccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@item().Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"columnlist": {
															"value": "@item().ColumnSchemaList",
															"type": "Expression"
														},
														"businesskeylist": {
															"value": "@item().BusinessKeyColumnList",
															"type": "Expression"
														},
														"deltastagingdbname": {
															"value": "@item().DeltaStagingDbName",
															"type": "Expression"
														},
														"deltatargetdbname": {
															"value": "@item().DeltaTargetDbName",
															"type": "Expression"
														},
														"deltastagetablename": {
															"value": "@item().DeltaStagingTableName",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@item().ColumnDelimiter",
															"type": "Expression"
														},
														"azuresqldbetllastmodifieddtm": {
															"value": "@item().AzuresqldbMaxLastModifieddtm",
															"type": "Expression"
														},
														"tableid": {
															"value": "@item().TableID",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@item().QuoteCharacter",
															"type": "Expression"
														},
														"azuresqltemptablename": {
															"value": "@item().azuresqltemptablename",
															"type": "Expression"
														},
														"blobfolderpath": {
															"value": "@item().TargetBlobFolderPath",
															"type": "Expression"
														},
														"deltastagingtableparquetfilepath": {
															"value": "@item().deltastagingtableparquetfilepath",
															"type": "Expression"
														},
														"DbHostName": {
															"value": "@item().DestinationHostName",
															"type": "Expression"
														},
														"RowSource": {
															"value": "@item().SourceName",
															"type": "Expression"
														},
														"azuresqltargettablename": {
															"value": "@item().AzuresqlTargetTableName",
															"type": "Expression"
														},
														"skipcsvrows": {
															"value": "@item().skipcsvrows",
															"type": "Expression"
														},
														"skipbottomrows": {
															"value": "@item().skipbottomrows",
															"type": "Expression"
														},
														"ETLMergeNotebookPath": {
															"value": "@item().ETLMergeNotebookPath",
															"type": "Expression"
														},
														"StoredProcNameMergeAzuresqltable": {
															"value": "@item().StoredProcNameMergeAzuresqltable",
															"type": "Expression"
														},
														"databricksclustername": {
															"value": "@item().databricksclustername",
															"type": "Expression"
														},
														"databricksclusterid": {
															"value": "@item().databricksclusterid",
															"type": "Expression"
														},
														"SourceTableName": {
															"value": "@item().SourceTableName",
															"type": "Expression"
														},
														"skipchangedset": {
															"value": "@string(item().skipchangedset)",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@item().databrickssecretname",
															"type": "Expression"
														},
														"checkfordeletesind": {
															"value": "@item().checkfordeletes",
															"type": "Expression"
														},
														"incrementalloadind": {
															"value": "@item().incrementalloadind",
															"type": "Expression"
														},
														"sourcecolumnlist": {
															"value": "@item().Source_Column_List",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Process Blob To ASQL Delete",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Process Blob To ASQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@if(and(equals(pipeline().parameters.ProcessType, 'BlobToASQLDelete'), equals(item().IncrementalLoadInd, '1')), true, false)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Framework_CopyDBtoBlobDelete_Pipeline",
												"description": "Execute copy db to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Truncate AzureSQL Delete Table",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_Framework_TRFM_BlobToASQL_Delete",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Data_Source_Table_Name": {
															"value": "@item().Data_Source_Table_Name",
															"type": "Expression"
														},
														"Data_Source_WaterMarkColumn": {
															"value": "@item().Data_Source_WaterMarkColumn",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path": {
															"value": "@item().Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"TableID": {
															"value": "@item().TableID",
															"type": "Expression"
														},
														"Data_Destination_File_Name": {
															"value": "@item().Data_Destination_File_Name",
															"type": "Expression"
														},
														"SourceServerName": {
															"value": "@item().SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@item().SourceDatabaseName",
															"type": "Expression"
														},
														"File_Name_Ext": {
															"value": "@item().File_Name_Ext",
															"type": "Expression"
														},
														"Join_Condition": {
															"value": "@item().Join_Condition",
															"type": "Expression"
														},
														"Source_Column_List": {
															"value": "@replace(replace(item().Source_Column_List,'[',''),']','')",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@item().ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@item().QuoteCharacter",
															"type": "Expression"
														},
														"source_where_filter": {
															"value": "@item().Source_Where_Filter",
															"type": "Expression"
														},
														"UserName": {
															"value": "@item().UserName",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@item().SecretPasswordName",
															"type": "Expression"
														},
														"BlobContainer": {
															"value": "@item().TargetBlobContainer",
															"type": "Expression"
														},
														"BusinessKeyList": {
															"value": "@item().BusinessKeyColumnList",
															"type": "Expression"
														},
														"DeltaTargetDbName": {
															"value": "@item().DeltaTargetDbName",
															"type": "Expression"
														},
														"StorageAccount": {
															"value": "@item().StorageAccount",
															"type": "Expression"
														},
														"RowSource": {
															"value": "@item().SourceName",
															"type": "Expression"
														},
														"DbHostName": {
															"value": "@item().DestinationHostName",
															"type": "Expression"
														},
														"AzureTargetTableName": {
															"value": "@item().AzuresqlTargetTableName",
															"type": "Expression"
														},
														"DeltaStagingTableParquetFilePath": {
															"value": "@item().DeltaStagingTableParquetFilePath",
															"type": "Expression"
														},
														"DeleteProcessCompletionDTM": {
															"value": "@item().DeleteProcessCompletionDTM",
															"type": "Expression"
														},
														"DeltaStagingDbName": {
															"value": "@item().DeltaStagingDbName",
															"type": "Expression"
														},
														"DeltaStageTableName": {
															"value": "@item().DeltaStagingTableName",
															"type": "Expression"
														},
														"AzureSqlTempDeleteTableName": {
															"value": "@item().AzuresqlTempDeleteTableName",
															"type": "Expression"
														},
														"Host_Name": {
															"value": "@item().Host_Name",
															"type": "Expression"
														},
														"Port_No": {
															"value": "@item().Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@item().SID",
															"type": "Expression"
														},
														"databricksclustername": {
															"value": "@item().databricksclustername",
															"type": "Expression"
														},
														"databricksclusterid": {
															"value": "@item().databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@item().databrickssecretname",
															"type": "Expression"
														},
														"CheckForDeletes": {
															"value": "@item().CheckForDeletes",
															"type": "Expression"
														},
														"File_Name_DateTime_Ind": {
															"value": "@item().File_Name_DateTime_Ind",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path_DeleteProcess": {
															"value": "@item().Data_Destination_Folder_Path_DeleteProcess",
															"type": "Expression"
														},
														"SourceId": {
															"value": "@pipeline().parameters.SourceID",
															"type": "Expression"
														},
														"IsInitialLoad": {
															"value": "@item().IsInitialLoad",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Truncate AzureSQL Delete Table",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('DECLARE @ObjectName VARCHAR(120), @SchemaName VARCHAR(100), @TableName VARCHAR(100) SELECT @ObjectName = ''', item().AzuresqlTempDeleteTableName, ''' SELECT @TableName = PARSENAME(@ObjectName, 1), @SchemaName = PARSENAME(@ObjectName, 2) IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @TableName and Table_Schema = @SchemaName) BEGIN Truncate Table ',  item().AzuresqlTempDeleteTableName, ' SELECT COUNT(*) AS RecCount FROM ', item().AzuresqlTempDeleteTableName, ' END ELSE BEGIN SELECT 0  AS RecCount END ')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "int",
						"defaultValue": 1
					},
					"TriggerName": {
						"type": "string"
					},
					"ProcessType": {
						"type": "string",
						"defaultValue": "BlobToASQL"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T06:37:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_TRFM_BlobToASQL_Delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDW_Mart_FinanceTransaction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dim_supplier",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Supplier]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_stock",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Stock]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_transactiontype",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_TransactionType]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_project",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_statistictype",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Project]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_postingaccount",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_PostingAccount]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_expenseelement",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_ExpenseElement]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_costcategory",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_CostCategory]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_subasset",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_supplier",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_SubAsset]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_employee",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_stock",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Employee]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_resourcetype",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_transactiontype",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_ResourceType]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_statistictype",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_StatisticType]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_earningsclass",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_postingaccount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_EarningsClass]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_labourcostclass",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_expenseelement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_LabourCostClass]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_balancetype",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_costcategory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_BalanceType]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_gl_transaction",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_employee",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_subasset",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_resourcetype",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_earningsclass",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_project",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_labourcostclass",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_balancetype",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_GL_Transaction]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"incr_days": {
									"value": {
										"value": "@pipeline().parameters.incrementaldays",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"isdeltaload": {
									"value": "1",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "fact_gl_transaction",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_gl_transaction",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_ar_invoice",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Fact_GL_Transaction]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"incr_days": {
									"value": {
										"value": "@pipeline().parameters.incrementaldays",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"isdeltaload": {
									"value": "1",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_ar_invoice",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_AR_Invoice]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "fact_gl_balances",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_postingaccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_expenseelement",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_balancetype",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Fact_GL_Balances]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "Ellipse9"
					},
					"incrementaldays": {
						"type": "string",
						"defaultValue": "5"
					}
				},
				"folder": {
					"name": "WorkOrder-Model"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDW_Mart_Kantar')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dim_SurveyVariable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_SurveyVariable_T2]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fact_SurveyResults",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Dim_SurveyVariable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Fact_SurveyResults_T2]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "Kantar"
					}
				},
				"folder": {
					"name": "Kantar-Model"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-29T03:32:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDW_Mart_LIWIS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dim_TradeWaste_Category",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_TradeWaste_Category]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_TradeWaste_Status",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_TradeWaste_Status]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_Risk_Rating",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Risk_Rating]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fact_Applications",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Dim_TradeWaste_Category",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Dim_TradeWaste_Status",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Dim_Risk_Rating",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Dim_Officer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Fact_Applications]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fact_Approvals",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Fact_Applications",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Fact_Approvals]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_Officer",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Officer]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "LIWIS"
					}
				},
				"folder": {
					"name": "LIWIS-Model"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDW_Mart_WorkOrder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dim_burstmain",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_BurstMain]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": "Ellipse5",
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Date]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": null,
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_maintenancetype",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_MaintenanceType]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Product]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_servicearea",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_ServiceArea]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "MDS",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_userstatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_UserStatus]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_workcategory",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_WorkCategory]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_workgroup",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_burstmain",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_WorkGroup]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_workordertype",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_WorkOrderType]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_workpriority",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_maintenancetype",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_WorkPriority]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_legalentity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_product",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_LegalEntity]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_workorderattributes",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_servicearea",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_WorkOrderAttributes]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_workordercomment",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_userstatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_WorkOrderComment]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_workrequestcomment",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_workcategory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_WorkRequestComment]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_location",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_workgroup",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_workordertype",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_workpriority",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_legalentity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_workorderattributes",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_workordercomment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_workrequestcomment",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Location]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_equipment",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_Equipment]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_workrequest",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_WorkRequest]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_workorder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_equipment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_workrequest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Dim_WorkOrder]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "fact_workorder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "dim_workorder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Mart].[usp_load_Fact_WorkOrder]",
							"storedProcedureParameters": {
								"from_dtm": {
									"value": null,
									"type": "DateTime"
								},
								"isdeltaload": {
									"value": "0",
									"type": "Byte"
								},
								"row_execution_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"sourcename": {
									"value": {
										"value": "@pipeline().parameters.sourcename",
										"type": "Expression"
									},
									"type": "String"
								},
								"to_dtm": {
									"value": null,
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "Ellipse9"
					}
				},
				"folder": {
					"name": "WorkOrder-Model"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Ellipse5_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Ellipse5"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Ellipse5"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Ellipse9_DataModel_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute PL_Ellipse9_Main",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get SourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceName": {
									"value": "@pipeline().parameters.SourceName",
									"type": "Expression"
								},
								"OnlySourceToBlob": {
									"value": "@pipeline().parameters.OnlySourceToBlob",
									"type": "Expression"
								},
								"OnlyBlobtoASQL": {
									"value": "@pipeline().parameters.OnlyBlobtoASQL",
									"type": "Expression"
								},
								"AllowPartialUpdateOfDiscovery": {
									"value": "@pipeline().parameters.AllowPartialUpdateOfDiscovery",
									"type": "Expression"
								},
								"Additional_MappingParam": {
									"value": "NULL",
									"type": "Expression"
								},
								"OnlyExtractDeletedRecordsFromSourceToBlob": {
									"value": "@pipeline().parameters.OnlyExtractDeletedRecordsFromSourceToBlob",
									"type": "Expression"
								},
								"OnlyDeleteRecordsFromBlobToASQL": {
									"value": "@pipeline().parameters.OnlyDeleteRecordsFromBlobToASQL",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().parameters.TriggerName",
									"type": "Expression"
								},
								"HttpTriggerCategory": "EDW_Completion"
							}
						}
					},
					{
						"name": "Execute PL_WorkOrder_Model_Main",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute PL_Ellipse9_Main",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_WorkOrder_Model_Main",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CaptureError1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Execute PL_Ellipse9_Main",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity1: ', activity('Execute PL_Ellipse9_Main').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CaptureError2",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Execute PL_WorkOrder_Model_Main",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorArray",
							"value": {
								"value": "@{concat('Activity1: ', activity('Execute PL_WorkOrder_Model_Main').Error['message'])}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Errors Caught",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Execute PL_WorkOrder_Model_Main",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "CaptureError2",
								"dependencyConditions": [
									"Completed",
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@{empty(variables('ErrorArray'))}",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "HTTP Trigger",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_PE_HttpRequest",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get SourceID').output.firstRow.SourceID",
												"type": "Expression"
											},
											"SourceCategoryType": "Failed",
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineStartTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineMessage": {
												"value": "@{replace(replace(replace(replace(string(variables('ErrorArray')),'[',''),']',''),'\"',''),',|','\\n')}",
												"type": "Expression"
											},
											"PipelineEndTime": {
												"value": "@utcnow()",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"SourceCategory": "Trigger"
										}
									}
								},
								{
									"name": "Raise Failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "HTTP Trigger",
											"dependencyConditions": [
												"Completed"
											]
										},
										{
											"activity": "Append Error Array",
											"dependencyConditions": [
												"Skipped",
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@{replace(replace(replace(replace(string(variables('ErrorArray')),'[',''),']',''),'\"',''),',|','\\n')}",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								},
								{
									"name": "Append Error Array",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "HTTP Trigger",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorArray",
										"value": {
											"value": "@{concat('HTTP Trigger: ', activity('HTTP Trigger').Error['message'])}",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "HTTP Triggers",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_PE_HttpRequest",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('Get SourceID').output.firstRow.SourceID",
												"type": "Expression"
											},
											"SourceCategoryType": "Succeeded",
											"PipelineRunId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"PipelineStartTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"PipelineMessage": {
												"value": "@{replace(replace(replace(replace(string(variables('ErrorArray')),',[',''),']',''),'\"',''),'[','')}",
												"type": "Expression"
											},
											"PipelineEndTime": {
												"value": "@utcnow()",
												"type": "Expression"
											},
											"PipelineTriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"PipelineTriggerId": {
												"value": "@pipeline().TriggerId",
												"type": "Expression"
											},
											"SourceCategory": "Trigger"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get SourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT\r\n  srcSys.SourceID\r\nFROM ETL.SourceSystem srcSys\r\nWHERE srcSys.SourceName = '@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Ellipse9"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					},
					"AllowPartialUpdateOfDiscovery": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyExtractDeletedRecordsFromSourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyDeleteRecordsFromBlobToASQL": {
						"type": "bool",
						"defaultValue": true
					},
					"TriggerName": {
						"type": "string",
						"defaultValue": "Ellipse9_Daily_Trigger"
					}
				},
				"variables": {
					"ErrorArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Ellipse9"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-24T06:00:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]",
				"[concat(variables('factoryId'), '/pipelines/PL_WorkOrder_Model_Main')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_PE_HttpRequest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Ellipse9_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Wait for EA Job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Wait for EA Job",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(contains(activity('Query EA Job History').output,'firstRow'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Query EA Job History",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Copy MSFPackages table from EA to EDW Discovery",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select distinct case when MSFPackages.[Status] in (1,0) then 'SUCCESS' else 'FAIL' end\nfrom\tETL.SourceSystem SS join ETL.SourceTableDetails STD on SS.SourceID = STD.SourceID \n\t\tjoin [Ellipse9].[MSFPackages] MSFPackages on lower(MSFPackages.sourcetablename) = STD.SourceTableName\nwhere\tSS.sourcename = 'Ellipse9'\n\t\tand MSFPackages.[Status] not in (1,0) and cast(MSFPackages.StartTime as date) = cast([dbo].[udf_getLocalDTM]() as date)",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Wait If",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Query EA Job History",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(activity('Query EA Job History').output,'firstRow' )",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Truncate MSFPackages Table",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": "Truncate table [Ellipse9].[MSFPackages]\n\nSelect top 10 * from [Ellipse9].[MSFPackages]",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Wait",
												"description": "",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 600
												}
											}
										]
									}
								},
								{
									"name": "Copy MSFPackages table from EA to EDW Discovery",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "select \n'NA' as ROW_NATURAL_KEY,\n'NA' as ROW_SOURCE,\n'NA' as ROW_HASH_KEY,\n'NA' as ROW_EXECUTION_ID,\ncast ('1900-01-01' as datetime) as ROW_CREATED_DTM,\ncast ('1900-01-01' as datetime) as ROW_LAST_MODIFIED_DTM,\n'NA' as ROW_ACTION_TYPE,\nPackageName,\nProjectName,\nDefaultRunTime,\nAvgRunTime,\nEnabled,\nStatus,\nEXECID,\nStartTime,\nEndTime,\nTotalSecs,\nOverrideEnabled,\nLastModDate,\nIsEllipseTable,\nIsDeltaLoad,\nSourceTableName,\nPrimaryFields,\nTargetTable,\nIsDeltaDefault,\nLastGoodLoadDate,\nCIOTable,\nErrorDesc,\nDerived,\nHostRowCount,\nHostRowCountSQL\nfrom dbo.MSFPackages",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": "Truncate table [Ellipse9].[MSFPackages]",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_ELLIPSE_ANALYTICS",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_EDWDiscovery_Table",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "[[Ellipse9].[MSFPackages]"
											}
										}
									]
								}
							],
							"timeout": "03:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Ellipse9"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Ellipse9"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_ELLIPSE_ANALYTICS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery_Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Evoqua_API_Parallel_Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch on tables",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.TableName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Replication_Data",
									"activities": [
										{
											"name": "Execute Replication Data",
											"type": "DatabricksNotebook",
											"dependsOn": [
												{
													"activity": "Get max sequence number",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/edw_discovery/Evoqua/EvoquaMetaData Replication Data",
												"baseParameters": {
													"maxsequencenumber": {
														"value": "@activity('Get max sequence number').output.firstRow.MaxSequenceNumber",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_DBR_ADF_Job_Cluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"databricksclusterid": {
														"value": "@pipeline().parameters.DatabricksClusterId",
														"type": "Expression"
													},
													"databrickssecretname": {
														"value": "@pipeline().parameters.DatabricksSecretName",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Get max sequence number",
											"type": "Lookup",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "select cast(max(DataId) as nvarchar(100)) as MaxSequenceNumber from [Evoqua].[Replication_Data]",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "DS_ASQL_EDWDiscovery",
													"type": "DatasetReference",
													"parameters": {}
												}
											}
										}
									]
								},
								{
									"value": "Channel",
									"activities": [
										{
											"name": "Execute Channel",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/edw_discovery/Evoqua/EvoquaMetaData Channels"
											},
											"linkedServiceName": {
												"referenceName": "LS_DBR_ADF_Job_Cluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"databricksclusterid": {
														"value": "@pipeline().parameters.DatabricksClusterId",
														"type": "Expression"
													},
													"databrickssecretname": {
														"value": "@pipeline().parameters.DatabricksSecretName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "Location",
									"activities": [
										{
											"name": "Execute Location",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/edw_discovery/Evoqua/EvoquaMetaData Locations"
											},
											"linkedServiceName": {
												"referenceName": "LS_DBR_ADF_Job_Cluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"databricksclusterid": {
														"value": "@pipeline().parameters.DatabricksClusterId",
														"type": "Expression"
													},
													"databrickssecretname": {
														"value": "@pipeline().parameters.DatabricksSecretName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "Unit",
									"activities": [
										{
											"name": "Execute Unit",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/edw_discovery/Evoqua/EvoquaMetaData Units"
											},
											"linkedServiceName": {
												"referenceName": "LS_DBR_ADF_Job_Cluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"databricksclusterid": {
														"value": "@pipeline().parameters.DatabricksClusterId",
														"type": "Expression"
													},
													"databrickssecretname": {
														"value": "@pipeline().parameters.DatabricksSecretName",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"DatabricksClusterId": {
						"type": "string"
					},
					"DatabricksSecretName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Evoqua"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Evoqua_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline PL_Evoqua_Metadata",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach on tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Evoqua_Metadata",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceName": "Evoqua-metadata"
							}
						}
					},
					{
						"name": "Get Tables",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Source details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * \nfrom [ETL].[SourceTableDetails] \nwhere SourceID = '@{activity('Get Source details').output.firstRow.SourceId}' and IsActive = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach on tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set ClusterId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set ClusterSecret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 4,
							"activities": [
								{
									"name": "Execute API ingestion pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Evoqua_API_Parallel_Ingestion",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TableName": {
												"value": "@item().SourceTableName",
												"type": "Expression"
											},
											"DatabricksClusterId": {
												"value": "@variables('ClusterId')",
												"type": "Expression"
											},
											"DatabricksSecretName": {
												"value": "@variables('ClusterSecret')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Source details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select * from [ETL].[SourceSystem] where SourceName = '@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery_Table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[ETL].[SourceSystem]"
								}
							}
						}
					},
					{
						"name": "Set ClusterId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterId",
							"value": {
								"value": "@activity('Get Source details').output.firstRow.databricksclusterid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ClusterSecret",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ClusterSecret",
							"value": {
								"value": "@activity('Get Source details').output.firstRow.databrickssecretname",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Evoqua-metadata"
					}
				},
				"variables": {
					"ClusterId": {
						"type": "String"
					},
					"ClusterSecret": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Evoqua"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Evoqua_Metadata')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery_Table')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Evoqua_API_Parallel_Ingestion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Evoqua_Metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ExecutePL_TRFM_BLOBToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.firstRow['SourceID']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Evoqua-metadata"
					}
				},
				"folder": {
					"name": "Evoqua"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Evoqua_Telemetry')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePL_TRFM_BLOBToASQL",
						"description": "Loading Temetra API Data into databricks delta and Azure sql db",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.firstRow['SourceID']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Evoqua-telemetry"
					}
				},
				"folder": {
					"name": "Evoqua"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_FSE_Source_To_ASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Execute EDW_Discovery to EDW_Mart Data Copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForBlobToASQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Framework_DM_DiscoveryToMart_DataCopy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ModelName": "Crew-Roster-Mart-Model"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Field_Service_Edge_UAT_DailyRefresh"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "FieldServicesEdge"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_DiscoveryToMart_DataCopy')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Export_To_NFUJPRD202')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will export the Files at Network Path \\\\Nfujprd202\\FDrive",
				"activities": [
					{
						"name": "Files List to Export",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from ETL.FileExportList a where IsActive=1 and \nexists (select 1  from etl.fileexport b where  IsActive=1 and a.FileExportID=b.FileExportID and \nUpper(b.FileExportName)=Upper('@{pipeline().parameters.FileExportName}') )\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachFile",
						"description": "Generate the Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Files List to Export",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Files List to Export').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Query Rowcount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "@if(empty(item().SourceRowCountQuery),'select 1 as SourceRowCount',item().SourceRowCountQuery)",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "First Row Exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Query Rowcount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Query Rowcount').output.firstRow.SourceRowCount,0))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "lkp_getlocattime",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": {
															"value": "DECLARE @DateTimeFormat as varchar(20);\nDECLARE @localdatetime as datetime;\nSet @DateTimeFormat ='@{item().DateTimeFormatInFileName}';\nEXEC @localdatetime = [dbo].[udf_getLocalDTM];\nselect FORMAT(@localdatetime, Case when len(@DateTimeFormat)=0 then'yyyy_MM_dd_HHmmss' else @DateTimeFormat end) as  localstarttime;",
															"type": "Expression"
														},
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Generate File",
												"description": "",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "lkp_getlocattime",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@item().SourceQuery",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ""
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 0
												},
												"inputs": [
													{
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_File_NFUJPRD202",
														"type": "DatasetReference",
														"parameters": {
															"TargetFilePath": {
																"value": "@item().TargetFilePath",
																"type": "Expression"
															},
															"TargetFileName": {
																"value": "@if(equals(item().IncludeDateTimeInFile_Name,1)\n,  concat(item().TargetFileName\n             ,'_'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,item().TargetFileNameExt)\n,\nconcat(\nitem().TargetFileName\n,item().TargetFileNameExt)\n)\n\n",
																"type": "Expression"
															},
															"ColumnDelimiter": {
																"value": "@item().ColumnDelimiter",
																"type": "Expression"
															},
															"QuoteCharacter": {
																"value": "@item().QuoteCharacter",
																"type": "Expression"
															},
															"EscapeCharacter": {
																"value": "@item().EscapeCharacter",
																"type": "Expression"
															},
															"FirstRowHeader": {
																"value": "@item().FirstRowHeader",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Update Incremental Date",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Generate File",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[ETL].usp_update_fileexport_incrementaldatevalue",
													"storedProcedureParameters": {
														"FileID": {
															"value": {
																"value": "@item().FileID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileExportName": {
						"type": "string",
						"defaultValue": "ICN"
					}
				},
				"folder": {
					"name": "File Export"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_File_NFUJPRD202')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Export_To_globalscape')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will export the Files at Network Path \\\\Nfujprd310\\ebi_prod_landing",
				"activities": [
					{
						"name": "Files List to Export",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from ETL.FileExportList a where IsActive=1 and \nexists (select 1  from etl.fileexport b where  IsActive=1 and a.FileExportID=b.FileExportID and \nUpper(b.FileExportName)=Upper('@{pipeline().parameters.FileExportName}') )\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachFile",
						"description": "Generate the Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Files List to Export",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Files List to Export').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Query Rowcount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "@if(empty(item().SourceRowCountQuery),'select 1 as SourceRowCount',item().SourceRowCountQuery)",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "First Row Exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Query Rowcount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Query Rowcount').output.firstRow.SourceRowCount,0))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "lkp_getlocattime",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": {
															"value": "DECLARE @DateTimeFormat as varchar(20);\nDECLARE @localdatetime as datetime;\nSet @DateTimeFormat ='@{item().DateTimeFormatInFileName}';\nEXEC @localdatetime = [dbo].[udf_getLocalDTM];\nselect FORMAT(@localdatetime, Case when len(@DateTimeFormat)=0 then'yyyy_MM_dd_HHmmss' else @DateTimeFormat end) as  localstarttime;",
															"type": "Expression"
														},
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Generate File",
												"description": "",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "lkp_getlocattime",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@item().SourceQuery",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ""
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 0
												},
												"inputs": [
													{
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_File_globalscape",
														"type": "DatasetReference",
														"parameters": {
															"TargetFilePath": {
																"value": "@item().TargetFilePath",
																"type": "Expression"
															},
															"TargetFileName": {
																"value": "@if(equals(item().IncludeDateTimeInFile_Name,1)\n,  concat(item().TargetFileName\n             ,'_'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,item().TargetFileNameExt)\n,\nconcat(\nitem().TargetFileName\n,item().TargetFileNameExt)\n)\n\n",
																"type": "Expression"
															},
															"ColumnDelimiter": {
																"value": "@item().ColumnDelimiter",
																"type": "Expression"
															},
															"QuoteCharacter": {
																"value": "@item().QuoteCharacter",
																"type": "Expression"
															},
															"EscapeCharacter": {
																"value": "@item().EscapeCharacter",
																"type": "Expression"
															},
															"FirstRowHeader": {
																"value": "@item().FirstRowHeader",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Update Incremental Date",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Generate File",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[ETL].usp_update_fileexport_incrementaldatevalue",
													"storedProcedureParameters": {
														"FileID": {
															"value": {
																"value": "@item().FileID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileExportName": {
						"type": "string",
						"defaultValue": "QAO"
					}
				},
				"folder": {
					"name": "File Export"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_File_globalscape')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Monitoring')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup source files",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select FileFolderName, [FileName] TargetFileName, LastLoadedDate,CheckpointColumn,CheckpointColumnDatatype,CheckpointColumnValue\nfrom ETL.SourceFileLoad SFL join etl.SourceSystem SS on SS.SourceID = SFL.SourceID\njoin ETL.SourceTableDetails STD on replace(SFL.FileName,'.csv','') = STD.SourceTableName\nwhere  SourceName='@{pipeline().parameters.SourceName}' and IsActive = 1 and STD.TriggerName = '@{pipeline().parameters.TriggerName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup source files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup source files').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata",
									"description": "check if any files need to process in the blob container",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_FS_GlobalScape_FileSize",
											"type": "DatasetReference",
											"parameters": {
												"filefolder": {
													"value": "@item().FileFolderName",
													"type": "Expression"
												},
												"file": {
													"value": "@item().TargetFileName",
													"type": "Expression"
												},
												"server": "\\\\Nfujprd310\\ebi_prod_landing"
											}
										},
										"fieldList": [
											"exists",
											"lastModified"
										],
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Check if file exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Send email file not received",
												"type": "WebActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": {
														"value": "@pipeline().parameters.LogicAppURL",
														"type": "Expression"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"value": "{\n   \"DataFactoryName\": \"@{pipeline().DataFactory}\",\n   \"PipelineName\": \"@{pipeline().Pipeline}\",\n   \"Subject\": \"@{pipeline().parameters.Subject}\",\n   \"ErrorMessage\": \" File @{item().TargetFileName}  is not received\",\n   \"EmailTo\": \"@{pipeline().parameters.EmailTo}\"\n}\t",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set File Name",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileName",
													"value": {
														"value": "@string(item().TargetFileName)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Retrieve File Size",
												"type": "GetMetadata",
												"dependsOn": [
													{
														"activity": "Set File Name",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_FS_GlobalScape_FileSize",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@item().FileFolderName",
																"type": "Expression"
															},
															"file": {
																"value": "@variables('FileName')",
																"type": "Expression"
															},
															"server": "\\\\Nfujprd310\\ebi_prod_landing"
														}
													},
													"fieldList": [
														"size"
													],
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												}
											},
											{
												"name": "Set File Size",
												"description": "Assign the file size value to the variable",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Retrieve File Size",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileSize",
													"value": {
														"value": "@string(activity('Retrieve File Size').output.Size)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Retrieve File Modification Date",
												"type": "GetMetadata",
												"dependsOn": [
													{
														"activity": "Execute Pipeline for File size check",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_FS_GlobalScape_FileSize",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@item().FileFolderName",
																"type": "Expression"
															},
															"file": {
																"value": "@variables('FileName')",
																"type": "Expression"
															},
															"server": "\\\\Nfujprd310\\ebi_prod_landing"
														}
													},
													"fieldList": [
														"lastModified"
													],
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												}
											},
											{
												"name": "Set LastModified Date",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Retrieve File Modification Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "LastModifiedDate",
													"value": {
														"value": "@string(convertfromUtc(activity('Retrieve File Modification Date').output.LastModified,'E. Australia Standard Time'))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute Pipeline for File size check",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Set File Size",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_File_Monitoring_File_Size_Check",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"FileSize": {
															"value": "@variables('FileSize')",
															"type": "Expression"
														},
														"Subject": {
															"value": "@pipeline().parameters.Subject",
															"type": "Expression"
														},
														"FileName": {
															"value": "@variables('FileName')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@pipeline().parameters.EmailTo",
															"type": "Expression"
														},
														"LogicAppURL": {
															"value": "@pipeline().parameters.LogicAppURL",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute Pipeline for Lastmodified check",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Set LastModified Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_File_Monitoring_File_LastModifiedDate_Check",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"LastModifiedDate": {
															"value": "@variables('LastModifiedDate')",
															"type": "Expression"
														},
														"Subject": {
															"value": "@pipeline().parameters.Subject",
															"type": "Expression"
														},
														"LastLoadedDate": {
															"value": "@ITEM().LastLoadedDate",
															"type": "Expression"
														},
														"FileName": {
															"value": "@variables('FileName')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@pipeline().parameters.EmailTo",
															"type": "Expression"
														},
														"LogicAppURL": {
															"value": "@pipeline().parameters.LogicAppURL",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Sourcename": {
						"type": "string",
						"defaultValue": "CHRIS21"
					},
					"Subject": {
						"type": "string",
						"defaultValue": "Chris21"
					},
					"ErrorMessageFileNotReceived": {
						"type": "string",
						"defaultValue": "File not received"
					},
					"EmailTo": {
						"type": "string"
					},
					"LogicAppURL": {
						"type": "string"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"OldFile": {
						"type": "Array"
					},
					"FileSize": {
						"type": "String"
					},
					"LastModifiedDate": {
						"type": "String"
					},
					"EmptyFile": {
						"type": "Array"
					},
					"FileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Source File Monitoring"
				},
				"annotations": [],
				"lastPublishTime": "2021-03-10T12:15:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_FileSize')]",
				"[concat(variables('factoryId'), '/pipelines/PL_File_Monitoring_File_Size_Check')]",
				"[concat(variables('factoryId'), '/pipelines/PL_File_Monitoring_File_LastModifiedDate_Check')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Monitoring_CheckPointValueCheck')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check the checkpoint value",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@lessOrEquals(pipeline().parameters.CheckpointTableValue,pipeline().parameters.CheckpointFileLoadValue)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send email",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.LogicAppURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\"DataFactoryName\":\"@{pipeline().DataFactory}\",\"PipelineName\":\"@{pipeline().Pipeline}\",\"Subject\":\"@{pipeline().parameters.Subject}\",\"ErrorMessage\":\"@{pipeline().parameters.ErrorMessage}\",\"EmailTo\":\"@{pipeline().parameters.EmailTo}\"}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CheckpointTableValue": {
						"type": "string"
					},
					"CheckpointFileLoadValue": {
						"type": "string"
					},
					"ErrorMessage": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string"
					},
					"Subject": {
						"type": "string"
					},
					"LogicAppURL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source File Monitoring"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Monitoring_File_LastModifiedDate_Check')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition3",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(ticks(pipeline().parameters.LastModifiedDate),ticks(pipeline().parameters.LastLoadedDate))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send email",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.LogicAppURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\"DataFactoryName\":\"@{pipeline().DataFactory}\",\"PipelineName\":\"@{pipeline().Pipeline}\",\"Subject\":\"@{pipeline().parameters.Subject}\",\"ErrorMessage\":\"@{variables('ErrorMessage')}\",\"EmailTo\":\"@{pipeline().parameters.EmailTo}\"}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorMessage",
										"value": {
											"value": "@concat('Lastest file for ',pipeline().parameters.FileName,' is not recevied')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LastModifiedDate": {
						"type": "string"
					},
					"Subject": {
						"type": "string"
					},
					"LastLoadedDate": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"EmailTo": {
						"type": "string",
						"defaultValue": "Vinayak.Khoje@urbanutilities.com.au"
					},
					"LogicAppURL": {
						"type": "string"
					}
				},
				"variables": {
					"ErrorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Source File Monitoring"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Monitoring_File_Size_Check')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check if file is empty",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(pipeline().parameters.FileSize),5)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send email",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set error message",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@pipeline().parameters.LogicAppURL",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\"DataFactoryName\":\"@{pipeline().DataFactory}\",\"PipelineName\":\"@{pipeline().Pipeline}\",\"Subject\":\"@{pipeline().parameters.Subject}\",\"ErrorMessage\":\"@{variables('ErrorMessage')}\",\"EmailTo\":\"@{pipeline().parameters.EmailTo}\"}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set error message",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorMessage",
										"value": {
											"value": "@concat('Lastest file for ',pipeline().parameters.FileName,' is empty')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileSize": {
						"type": "string",
						"defaultValue": "10"
					},
					"Subject": {
						"type": "string",
						"defaultValue": "C21"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "F1"
					},
					"EmailTo": {
						"type": "string",
						"defaultValue": "Vinayak.Khoje@urbanutilities.com.au"
					},
					"LogicAppURL": {
						"type": "string"
					}
				},
				"variables": {
					"ErrorMessage": {
						"type": "String"
					},
					"Filesize": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Source File Monitoring"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_DiscoveryToMart_DataCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Each Model - Discovery to Mart Temp",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Model Objects To Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Model Objects To Load').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "Switch Load Type",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().LoadTypeName",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Copy_Activity",
												"activities": [
													{
														"name": "Copy Dicovery to Mart Temp - Copy Activity",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "@concat('SELECT * FROM ', item().SourceSchemaName, '.', item().SourceObjectName, ' (NOLOCK)')",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@{concat('TRUNCATE TABLE TEMP.', item().TargetSchemaName, '_', item().TargetObjectName)}",
																	"type": "Expression"
																},
																"writeBehavior": "insert",
																"disableMetricsCollection": false
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_ASQL_EDWDiscovery",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_ASQL_EDWMart_Target",
																"type": "DatasetReference",
																"parameters": {
																	"SchemaName": {
																		"value": "TEMP",
																		"type": "Expression"
																	},
																	"TableName": {
																		"value": "@concat(item().TargetSchemaName, '_', item().TargetObjectName)",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "Databricks_Notebook",
												"activities": [
													{
														"name": "Copy Discovery to Mart Temp - Databricks Notebook",
														"type": "DatabricksNotebook",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebookPath": {
																"value": "@item().SourceTransformCommand",
																"type": "Expression"
															}
														},
														"linkedServiceName": {
															"referenceName": "LS_DBR_ADF_Job_Cluster",
															"type": "LinkedServiceReference",
															"parameters": {
																"databricksclusterid": {
																	"value": "@item().DatabricksClusterID",
																	"type": "Expression"
																},
																"databrickssecretname": "databricks-token"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get Model Objects To Load",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_model_object_load_list]",
								"storedProcedureParameters": {
									"ModelName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ModelName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Load Each Model - Mart Temp to Target",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Load Each Model - Discovery to Mart Temp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Model Objects To Load').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "Copy Temp to Target",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().TargetLoadCommand",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"isDebugFlag": {
												"value": "false",
												"type": "Boolean"
											},
											"sourceObject": {
												"value": {
													"value": "@concat('TEMP.', item().TargetSchemaName, '_', item().TargetObjectName)",
													"type": "Expression"
												},
												"type": "String"
											},
											"targetObject": {
												"value": {
													"value": "@concat(item().TargetSchemaName, '.', item().TargetObjectName)",
													"type": "Expression"
												},
												"type": "String"
											},
											"isTruncateBeforeLoad": {
												"value": {
													"value": "@item().TruncateBeforeLoad",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWMart",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ModelName": {
						"type": "string",
						"defaultValue": "Crew-Roster-Mart-Model"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWMart')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWMart_Target')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourceToBlob_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Extract Source To Blob",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set Blob File Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(equals(pipeline().parameters.IsInitialLoad, '1'), concat(toLower(variables('BlobFileType')), '_full'),\nif(and(equals(pipeline().parameters.IncrementalLoadInd, '1'),equals(pipeline().parameters.IsInitialLoad, '0')), concat(toLower(variables('BlobFileType')), '_inc'), concat(toLower(variables('BlobFileType')), '_full')))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "parquet_inc",
									"activities": [
										{
											"name": "ParquetDeltaCopyfromDB",
											"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition} \nWHERE\n(@{pipeline().parameters.Data_Source_WaterMarkColumn} >= REPLACE(SUBSTR('@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}', 1, 10), '-', '')\nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}')\n or (trim(@{pipeline().parameters.Data_Source_WaterMarkColumn}) IS NULL)\n",
														"type": "Expression"
													},
													"partitionOption": "None",
													"convertDecimalToInteger": false
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"parallelCopies": {
													"value": "@variables('MaxCopyDCP')",
													"type": "Expression"
												},
												"dataIntegrationUnits": {
													"value": "@variables('MaxCopyDIU')",
													"type": "Expression"
												}
											},
											"inputs": [
												{
													"referenceName": "DS_Oracle_Framework",
													"type": "DatasetReference",
													"parameters": {
														"HostName": {
															"value": "@pipeline().parameters.Host_Name",
															"type": "Expression"
														},
														"PortNo": {
															"value": "@pipeline().parameters.Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@pipeline().parameters.SID",
															"type": "Expression"
														},
														"UserName": {
															"value": "@pipeline().parameters.User_Name",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@pipeline().parameters.Secret_Password_Name",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_ABLB_EDWDiscovery_Delta_Parquet_Sink",
													"type": "DatasetReference",
													"parameters": {
														"FolderPath": {
															"value": "@pipeline().parameters.Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"TargetFileName": {
															"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocaltime').output.firstRow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "ParquetSqlServerStoredProcedure1",
											"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "ParquetDeltaCopyfromDB",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 3,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
												"storedProcedureParameters": {
													"LastModifiedDTM": {
														"value": {
															"value": "@formatDateTime(concat(\n    substring(activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue, 0, 4), '-'\n    , substring(activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue, 4, 2), '-', substring(activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue, 6, 2)\n    ), 'yyyy-MM-dd'\n    )",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"TableID": {
														"value": {
															"value": "@pipeline().parameters.TableID",
															"type": "Expression"
														},
														"type": "Int32"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_ASQL_EDWDiscovery",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "csv_inc",
									"activities": [
										{
											"name": "CSVDeltaCopyfromDB",
											"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition} \nWHERE\n(@{pipeline().parameters.Data_Source_WaterMarkColumn} >= REPLACE(SUBSTR('@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}', 1, 10), '-', '')\nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}')\n or (trim(@{pipeline().parameters.Data_Source_WaterMarkColumn}) IS NULL)\n\n",
														"type": "Expression"
													},
													"partitionOption": "None",
													"convertDecimalToInteger": false
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ""
													}
												},
												"enableStaging": false,
												"parallelCopies": {
													"value": "@variables('MaxCopyDCP')",
													"type": "Expression"
												},
												"dataIntegrationUnits": {
													"value": "@variables('MaxCopyDIU')",
													"type": "Expression"
												}
											},
											"inputs": [
												{
													"referenceName": "DS_Oracle_OnPrem",
													"type": "DatasetReference",
													"parameters": {
														"HostName": {
															"value": "@pipeline().parameters.Host_Name",
															"type": "Expression"
														},
														"PortNo": {
															"value": "@pipeline().parameters.Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@pipeline().parameters.SID",
															"type": "Expression"
														},
														"UserName": {
															"value": "@pipeline().parameters.User_Name",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@pipeline().parameters.Secret_Password_Name",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_ABLB_Datalanding",
													"type": "DatasetReference",
													"parameters": {
														"FolderPath": {
															"value": "@pipeline().parameters.Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"TargetFileName": {
															"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocaltime').output.firstRow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@pipeline().parameters.QuoteCharacter",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "CSVSqlServerStoredProcedure1",
											"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "CSVDeltaCopyfromDB",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 3,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
												"storedProcedureParameters": {
													"LastModifiedDTM": {
														"value": {
															"value": "@formatDateTime(concat(\n    substring(activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue, 0, 4), '-'\n    , substring(activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue, 4, 2), '-', substring(activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue, 6, 2)\n    ), 'yyyy-MM-dd'\n    )",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"TableID": {
														"value": {
															"value": "@pipeline().parameters.TableID",
															"type": "Expression"
														},
														"type": "Int32"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_ASQL_EDWDiscovery",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "parquet_full",
									"activities": [
										{
											"name": "ParquetFullCopyToBlob",
											"description": "Full Copy from source table into blob storage",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
														"type": "Expression"
													},
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"parallelCopies": {
													"value": "@variables('MaxCopyDCP')",
													"type": "Expression"
												},
												"dataIntegrationUnits": {
													"value": "@variables('MaxCopyDIU')",
													"type": "Expression"
												}
											},
											"inputs": [
												{
													"referenceName": "DS_Oracle_Framework",
													"type": "DatasetReference",
													"parameters": {
														"HostName": {
															"value": "@pipeline().parameters.Host_Name",
															"type": "Expression"
														},
														"PortNo": {
															"value": "@pipeline().parameters.Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@pipeline().parameters.SID",
															"type": "Expression"
														},
														"UserName": {
															"value": "@pipeline().parameters.User_Name",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@pipeline().parameters.Secret_Password_Name",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_ABLB_EDWDiscovery_Delta_Parquet_Sink",
													"type": "DatasetReference",
													"parameters": {
														"FolderPath": {
															"value": "@pipeline().parameters.Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"TargetFileName": {
															"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocaltime').output.firstRow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "ParquetSqlServerStoredProcedure2",
											"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "ParquetFullCopyToBlob",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 3,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
												"storedProcedureParameters": {
													"TableID": {
														"value": {
															"value": "@pipeline().parameters.TableID",
															"type": "Expression"
														},
														"type": "Int32"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_ASQL_EDWDiscovery",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "csv_full",
									"activities": [
										{
											"name": "CSVFullCopyToBlob",
											"description": "Full Copy from source table into blob storage",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
														"type": "Expression"
													},
													"partitionOption": "None"
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".csv"
													}
												},
												"enableStaging": false,
												"parallelCopies": {
													"value": "@variables('MaxCopyDCP')",
													"type": "Expression"
												},
												"dataIntegrationUnits": {
													"value": "@variables('MaxCopyDIU')",
													"type": "Expression"
												}
											},
											"inputs": [
												{
													"referenceName": "DS_Oracle_OnPrem",
													"type": "DatasetReference",
													"parameters": {
														"HostName": {
															"value": "@pipeline().parameters.Host_Name",
															"type": "Expression"
														},
														"PortNo": {
															"value": "@pipeline().parameters.Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@pipeline().parameters.SID",
															"type": "Expression"
														},
														"UserName": {
															"value": "@pipeline().parameters.User_Name",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@pipeline().parameters.Secret_Password_Name",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_ABLB_Datalanding",
													"type": "DatasetReference",
													"parameters": {
														"FolderPath": {
															"value": "@pipeline().parameters.Data_Destination_Folder_Path",
															"type": "Expression"
														},
														"TargetFileName": {
															"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocaltime').output.firstRow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@pipeline().parameters.QuoteCharacter",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "CSVSqlServerStoredProcedure2",
											"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "CSVFullCopyToBlob",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 3,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
												"storedProcedureParameters": {
													"TableID": {
														"value": {
															"value": "@pipeline().parameters.TableID",
															"type": "Expression"
														},
														"type": "Int32"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_ASQL_EDWDiscovery",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set Blob File Type",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Fetch Last Refresh DateTime for INC Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "BlobFileType",
							"value": {
								"value": "@split(pipeline().parameters.File_Name_Ext, '.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_getlocaltime",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DIU and DCP variables for Intial Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Fetch Last Refresh DateTime for INC Load",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "lkp_getlocaltime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(and(equals(pipeline().parameters.IncrementalLoadInd, '1'), equals(pipeline().parameters.IsInitialLoad, '0')), true, false)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "\nSELECT NVL(MAX(LTRIM(RTRIM(@{pipeline().parameters.Data_Source_WaterMarkColumn}))), '19000101') AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false
										},
										"dataset": {
											"referenceName": "DS_Oracle_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"HostName": {
													"value": "@pipeline().parameters.Host_Name",
													"type": "Expression"
												},
												"PortNo": {
													"value": "@pipeline().parameters.Port_No",
													"type": "Expression"
												},
												"SID": {
													"value": "@pipeline().parameters.SID",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.User_Name",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.Secret_Password_Name",
													"type": "Expression"
												}
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set DIU and DCP variables for Intial Load",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.IsInitialLoad, '1'), true, false)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Max DIU - Daily Load",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxCopyDIU",
										"value": {
											"value": "@pipeline().parameters.MaxDailyLoadDataIntegrationUnit",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Max DCP - Daily Load",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Max DIU - Daily Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxCopyDCP",
										"value": {
											"value": "@pipeline().parameters.MaxDailyLoadDegreeOfCopyParallelism",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Max DIU - Initial Load",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxCopyDIU",
										"value": {
											"value": "@pipeline().parameters.MaxInitialLoadDataIntegrationUnit",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Max DCP - Initial Load",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Max DIU - Initial Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxCopyDCP",
										"value": {
											"value": "@pipeline().parameters.MaxInitialLoadDegreeOfCopyParallelism",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"Host_Name": {
						"type": "string"
					},
					"Port_No": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"User_Name": {
						"type": "string"
					},
					"Secret_Password_Name": {
						"type": "string"
					},
					"IsInitialLoad": {
						"type": "int",
						"defaultValue": 0
					},
					"MaxInitialLoadDataIntegrationUnit": {
						"type": "string"
					},
					"MaxInitialLoadDegreeOfCopyParallelism": {
						"type": "string"
					},
					"MaxDailyLoadDataIntegrationUnit": {
						"type": "string"
					},
					"MaxDailyLoadDegreeOfCopyParallelism": {
						"type": "string"
					}
				},
				"variables": {
					"BlobFileType": {
						"type": "String"
					},
					"MaxCopyDIU": {
						"type": "String"
					},
					"MaxCopyDCP": {
						"type": "String"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": [],
				"lastPublishTime": "2020-06-09T01:21:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_Oracle_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_Oracle_Framework')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_EDWDiscovery_Delta_Parquet_Sink')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_API')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Copy Data from API to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetSchemaMapping",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "lkp_getlocattime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:05:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@json(activity('GetSchemaMapping').output.firstrow.json_output)",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "DS_API",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "GetSchemaMapping",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_getColumnMapping_json_to_csv]",
								"storedProcedureParameters": {
									"additional_param": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Additional_MappingParam",
											"type": "Expression"
										}
									},
									"TableID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.tableID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "lkp_getlocattime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "Envizi.monthlydatasummaryallmeasures"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "envizi-datalanding/envizi/monthlydatasummaryallmeasures"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "5822"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "monthlydatasummaryallmeasures"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "https://auapi.envizi.com/api/data"
					},
					"SourceDatabaseName": {
						"type": "string"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 0
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string"
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "[[Associate_Id],[Start_Period],[End_Period],[Associate],[Level_1_Group],[Level_2_Group],[Level_3_Group],[Location],[Category],[Data_Type],[Account_Style_Component],[Item_Number],[Account_Ref_Meter_Name],[Supplier],[Reader_Notes],[Opened_On],[Replaced_On],[Occurred_On],[Account_Style_Field],[Measure],[Measure_Type],[Units],[Actual_Data],[Estimated_Data],[Accrued_Data],[Total_Data],[Actual_Days],[Estimated_Days],[Accrued_Days],[Total_Days],[Actual_Percent],[Estimated_Percent],[Accrued_Percent],[Use],[Use_Percent],[Total_Reporting_Amount]"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DeltaTargetTableName": {
						"type": "string"
					},
					"Additional_MappingParam": {
						"type": "string"
					},
					"APIBaseURL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": [],
				"lastPublishTime": "2020-06-09T01:21:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_API')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Blob_ActualExcelTab')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetLastModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "Source_File_Name",
										"value": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_Blob_ExcelFile_Source",
								"type": "DatasetReference",
								"parameters": {
									"DirectoryName": {
										"value": "@pipeline().parameters.SourceFileFolderName",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"SheetName": {
										"value": "@pipeline().parameters.Data_Source_Table_Name",
										"type": "Expression"
									},
									"ContainerName": {
										"value": "@pipeline().parameters.SourceLandingContainer",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name, '_',pipeline().parameters.Data_Source_Table_Name\n             ,'-'\n            , formatDateTime(convertFromUtc(activity('GetLastModifiedDate').output.lastModified,'E. Australia Standard Time'),'yyyyMMdd-HHmmss')\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name, '_', pipeline().parameters.Data_Source_Table_Name\n,pipeline().parameters.File_Name_Ext)\n)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SqlServerStoredProcedure2",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
							"storedProcedureParameters": {
								"TableID": {
									"value": {
										"value": "@pipeline().parameters.TableID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWDiscovery",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetLastModifiedDate",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Blob_ExcelFile_Source",
								"type": "DatasetReference",
								"parameters": {
									"DirectoryName": {
										"value": "@pipeline().parameters.SourceFileFolderName",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"SheetName": {
										"value": "@pipeline().parameters.Data_Source_Table_Name",
										"type": "Expression"
									},
									"ContainerName": {
										"value": "@pipeline().parameters.SourceLandingContainer",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceFolderLocation": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string"
					},
					"SourceLandingContainer": {
						"type": "string"
					},
					"SourceFileFolderName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T05:48:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob_ExcelFile_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Delete_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "lkp_getlocalstarttime2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_getlocalstarttime2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select \n\n@{if(  AND(equals(pipeline().parameters.RowSource,'CHRIS21' ),\n equals(pipeline().parameters.Data_Destination_File_Name,'D_13_PDT')) ,\nreplace(pipeline().parameters.BusinessKeyList,'Position_Number','Position Number')\n,pipeline().parameters.BusinessKeyList)}\n\n\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.SourceServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.SourceDatabaseName",
										"type": "Expression"
									},
									"UserName": {
										"value": "@pipeline().parameters.UserName",
										"type": "Expression"
									},
									"SecretPasswordName": {
										"value": "@pipeline().parameters.SecretPasswordName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "GenerateDeleteFile",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/ETL_Create_Delete_File",
							"baseParameters": {
								"blobcontainer": {
									"value": "@pipeline().parameters.BlobContainer",
									"type": "Expression"
								},
								"blobfilename": {
									"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
									"type": "Expression"
								},
								"columnlist": {
									"value": "@pipeline().parameters.Source_Column_List",
									"type": "Expression"
								},
								"businesskeylist": {
									"value": "@pipeline().parameters.BusinessKeyList",
									"type": "Expression"
								},
								"deltatargetdbname": {
									"value": "@pipeline().parameters.DeltaTargetDbName",
									"type": "Expression"
								},
								"storageaccount": {
									"value": "@pipeline().parameters.StorageAccount",
									"type": "Expression"
								},
								"columndelimiter": {
									"value": "@pipeline().parameters.ColumnDelimiter",
									"type": "Expression"
								},
								"quotecharacter": {
									"value": "@base64(pipeline().parameters.QuoteCharacter)",
									"type": "Expression"
								},
								"rowsource": {
									"value": "@pipeline().parameters.RowSource",
									"type": "Expression"
								},
								"dbhostname": {
									"value": "@pipeline().parameters.DbHostName",
									"type": "Expression"
								},
								"skipcsvrows": "0",
								"azuretargettablename": {
									"value": "@pipeline().parameters.AzureTargetTableName",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricksclusterid",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databrickssecretname",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetFileDetails",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "GenerateDeleteFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckFileExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetFileDetails').output.Exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteRecords",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/edw_discovery/ETL_Merge_Delete",
										"baseParameters": {
											"blobcontainer": {
												"value": "@pipeline().parameters.BlobContainer",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@pipeline().parameters.columnschemalist",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@pipeline().parameters.BusinessKeyList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@pipeline().parameters.DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@pipeline().parameters.DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@pipeline().parameters.DeltaStageTableName",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@pipeline().parameters.AzureSqlTempTableName",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@pipeline().parameters.StorageAccount",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@pipeline().parameters.ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@base64(pipeline().parameters.QuoteCharacter)",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@pipeline().parameters.DeleteProcessCompletionDTM",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@pipeline().parameters.DeltaStagingTableParquetFilePath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@pipeline().parameters.DbHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@pipeline().parameters.RowSource",
												"type": "Expression"
											},
											"skipcsvrows": "0",
											"azuresqltargettablename": {
												"value": "@pipeline().parameters.AzureTargetTableName",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DBR_ADF_Job_Cluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"databricksclusterid": {
												"value": "@pipeline().parameters.databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@pipeline().parameters.databrickssecretname",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteRecordsInDatabase",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeleteRecords",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_delete_from_azuresqltable]",
										"storedProcedureParameters": {
											"table_source": {
												"value": {
													"value": "@pipeline().parameters.AzureSqlTempTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_target": {
												"value": {
													"value": "@pipeline().parameters.AzureTargetTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableid": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"BlobContainer": {
						"type": "string"
					},
					"BusinessKeyList": {
						"type": "string"
					},
					"DeltaTargetDbName": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"AzureTargetTableName": {
						"type": "string"
					},
					"DeltaStagingTableParquetFilePath": {
						"type": "string"
					},
					"DeleteProcessCompletionDTM": {
						"type": "string"
					},
					"DeltaStagingDbName": {
						"type": "string"
					},
					"DeltaStageTableName": {
						"type": "string"
					},
					"AzureSqlTempTableName": {
						"type": "string"
					},
					"databricksclustername": {
						"type": "string"
					},
					"databricksclusterid": {
						"type": "string"
					},
					"columnschemalist": {
						"type": "string"
					},
					"databrickssecretname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_EDWDiscovery_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetLastModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_File_Source",
								"type": "DatasetReference",
								"parameters": {
									"DirectoryName": {
										"value": "@pipeline().parameters.SourceFolderLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"ColumnDelimiter": ",",
									"QuoteCharacter": "\""
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            , formatDateTime(convertFromUtc(activity('GetLastModifiedDate').output.lastModified,'E. Australia Standard Time'),'yyyyMMdd-HHmmss')\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SqlServerStoredProcedure2",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
							"storedProcedureParameters": {
								"TableID": {
									"value": {
										"value": "@pipeline().parameters.TableID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWDiscovery",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetLastModifiedDate",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_File_Source",
								"type": "DatasetReference",
								"parameters": {
									"DirectoryName": {
										"value": "@pipeline().parameters.SourceFolderLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"ColumnDelimiter": ",",
									"QuoteCharacter": "\""
								}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceFolderLocation": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_File_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_GlobalScape_ActualExcelTab')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetLastModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "Source_File_Name",
										"value": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_GlobalScape_ExcelFile_Source",
								"type": "DatasetReference",
								"parameters": {
									"Filefolder": {
										"value": "@pipeline().parameters.SourceFileFolderName",
										"type": "Expression"
									},
									"SheetName": {
										"value": "@pipeline().parameters.Data_Source_Table_Name",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name, '_', pipeline().parameters.Data_Source_Table_Name\n             ,'-'\n            , formatDateTime(convertFromUtc(activity('GetLastModifiedDate').output.lastModified,'E. Australia Standard Time'),'yyyyMMdd-HHmmss')\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name, '_', pipeline().parameters.Data_Source_Table_Name\n,pipeline().parameters.File_Name_Ext)\n)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SqlServerStoredProcedure2",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
							"storedProcedureParameters": {
								"TableID": {
									"value": {
										"value": "@pipeline().parameters.TableID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWDiscovery",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetLastModifiedDate",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_GlobalScape_ExcelFile_Source",
								"type": "DatasetReference",
								"parameters": {
									"Filefolder": {
										"value": "@pipeline().parameters.SourceFileFolderName",
										"type": "Expression"
									},
									"SheetName": {
										"value": "@pipeline().parameters.Data_Source_Table_Name",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceFolderLocation": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string"
					},
					"SourceLandingContainer": {
						"type": "string"
					},
					"SourceFileFolderName": {
						"type": "string",
						"defaultValue": "Ellipse9"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T05:48:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_GlobalScape_ExcelFile_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_GlobalScape_CSVFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "GetLandingMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_GlobalScape_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"p_FileFolder": {
										"value": "@pipeline().parameters.FileFolderName",
										"type": "Expression"
									},
									"p_FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"p_ServerName": {
										"value": "@pipeline().parameters.SourceFolderLocation",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyCSVFilesAndExecuteCopy",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Landing_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Landing_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy_dataTocsvFile",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocalstarttime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyFileToArchive_Empty",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS_Source",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"filename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															},
															"folderlocation": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@{concat(pipeline().parameters.FileFolderName, '\\Archive')}",
																"type": "Expression"
															},
															"server": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															},
															"filename": "@variables('FileName')"
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy_CSV_to_Blob",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 2,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS_Source",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"filename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															},
															"folderlocation": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_FS_Dataloading",
														"type": "DatasetReference",
														"parameters": {
															"targetblobfoldername": "@replace(pipeline().parameters.Data_Destination_Folder_Path, 'ETL_READY/', '')",
															"targetFileName": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1), concat(replace(variables('FileName'),pipeline().parameters.File_Name_Ext, ''),'-', activity('lkp_getlocalstarttime').output.firstRow.localstarttime2,pipeline().parameters.File_Name_Ext), variables('FileName'))"
														}
													}
												]
											},
											{
												"name": "Archive_Data",
												"description": "The archive activity file should take the particular instance of the file and copy it to an archive folder, adding a timestamp if required/configured in metadata.",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy_CSV_to_Blob",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS_Source",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"filename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															},
															"folderlocation": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@{concat(pipeline().parameters.FileFolderName, '\\Archive')}",
																"type": "Expression"
															},
															"server": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															},
															"filename": {
																"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1),\nconcat(replace(variables('FileName'),pipeline().parameters.File_Name_Ext, ''),'-',\nactivity('lkp_getlocalstarttime').output.firstRow.localstarttime2,pipeline().parameters.File_Name_Ext),\nvariables('FileName'))",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(AND(greater(variables('FileSize'),'0'), contains(variables('FileName'),pipeline().parameters.File_Name_Ext) ),true,false)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_FS_GlobalScape_SUMS_Source",
											"type": "DatasetReference",
											"parameters": {
												"filefolder": {
													"value": "@pipeline().parameters.FileFolderName",
													"type": "Expression"
												},
												"filename": {
													"value": "@variables('FileName')",
													"type": "Expression"
												},
												"folderlocation": {
													"value": "@pipeline().parameters.SourceFolderLocation",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete_After_Archiving",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "lkp_Delete_After_Archiving",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Copy_dataTocsvFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('lkp_Delete_After_Archiving').output.firstRow.ParameterValue,'1')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Delete_Old_From_GS",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_FS_GlobalScape_SUMS_Source",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@pipeline().parameters.FileFolderName",
																"type": "Expression"
															},
															"filename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": false
													}
												}
											}
										]
									}
								},
								{
									"name": "lkp_Delete_After_Archiving",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT ISNULL(\n(Select [ParameterValue]\nFROM [ETL].SourceTableParameter\t\nWHERE [TableID] =    '@{pipeline().parameters.TableID}'        \nAND [ParameterName] ='Delete_After_Archiving'), 1)\nas ParameterValue\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "lkp_getlocalstarttime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Landing_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetLandingMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetLandingMetadata').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Merge CSV Files in Blob",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Blob_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@{if(AND(greater(int(string(activity('lkp_Sort_Blob_Collection').output.count)), 0), equals(toLower(substring(pipeline().parameters.Data_Source_Table_Name, 0, indexOf(pipeline().parameters.Data_Source_Table_Name, '.'))), 'sums')), if(or(equals(toLower(substring(pipeline().parameters.Data_Source_Table_Name, add(indexOf(pipeline().parameters.Data_Source_Table_Name, '.'),1), sub(length(pipeline().parameters.Data_Source_Table_Name), add(indexOf(pipeline().parameters.Data_Source_Table_Name, '.'),1)))), 'meterdetails'), equals(toLower(substring(pipeline().parameters.Data_Source_Table_Name, add(indexOf(pipeline().parameters.Data_Source_Table_Name, '.'),1), sub(length(pipeline().parameters.Data_Source_Table_Name), add(indexOf(pipeline().parameters.Data_Source_Table_Name, '.'),1)))), 'observeredmeterreadings')), 'SUMS_MERGE', 'SUMS_UNMERGE'), 'OTHERS_UNMERGE')}",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "SUMS_MERGE",
									"activities": [
										{
											"name": "Sums_Prepare_Notebook",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/edw_discovery/SUMS/SUMS_Prepare",
												"baseParameters": {
													"Source_File_Name": {
														"value": "@pipeline().parameters.SourceFileName",
														"type": "Expression"
													},
													"initial_load": {
														"value": "@{if(equals(pipeline().parameters.IsInitialLoad, '1'), 'true', 'false')}",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_DBR_ADF_Job_Cluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"databricksclusterid": {
														"value": "@pipeline().parameters.databricksclusterid",
														"type": "Expression"
													},
													"databrickssecretname": {
														"value": "@pipeline().parameters.databrickssecretname",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "CheckAnyCSVFilesAndExecuteCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_FS_SUMS",
								"type": "DatasetReference",
								"parameters": {
									"targetblobfoldername": {
										"value": "@replace(pipeline().parameters.Data_Destination_Folder_Path, 'ETL_READY/', '')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "lkp_Sort_Blob_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "UrbanHQ.reference_month_year_sort"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "6641"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "string",
						"defaultValue": "1"
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceFolderLocation": {
						"type": "string",
						"defaultValue": "\\\\NFUJPRD202\\GDrive"
					},
					"SourceFileName": {
						"type": "string",
						"defaultValue": "UU EDW Reference Month Year Sort*.csv"
					},
					"SourceLandingContainer": {
						"type": "string"
					},
					"SourceName": {
						"type": "string",
						"defaultValue": "\"UrbanHQ\""
					},
					"DatabricksClusterId": {
						"type": "string"
					},
					"DatabricksSecretName": {
						"type": "string"
					},
					"SourceTableName": {
						"type": "string",
						"defaultValue": "reference_month_year_sort.csv"
					},
					"IsInitialLoad": {
						"type": "string"
					},
					"FileFolderName": {
						"type": "string",
						"defaultValue": "HRIS_WorkDay_Reports"
					}
				},
				"variables": {
					"FileName": {
						"type": "String"
					},
					"processfile": {
						"type": "Boolean"
					},
					"FileSize": {
						"type": "String"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_SUMS')]",
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_SUMS_Source')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_SUMS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_Dataloading')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_HTTPKeyVault')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy HTTP csv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set Url",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_HTTP_DelimitedText",
								"type": "DatasetReference",
								"parameters": {
									"BaseURL": {
										"value": "@variables('Url')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.blobcontainer",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(pipeline().parameters.blobfolder,'/',pipeline().parameters.blobfile,pipeline().parameters.fileNameExt)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set Url",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Read KeyVault",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Url",
							"value": {
								"value": "@concat(pipeline().parameters.webrequest_url,pipeline().parameters.relative_url,join(variables('url_param'),'' ))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Read KeyVault",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_KeyVault_Values",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_KeyVault_Values').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Key Vault ParameterName",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.0:05:00",
										"retry": 10,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat(pipeline().parameters.Host_Name,item().ParameterValue,'?api-version=7.3')",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {},
										"disableCertValidation": true,
										"authentication": {
											"type": "MSI",
											"resource": "https://vault.azure.net"
										}
									}
								},
								{
									"name": "Set Url_variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Key Vault ParameterName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Url_variable",
										"value": {
											"value": "@concat('&',item().ParameterName,'=',activity('Key Vault ParameterName').output.value)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append URL",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Set Url_variable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "url_array",
										"value": {
											"value": "@variables('Url_variable')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Url param",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Append URL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "url_param",
										"value": {
											"value": "@variables('url_array')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_KeyVault_Values",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select [ParameterValue], [ParameterName]\nFROM [ETL].SourceTableParameter\t\nWHERE [TableID] =    '@{pipeline().parameters.TableID}'        \nORDER BY [ColumnOrder]\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"relative_url": {
						"type": "string",
						"defaultValue": "?EXPORT=Export"
					},
					"fileNameExt": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"blobcontainer": {
						"type": "string",
						"defaultValue": "ixom-datalanding"
					},
					"blobfolder": {
						"type": "string",
						"defaultValue": "ixom_telemetry"
					},
					"blobfile": {
						"type": "string",
						"defaultValue": "telemetry_readings"
					},
					"src_blobstorageaccount": {
						"type": "string",
						"defaultValue": "quueatstdasrclanding001"
					},
					"webrequest_url": {
						"type": "string",
						"defaultValue": "https://ixomtelemetry.com/Subscriber/SiteOverview.asp"
					},
					"station": {
						"type": "string"
					},
					"blobstorageaccount": {
						"type": "string",
						"defaultValue": "quueatstdadlslanding001"
					},
					"src_blobcontainer": {
						"type": "string",
						"defaultValue": "http-datalanding/"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"TableID": {
						"type": "string"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Host_Name": {
						"type": "string",
						"defaultValue": "https://quu-ea-tst-da-key-vault.vault.azure.net/secrets/"
					},
					"SID": {
						"type": "string",
						"defaultValue": "Ixom-AccessCode"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "Ixom-UserName"
					},
					"SecretPasswordName": {
						"type": "string",
						"defaultValue": "Ixom-PIN"
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "\""
					}
				},
				"variables": {
					"Url": {
						"type": "String"
					},
					"Url_variable": {
						"type": "String"
					},
					"url_array": {
						"type": "Array"
					},
					"url_param": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HTTP_DelimitedText')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_MySQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_MySQL",
											"type": "DatasetReference",
											"parameters": {
												"Databasename": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												},
												"Servername": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterFullLoad",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource",
											"query": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_MySQL",
											"type": "DatasetReference",
											"parameters": {
												"Databasename": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												},
												"Servername": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List} from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere\n@{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' \nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}'\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_MySQL",
											"type": "DatasetReference",
											"parameters": {
												"Databasename": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												},
												"Servername": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterDelta",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DeltaTargetTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_MySQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Oracle_Delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "lkp_getlocaltime",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DIU and DCP variables for Intial Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Extract Source To Blob Delete",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set Blob File Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(equals(pipeline().parameters.CheckForDeletes, '1'), concat(toLower(variables('BlobFileType')), '_full'), '')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "parquet_full",
									"activities": [
										{
											"name": "ParquetFullCopyToBlob",
											"description": "Full Copy from source table into blob storage",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "select @{replace(replace(pipeline().parameters.BusinessKeyList,'[','TO_CHAR('),']',')')}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
														"type": "Expression"
													},
													"partitionOption": "None",
													"convertDecimalToInteger": false
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"parallelCopies": {
													"value": "@variables('MaxCopyDCP')",
													"type": "Expression"
												},
												"dataIntegrationUnits": {
													"value": "@variables('MaxCopyDIU')",
													"type": "Expression"
												}
											},
											"inputs": [
												{
													"referenceName": "DS_Oracle_Framework",
													"type": "DatasetReference",
													"parameters": {
														"HostName": {
															"value": "@pipeline().parameters.Host_Name",
															"type": "Expression"
														},
														"PortNo": {
															"value": "@pipeline().parameters.Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@pipeline().parameters.SID",
															"type": "Expression"
														},
														"UserName": {
															"value": "@pipeline().parameters.UserName",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@pipeline().parameters.SecretPasswordName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_ABLB_EDWDiscovery_Delta_Parquet_Sink",
													"type": "DatasetReference",
													"parameters": {
														"FolderPath": {
															"value": "@pipeline().parameters.Data_Destination_Folder_Path_DeleteProcess",
															"type": "Expression"
														},
														"TargetFileName": {
															"value": "@concat(pipeline().parameters.Data_Destination_File_Name, '_source',pipeline().parameters.File_Name_Ext)",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "csv_full",
									"activities": [
										{
											"name": "CSVFullCopyToBlob",
											"description": "Full Copy from source table into blob storage",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "OracleSource",
													"oracleReaderQuery": {
														"value": "select @{replace(replace(pipeline().parameters.BusinessKeyList,'[','TO_CHAR('),']',')')}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
														"type": "Expression"
													},
													"partitionOption": "None",
													"convertDecimalToInteger": false
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".csv"
													}
												},
												"enableStaging": false,
												"parallelCopies": {
													"value": "@variables('MaxCopyDCP')",
													"type": "Expression"
												},
												"dataIntegrationUnits": {
													"value": "@variables('MaxCopyDIU')",
													"type": "Expression"
												}
											},
											"inputs": [
												{
													"referenceName": "DS_Oracle_OnPrem",
													"type": "DatasetReference",
													"parameters": {
														"HostName": {
															"value": "@pipeline().parameters.Host_Name",
															"type": "Expression"
														},
														"PortNo": {
															"value": "@pipeline().parameters.Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@pipeline().parameters.SID",
															"type": "Expression"
														},
														"UserName": {
															"value": "@pipeline().parameters.UserName",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@pipeline().parameters.SecretPasswordName",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_ABLB_Datalanding",
													"type": "DatasetReference",
													"parameters": {
														"FolderPath": {
															"value": "@pipeline().parameters.Data_Destination_Folder_Path_DeleteProcess",
															"type": "Expression"
														},
														"TargetFileName": {
															"value": "@concat(pipeline().parameters.Data_Destination_File_Name, '_source',pipeline().parameters.File_Name_Ext)",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@pipeline().parameters.QuoteCharacter",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "Set Blob File Type",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_getlocaltime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "BlobFileType",
							"value": {
								"value": "@split(pipeline().parameters.File_Name_Ext, '.')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DIU and DCP variables for Intial Load",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.IsInitialLoad, '1'), true, false)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Max DIU - Daily Load",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxCopyDIU",
										"value": {
											"value": "@pipeline().parameters.MaxDailyLoadDataIntegrationUnit",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Max DCP - Daily Load",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Max DIU - Daily Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxCopyDCP",
										"value": {
											"value": "@pipeline().parameters.MaxDailyLoadDegreeOfCopyParallelism",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Max DIU - Initial Load",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxCopyDIU",
										"value": {
											"value": "@pipeline().parameters.MaxInitialLoadDataIntegrationUnit",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Max DCP - Initial Load",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Max DIU - Initial Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxCopyDCP",
										"value": {
											"value": "@pipeline().parameters.MaxInitialLoadDegreeOfCopyParallelism",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"BlobContainer": {
						"type": "string"
					},
					"BusinessKeyList": {
						"type": "string"
					},
					"DeltaTargetDbName": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"AzureTargetTableName": {
						"type": "string"
					},
					"DeltaStagingTableParquetFilePath": {
						"type": "string"
					},
					"DeleteProcessCompletionDTM": {
						"type": "string"
					},
					"DeltaStagingDbName": {
						"type": "string"
					},
					"DeltaStageTableName": {
						"type": "string"
					},
					"AzureSqlTempDeleteTableName": {
						"type": "string"
					},
					"Host_Name": {
						"type": "string"
					},
					"Port_No": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"databricksclustername": {
						"type": "string"
					},
					"databricksclusterid": {
						"type": "string"
					},
					"databrickssecretname": {
						"type": "string"
					},
					"CheckForDeletes": {
						"type": "string"
					},
					"File_Name_DateTime_Ind": {
						"type": "string"
					},
					"Data_Destination_Folder_Path_DeleteProcess": {
						"type": "string"
					},
					"SourceId": {
						"type": "string"
					},
					"IsInitialLoad": {
						"type": "int"
					},
					"MaxInitialLoadDataIntegrationUnit": {
						"type": "string"
					},
					"MaxInitialLoadDegreeOfCopyParallelism": {
						"type": "string"
					},
					"MaxDailyLoadDataIntegrationUnit": {
						"type": "string"
					},
					"MaxDailyLoadDegreeOfCopyParallelism": {
						"type": "string"
					}
				},
				"variables": {
					"BlobFileType": {
						"type": "String"
					},
					"MaxCopyDIU": {
						"type": "String"
					},
					"MaxCopyDCP": {
						"type": "String"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-25T05:00:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_Oracle_Framework')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_EDWDiscovery_Delta_Parquet_Sink')]",
				"[concat(variables('factoryId'), '/datasets/DS_Oracle_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Salesforce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "ADF_DS_SF",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure2",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "ADF_DS_SF",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List} from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere \n@{pipeline().parameters.Data_Source_WaterMarkColumn} > @{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}Z\nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= @{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}Z",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "ADF_DS_SF",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure1",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADF_DS_SF')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterFullLoad",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": "urbanutilities\\svc-EBI_PRDC04_AGT",
												"SecretPasswordName": "SVC-EBI-PRDC04-AGT"
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List} from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere\n@{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' \nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}'\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterDelta",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DeltaTargetTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_EDWDiscovery_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_json_to_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_srcLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.SourceLandingContainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyjsonFilesAndExecutecopy",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy_dataTocsvFile",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyFileToArchive_Empty",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@pipeline().parameters.TargetBlobFilePath",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{variables('FileName')}",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.TargetBlobContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.TargetBlobFilePath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.TargetBlobContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.TargetBlobFilePath,'/Archived/')\n",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile_Empty",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.TargetBlobContainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.TargetBlobFilePath",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{variables('FileName')}",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Convert_jsonToCSV",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "GetSchemaMapping",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": true,
													"secureInput": true
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "JsonSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "JsonReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"value": "@json(activity('GetSchemaMapping').output.firstrow.json_output)",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_srclanding_json_source",
														"type": "DatasetReference",
														"parameters": {
															"Sourceblobfoldername": {
																"value": "@concat(pipeline().parameters.SourceLandingContainer,'/',pipeline().parameters.SourceFilePath)",
																"type": "Expression"
															},
															"Sourceblobfilename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_Datalanding",
														"type": "DatasetReference",
														"parameters": {
															"FolderPath": {
																"value": "@pipeline().parameters.TargetBlobFilePath",
																"type": "Expression"
															},
															"TargetFileName": {
																"value": "@replace(variables('FileName'),'json','csv')",
																"type": "Expression"
															},
															"ColumnDelimiter": {
																"value": "@pipeline().parameters.ColumnDelimiter",
																"type": "Expression"
															},
															"QuoteCharacter": {
																"value": "@pipeline().parameters.QuoteCharacter",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "GetSchemaMapping",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[ETL].[usp_getColumnMapping_json_to_csv]",
														"storedProcedureParameters": {
															"additional_param": {
																"type": "String",
																"value": {
																	"value": "@pipeline().parameters.Additional_MappingParam",
																	"type": "Expression"
																}
															},
															"TableID": {
																"type": "Int32",
																"value": {
																	"value": "@pipeline().parameters.tableID",
																	"type": "Expression"
																}
															}
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Archive_proccessed_jsons",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Convert_jsonToCSV",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "JsonSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "JsonReadSettings"
														}
													},
													"sink": {
														"type": "JsonSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "JsonWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_srclanding_json_source",
														"type": "DatasetReference",
														"parameters": {
															"Sourceblobfoldername": {
																"value": "@concat(pipeline().parameters.SourceLandingContainer,'/',pipeline().parameters.SourceFilePath)",
																"type": "Expression"
															},
															"Sourceblobfilename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_srclanding_json_source",
														"type": "DatasetReference",
														"parameters": {
															"Sourceblobfoldername": {
																"value": "@concat(pipeline().parameters.SourceLandingContainer,'/',pipeline().parameters.SourceFilePath,'\\Archived')",
																"type": "Expression"
															},
															"Sourceblobfilename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete_files_after_archival",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Archive_proccessed_jsons",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_srclanding_json_source",
														"type": "DatasetReference",
														"parameters": {
															"Sourceblobfoldername": {
																"value": "@concat(pipeline().parameters.SourceLandingContainer,'/',pipeline().parameters.SourceFilePath)",
																"type": "Expression"
															},
															"Sourceblobfilename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(AND(greater(variables('FileSize'),'0'), contains(variables('FileName'),'.json') ),true,false)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_srclanding_json_source",
											"type": "DatasetReference",
											"parameters": {
												"Sourceblobfoldername": {
													"value": "@concat(pipeline().parameters.SourceLandingContainer,'/',pipeline().parameters.SourceFilePath)",
													"type": "Expression"
												},
												"Sourceblobfilename": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "JsonReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceLandingContainer": {
						"type": "string"
					},
					"SourceFilePath": {
						"type": "string"
					},
					"sourceID": {
						"type": "string"
					},
					"tableID": {
						"type": "string"
					},
					"TargetBlobFilePath": {
						"type": "string"
					},
					"TargetBlobFileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"TargetBlobContainer": {
						"type": "string"
					},
					"Additional_MappingParam": {
						"type": "string"
					}
				},
				"variables": {
					"FileName": {
						"type": "String"
					},
					"processfile": {
						"type": "Boolean"
					},
					"FileSize": {
						"type": "String"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_srcLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_srclanding_json_source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_Migration_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_DataLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.blobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.blobfolderpath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyCsvFilesAndExecuteDatabricks",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckForCDCMigration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "executedatabricksnotebook",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyFileToArchive_Empty",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@{pipeline().parameters.blobfolderpath}",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{variables('FileName')}",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.blobfolderpath,'/Archived/')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile_Empty",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{variables('FileName')}",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "ETL_Merge",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@pipeline().parameters.ETLMergeNotebookPath",
														"type": "Expression"
													},
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.blobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														},
														"columnlist": {
															"value": "@pipeline().parameters.columnlist",
															"type": "Expression"
														},
														"businesskeylist": {
															"value": "@pipeline().parameters.businesskeylist",
															"type": "Expression"
														},
														"deltastagingdbname": {
															"value": "@pipeline().parameters.deltastagingdbname",
															"type": "Expression"
														},
														"deltatargetdbname": {
															"value": "@pipeline().parameters.deltatargetdbname",
															"type": "Expression"
														},
														"deltastagetablename": {
															"value": "@pipeline().parameters.deltastagetablename",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@base64(pipeline().parameters.QuoteCharacter)",
															"type": "Expression"
														},
														"azuresqldbetllastmodifieddtm": {
															"value": "@formatDateTime(pipeline().parameters.azuresqldbetllastmodifieddtm,'yyyy-MM-dd hh:mm:ss.fff')",
															"type": "Expression"
														},
														"tableid": {
															"value": "@pipeline().parameters.tableid",
															"type": "Expression"
														},
														"deltastagingtableparquetfilepath": {
															"value": "@pipeline().parameters.deltastagingtableparquetfilepath",
															"type": "Expression"
														},
														"DbHostName": {
															"value": "@pipeline().parameters.DbHostName",
															"type": "Expression"
														},
														"azuresqltemptablename": {
															"value": "@pipeline().parameters.azuresqltemptablename",
															"type": "Expression"
														},
														"RowExecutionID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"RowSource": {
															"value": "@pipeline().parameters.RowSource",
															"type": "Expression"
														},
														"skipcsvrows": {
															"value": "@pipeline().parameters.skipcsvrows",
															"type": "Expression"
														},
														"ETLMergeNotebookPath": {
															"value": "@pipeline().parameters.ETLMergeNotebookPath",
															"type": "Expression"
														},
														"skipchangedset": {
															"value": "@if(variables('CDCRun'),'1','0')",
															"type": "Expression"
														},
														"CDCMigrationInd": {
															"value": "@string(coalesce(pipeline().parameters.CDCMigrationInd,0))",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": {
															"value": "@pipeline().parameters.databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@pipeline().parameters.databrickssecretname",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "SqlServerStoredProcedureMergeData",
												"description": "execute merge store procedure to merge data from temp into target table in azure sql db",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL_Merge",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@pipeline().parameters.StoredProcNameMergeAzuresqltable",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"table_source": {
															"value": {
																"value": "@pipeline().parameters.azuresqltemptablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"table_target": {
															"value": {
																"value": "@pipeline().parameters.azuresqltargettablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"tableid": {
															"value": {
																"value": "@pipeline().parameters.tableid",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "CopyFileToArchive",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "SqlServerStoredProcedureMergeData",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@{pipeline().parameters.blobfolderpath}",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{variables('FileName')}",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.blobfolderpath,'/Archived/')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{variables('FileName')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "TruncateTempTable",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "DeleteSourceFile",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "sp_executesql",
													"storedProcedureParameters": {
														"stmt": {
															"value": {
																"value": "truncate table @{pipeline().parameters.azuresqltemptablename}",
																"type": "Expression"
															}
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(AND(greater(variables('FileSize'),'0'), contains(variables('FileName'),'.csv') ),true,false)\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_DataLanding_FizeSize",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.blobcontainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.blobfolderpath",
													"type": "Expression"
												},
												"file": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckForCDCMigration",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(pipeline().parameters.CDCMigrationInd,1),not(equals(pipeline().parameters.CDCMigrationCompleted,1)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ETLMergeChangeset",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/edw_discovery/ETL_Merge_Changedset",
										"baseParameters": {
											"blobcontainer": {
												"value": "@pipeline().parameters.blobcontainer",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@concat(pipeline().parameters.CDCBlobPath,',',pipeline().parameters.deltastagetablename,'.csv')",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@pipeline().parameters.columnlist",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@pipeline().parameters.businesskeylist",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@pipeline().parameters.deltastagingdbname",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@pipeline().parameters.deltatargetdbname",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@pipeline().parameters.deltastagetablename",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@pipeline().parameters.storageaccount",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@pipeline().parameters.ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@base64(pipeline().parameters.QuoteCharacter)",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@pipeline().parameters.azuresqldbetllastmodifieddtm",
												"type": "Expression"
											},
											"tableid": {
												"value": "@pipeline().parameters.tableid",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@pipeline().parameters.deltastagingtableparquetfilepath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@pipeline().parameters.DbHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@pipeline().parameters.RowSource",
												"type": "Expression"
											},
											"RowExecutionID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"skipcsvrows": {
												"value": "@pipeline().parameters.skipcsvrows",
												"type": "Expression"
											},
											"SourceTableName": {
												"value": "@pipeline().parameters.SourceTableName",
												"type": "Expression"
											},
											"CDCMigrationInd": {
												"value": "@string(coalesce(pipeline().parameters.CDCMigrationInd,0))",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DBR_ADF_Job_Cluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"databricksclusterid": {
												"value": "@pipeline().parameters.databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@pipeline().parameters.databrickssecretname",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "UpdateCDCMigrationInd",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ETLMergeChangeset",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_CDCMigrationCompleted]",
										"storedProcedureParameters": {
											"tableid": {
												"value": {
													"value": "@pipeline().parameters.tableid",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SetCDCRun",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "UpdateCDCMigrationInd",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "CDCRun",
										"value": {
											"value": "@bool(1)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"storageaccount": {
						"type": "string"
					},
					"blobfilename": {
						"type": "string"
					},
					"columnlist": {
						"type": "string"
					},
					"businesskeylist": {
						"type": "string"
					},
					"deltastagingdbname": {
						"type": "string"
					},
					"deltatargetdbname": {
						"type": "string"
					},
					"deltastagetablename": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"azuresqldbetllastmodifieddtm": {
						"type": "string"
					},
					"tableid": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"azuresqltemptablename": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					},
					"deltastagingtableparquetfilepath": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"azuresqltargettablename": {
						"type": "string"
					},
					"skipcsvrows": {
						"type": "string",
						"defaultValue": "0"
					},
					"ETLMergeNotebookPath": {
						"type": "string",
						"defaultValue": "/edw_discovery/ETL_Merge"
					},
					"StoredProcNameMergeAzuresqltable": {
						"type": "string",
						"defaultValue": "ETL.[usp_merge_azuresqltable]"
					},
					"databricksclustername": {
						"type": "string",
						"defaultValue": "ADF_Job_Cluster"
					},
					"databricksclusterid": {
						"type": "string",
						"defaultValue": "0827-051915-duchy366"
					},
					"CDCMigrationCompleted": {
						"type": "int"
					},
					"CDCBlobPath": {
						"type": "string"
					},
					"SourceTableName": {
						"type": "string"
					},
					"CDCMigrationInd": {
						"type": "int"
					},
					"databrickssecretname": {
						"type": "string"
					}
				},
				"variables": {
					"processfile": {
						"type": "Boolean"
					},
					"FileNames": {
						"type": "Array"
					},
					"FileName": {
						"type": "String"
					},
					"FileSize": {
						"type": "String"
					},
					"CDCRun": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FizeSize')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_Migration_SourceToBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckCDCMigrationCompleted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingFull",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": "urbanutilities\\svc-EBI_PRDC04_AGT",
												"SecretPasswordName": "SVC-EBI-PRDC04-AGT"
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\n from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere\n@{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' \nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}'\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingDelta",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckCDCMigrationCompleted",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(pipeline().parameters.CDCMigrationInd,1),not(equals(pipeline().parameters.CDCMigrationCompleted,1)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyCDCData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT  \n\t Case WHEN [__$operation] = 1 THEN 'DELETE'\n\t        WHEN [__$operation] = 2 THEN 'INSERT'\n\t\t\tWHEN [__$operation] = 4 THEN ' UPDATE' END as ROW_OPERATION\n    ,@{pipeline().parameters.Source_Column_List}\n  FROM @{concat('cdc.',pipeline().parameters.DeltaTargetTableName,'_CT',' ',  pipeline().parameters.Data_Destination_File_Name)}\n  WHERE [__$operation] !=3\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,'/cdc')",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@concat(pipeline().parameters.DeltaTargetTableName,pipeline().parameters.File_Name_Ext)",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DeltaTargetTableName": {
						"type": "string"
					},
					"CDCMigrationCompleted": {
						"type": "int"
					},
					"CDCMigrationInd": {
						"type": "int"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_EDWDiscovery_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_PE_HttpRequest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Http Requests",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[HTTPRequest_GetBySource]",
								"storedProcedureParameters": {
									"SourceCategory": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceCategory",
											"type": "Expression"
										}
									},
									"SourceCategoryType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceCategoryType",
											"type": "Expression"
										}
									},
									"SourceId": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each HTTP Request",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Http Requests",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Http Requests').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "HTTP Output Type Switch",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If Teams Message",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().HTTPOutputType",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "JSON",
												"activities": [
													{
														"name": "HTTP Request",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": true,
															"secureInput": true
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "HttpReadSettings",
																	"requestMethod": {
																		"value": "@{item().HTTPMethod}",
																		"type": "Expression"
																	},
																	"additionalHeaders": {
																		"value": "@{item().HTTPHeader}",
																		"type": "Expression"
																	},
																	"requestBody": {
																		"value": "@{item().HTTPBody}",
																		"type": "Expression"
																	},
																	"requestTimeout": {
																		"value": "@{item().RequestTimeout}",
																		"type": "Expression"
																	}
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"dataset": {
																"referenceName": "DS_HTTP_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"BaseURL": {
																		"value": "@{item().HTTPURL}",
																		"type": "Expression"
																	}
																}
															},
															"firstRowOnly": {
																"value": "@item().FirstRowOnly",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"value": "DelimitedText",
												"activities": [
													{
														"name": "HTTP Request_CSV",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": true,
															"secureInput": true
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "HttpReadSettings",
																	"requestMethod": {
																		"value": "@{item().HTTPMethod}",
																		"type": "Expression"
																	},
																	"additionalHeaders": {
																		"value": "@{item().HTTPHeader}",
																		"type": "Expression"
																	},
																	"requestBody": {
																		"value": "@{if(equals(item().HTTPBody,'ADFReplaced'),variables('RequestBody'),item().HTTPBody)}",
																		"type": "Expression"
																	},
																	"requestTimeout": {
																		"value": "@{item().RequestTimeout}",
																		"type": "Expression"
																	}
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"dataset": {
																"referenceName": "DS_HTTP_DelimitedText",
																"type": "DatasetReference",
																"parameters": {
																	"BaseURL": {
																		"value": "@item().HTTPURL",
																		"type": "Expression"
																	}
																}
															},
															"firstRowOnly": {
																"value": "@item().FirstRowOnly",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "If Teams Message",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@{bool(if(and(equals(item().Category,'Teams'),equals(item().HTTPBody,'ADFReplaced')),true,false))}",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set Teams Message",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "RequestBody",
													"value": {
														"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"0076D7\",\n    \"summary\": \"Pipeline status alert message​​​​\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"@{concat('Source:',item().SourceName,'|Status:', pipeline().parameters.SourceCategoryType,'|Trigger:', pipeline().parameters.PipelineTriggerName, '|Start:',formatDateTime(addHours(pipeline().parameters.PipelineStartTime,10), 'yyyy-MM-dd HH:mm:ss'),'|End:',formatDateTime(addHours(pipeline().parameters.PipelineEndTime,10), 'yyyy-MM-dd HH:mm:ss'))}\",\n            \"markdown\": true\n        }\n    ]\n}",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set Error Array_Post Teams",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "If Teams Message",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorMessage",
										"value": {
											"value": "@{concat('HTTPTrigger-Switch: ',activity('If Teams Message').error['Message'])}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Error Array",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "HTTP Output Type Switch",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorMessage",
										"value": {
											"value": "@{concat('HTTPTrigger-Switch: ',activity('HTTP Output Type Switch').error['Message'])}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "For Each HTTP Request",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@{bool(if(empty(variables('ErrorMessage')),true,false))}",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Raise Error",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@{replace(replace(replace(replace(string(variables('ErrorMessage')),'[',''),']',''),'\"',''),',|','\\n')}",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceID": {
						"type": "int"
					},
					"SourceCategoryType": {
						"type": "string"
					},
					"PipelineRunId": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					},
					"PipelineStartTime": {
						"type": "string"
					},
					"PipelineMessage": {
						"type": "string"
					},
					"PipelineEndTime": {
						"type": "string"
					},
					"PipelineTriggerName": {
						"type": "string"
					},
					"PipelineTriggerId": {
						"type": "string"
					},
					"SourceCategory": {
						"type": "string"
					}
				},
				"variables": {
					"RequestBody": {
						"type": "String"
					},
					"ErrorMessage": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_HTTP_JSON')]",
				"[concat(variables('factoryId'), '/datasets/DS_HTTP_DelimitedText')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_TRFM_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_DataLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.blobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.blobfolderpath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyCsvFilesAndExecuteDatabricks",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "executedatabricksnotebook",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyFileToArchive_Empty",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@{pipeline().parameters.blobfolderpath}",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{variables('FileName')}",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.blobfolderpath,'/Archived/')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile_Empty",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{variables('FileName')}",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "ETL_Merge",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 1,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@pipeline().parameters.ETLMergeNotebookPath",
														"type": "Expression"
													},
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.blobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														},
														"columnlist": {
															"value": "@pipeline().parameters.columnlist",
															"type": "Expression"
														},
														"businesskeylist": {
															"value": "@pipeline().parameters.businesskeylist",
															"type": "Expression"
														},
														"deltastagingdbname": {
															"value": "@pipeline().parameters.deltastagingdbname",
															"type": "Expression"
														},
														"deltatargetdbname": {
															"value": "@pipeline().parameters.deltatargetdbname",
															"type": "Expression"
														},
														"deltastagetablename": {
															"value": "@pipeline().parameters.deltastagetablename",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@base64(pipeline().parameters.QuoteCharacter)",
															"type": "Expression"
														},
														"azuresqldbetllastmodifieddtm": {
															"value": "@formatDateTime(pipeline().parameters.azuresqldbetllastmodifieddtm,'yyyy-MM-dd HH:mm:ss.fff')",
															"type": "Expression"
														},
														"tableid": {
															"value": "@pipeline().parameters.tableid",
															"type": "Expression"
														},
														"deltastagingtableparquetfilepath": {
															"value": "@pipeline().parameters.deltastagingtableparquetfilepath",
															"type": "Expression"
														},
														"DbHostName": {
															"value": "@pipeline().parameters.DbHostName",
															"type": "Expression"
														},
														"azuresqltemptablename": {
															"value": "@pipeline().parameters.azuresqltemptablename",
															"type": "Expression"
														},
														"RowExecutionID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"RowSource": {
															"value": "@pipeline().parameters.RowSource",
															"type": "Expression"
														},
														"skipcsvrows": {
															"value": "@pipeline().parameters.skipcsvrows",
															"type": "Expression"
														},
														"ETLMergeNotebookPath": {
															"value": "@pipeline().parameters.ETLMergeNotebookPath",
															"type": "Expression"
														},
														"skipchangedset": {
															"value": "@pipeline().parameters.skipchangedset",
															"type": "Expression"
														},
														"skipbottomrows": {
															"value": "@pipeline().parameters.skipbottomrows",
															"type": "Expression"
														},
														"incrementalloadind": {
															"value": "@pipeline().parameters.incrementalloadind",
															"type": "Expression"
														},
														"checkfordeletesind": {
															"value": "@pipeline().parameters.checkfordeletesind",
															"type": "Expression"
														},
														"sourcecolumnlist": {
															"value": "@pipeline().parameters.sourcecolumnlist",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": {
															"value": "@pipeline().parameters.databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@pipeline().parameters.databrickssecretname",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "SqlServerStoredProcedureMergeData",
												"description": "execute merge store procedure to merge data from temp into target table in azure sql db",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL_Merge",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@pipeline().parameters.StoredProcNameMergeAzuresqltable",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"table_source": {
															"value": {
																"value": "@pipeline().parameters.azuresqltemptablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"table_target": {
															"value": {
																"value": "@pipeline().parameters.azuresqltargettablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"tableid": {
															"value": {
																"value": "@pipeline().parameters.tableid",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "CopyFileToArchive",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "SqlServerStoredProcedureMergeData",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@{pipeline().parameters.blobfolderpath}",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{variables('FileName')}",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.blobfolderpath,'/Archived/')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{variables('FileName')}",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(and(greater(variables('FileSize'),'0'), or(contains(variables('FileName'),'.csv'),contains(variables('FileName'),'.parquet') )),true,false)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_DataLanding_FizeSize",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.blobcontainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.blobfolderpath",
													"type": "Expression"
												},
												"file": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"storageaccount": {
						"type": "string"
					},
					"blobfilename": {
						"type": "string"
					},
					"columnlist": {
						"type": "string"
					},
					"businesskeylist": {
						"type": "string"
					},
					"deltastagingdbname": {
						"type": "string"
					},
					"deltatargetdbname": {
						"type": "string"
					},
					"deltastagetablename": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"azuresqldbetllastmodifieddtm": {
						"type": "string"
					},
					"tableid": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"azuresqltemptablename": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					},
					"deltastagingtableparquetfilepath": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"azuresqltargettablename": {
						"type": "string"
					},
					"skipcsvrows": {
						"type": "string",
						"defaultValue": "0"
					},
					"skipbottomrows": {
						"type": "string",
						"defaultValue": "0"
					},
					"ETLMergeNotebookPath": {
						"type": "string",
						"defaultValue": "/edw_discovery/ETL_Merge"
					},
					"StoredProcNameMergeAzuresqltable": {
						"type": "string",
						"defaultValue": "ETL.[usp_merge_azuresqltable]"
					},
					"databricksclustername": {
						"type": "string",
						"defaultValue": "ADF_Job_Cluster"
					},
					"databricksclusterid": {
						"type": "string",
						"defaultValue": "0827-051915-duchy366"
					},
					"SourceTableName": {
						"type": "string"
					},
					"skipchangedset": {
						"type": "string",
						"defaultValue": "0"
					},
					"databrickssecretname": {
						"type": "string"
					},
					"checkfordeletesind": {
						"type": "string",
						"defaultValue": "0"
					},
					"incrementalloadind": {
						"type": "string",
						"defaultValue": "0"
					},
					"sourcecolumnlist": {
						"type": "string"
					}
				},
				"variables": {
					"processfile": {
						"type": "Boolean"
					},
					"FileNames": {
						"type": "Array"
					},
					"FileName": {
						"type": "String"
					},
					"FileSize": {
						"type": "String"
					},
					"CDCRun": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-08T01:08:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FizeSize')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_TRFM_BlobToASQL_Delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "CheckSourceRNKFileExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceRNKFileDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetSourceRNKFileDetails').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GenerateSourceDeletedRNKFile",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/edw_discovery/ETL_Create_Delete_File",
										"baseParameters": {
											"blobcontainer": {
												"value": "@pipeline().parameters.BlobContainer",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path_DeleteProcess,',',pipeline().parameters.Data_Destination_File_Name, '_source' ,pipeline().parameters.File_Name_Ext)",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@pipeline().parameters.Source_Column_List",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@pipeline().parameters.BusinessKeyList",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@pipeline().parameters.DeltaTargetDbName",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@pipeline().parameters.StorageAccount",
												"type": "Expression"
											},
											"columndelimiter": {
												"value": "@pipeline().parameters.ColumnDelimiter",
												"type": "Expression"
											},
											"quotecharacter": {
												"value": "@base64(pipeline().parameters.QuoteCharacter)",
												"type": "Expression"
											},
											"rowsource": {
												"value": "@pipeline().parameters.RowSource",
												"type": "Expression"
											},
											"dbhostname": {
												"value": "@pipeline().parameters.DbHostName",
												"type": "Expression"
											},
											"skipcsvrows": "0",
											"azuretargettablename": {
												"value": "@pipeline().parameters.AzureTargetTableName",
												"type": "Expression"
											},
											"filetype": {
												"value": "@toLower(variables('BlobFileType'))",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DBR_ADF_Job_Cluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"databricksclusterid": {
												"value": "@pipeline().parameters.databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@pipeline().parameters.databrickssecretname",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "GetSourceRNKFileDetails",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set Blob File Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_ABLB_DataLanding_Binary_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.BlobContainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@replace(pipeline().parameters.Data_Destination_Folder_Path_DeleteProcess, pipeline().parameters.BlobContainer, '')",
										"type": "Expression"
									},
									"blobfilename": {
										"value": "@concat(\npipeline().parameters.Data_Destination_File_Name, '_source'\n,pipeline().parameters.File_Name_Ext)\n",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "GetSourceDeletedRNKFileDetails",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "CheckSourceRNKFileExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_ABLB_DataLanding_Binary_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.BlobContainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@replace(pipeline().parameters.Data_Destination_Folder_Path_DeleteProcess, pipeline().parameters.BlobContainer, '')",
										"type": "Expression"
									},
									"blobfilename": {
										"value": "@concat(\npipeline().parameters.Data_Destination_File_Name, '_source_deleted_records'\n,pipeline().parameters.File_Name_Ext)\n",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "CheckDeletedRNKFileExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceDeletedRNKFileDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetSourceDeletedRNKFileDetails').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteRecordsFromDeltaTable",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/edw_discovery/ETL_Merge_Delete",
										"baseParameters": {
											"blobcontainer": {
												"value": "@pipeline().parameters.BlobContainer",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path_DeleteProcess,',',pipeline().parameters.Data_Destination_File_Name, '_source_deleted_records' ,pipeline().parameters.File_Name_Ext)",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@pipeline().parameters.Source_Column_List",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@pipeline().parameters.BusinessKeyList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@pipeline().parameters.DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@pipeline().parameters.DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@pipeline().parameters.DeltaStageTableName",
												"type": "Expression"
											},
											"azuresqltempdeletetablename": {
												"value": "@pipeline().parameters.AzureSqlTempDeleteTableName",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@pipeline().parameters.StorageAccount",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@pipeline().parameters.ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@base64(pipeline().parameters.QuoteCharacter)",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@pipeline().parameters.DeleteProcessCompletionDTM",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@pipeline().parameters.DeltaStagingTableParquetFilePath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@pipeline().parameters.DbHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@pipeline().parameters.RowSource",
												"type": "Expression"
											},
											"skipcsvrows": "0",
											"azuresqltargettablename": {
												"value": "@pipeline().parameters.AzureTargetTableName",
												"type": "Expression"
											},
											"filetype": {
												"value": "@toLower(variables('BlobFileType'))",
												"type": "Expression"
											},
											"SourceId": {
												"value": "@string(pipeline().parameters.SourceId)",
												"type": "Expression"
											},
											"TableId": {
												"value": "@string(pipeline().parameters.TableID)",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DBR_ADF_Job_Cluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"databricksclusterid": {
												"value": "@pipeline().parameters.databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@pipeline().parameters.databrickssecretname",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteRecordsFromAzureSQLTable",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeleteRecordsFromDeltaTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_delete_from_azuresqltable]",
										"storedProcedureParameters": {
											"sourceid": {
												"value": {
													"value": "@pipeline().parameters.SourceId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"table_source": {
												"value": {
													"value": "@pipeline().parameters.AzureSqlTempDeleteTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_target": {
												"value": {
													"value": "@pipeline().parameters.AzureTargetTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableid": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Set Blob File Type",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "BlobFileType",
							"value": {
								"value": "@split(pipeline().parameters.File_Name_Ext, '.')[1]",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"BlobContainer": {
						"type": "string"
					},
					"BusinessKeyList": {
						"type": "string"
					},
					"DeltaTargetDbName": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"AzureTargetTableName": {
						"type": "string"
					},
					"DeltaStagingTableParquetFilePath": {
						"type": "string"
					},
					"DeleteProcessCompletionDTM": {
						"type": "string"
					},
					"DeltaStagingDbName": {
						"type": "string"
					},
					"DeltaStageTableName": {
						"type": "string"
					},
					"AzureSqlTempDeleteTableName": {
						"type": "string"
					},
					"Host_Name": {
						"type": "string"
					},
					"Port_No": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"databricksclustername": {
						"type": "string"
					},
					"databricksclusterid": {
						"type": "string"
					},
					"databrickssecretname": {
						"type": "string"
					},
					"CheckForDeletes": {
						"type": "string"
					},
					"File_Name_DateTime_Ind": {
						"type": "string"
					},
					"Data_Destination_Folder_Path_DeleteProcess": {
						"type": "string"
					},
					"SourceId": {
						"type": "string"
					},
					"IsInitialLoad": {
						"type": "int"
					}
				},
				"variables": {
					"BlobFileType": {
						"type": "String"
					},
					"MaxCopyDIU": {
						"type": "String"
					},
					"MaxCopyDCP": {
						"type": "String"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-25T05:00:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_ABLB_DataLanding_Binary_FileExists')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_TRFM_TransformDateForEachtable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_DataLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.targetblobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.targetblobfilefolder",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyCsvFilesAndExecuteDatabricks",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "executedatabricksnotebook",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "MoveEmptyFile",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": "/edw_discovery/FileTransfer",
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.targetblobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": {
															"value": "@pipeline().parameters.databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@pipeline().parameters.databrickssecretname",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "ETL_Change_DateFormat",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": "/edw_discovery/ETL_Change_DateFormat",
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.targetblobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														},
														"columnlist": {
															"value": "@pipeline().parameters.sourcecolumnlist",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@base64(pipeline().parameters.QuoteCharacter)",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": {
															"value": "@pipeline().parameters.databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@pipeline().parameters.databrickssecretname",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(AND(greater(variables('FileSize'),'0'), contains(variables('FileName'),'.csv') ),true,false)\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_DataLanding_FizeSize",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.targetblobcontainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.targetblobfilefolder",
													"type": "Expression"
												},
												"file": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableID": {
						"type": "string",
						"defaultValue": "5166"
					},
					"SourceColumn": {
						"type": "string",
						"defaultValue": "Month_date"
					},
					"targetblobcontainer": {
						"type": "string",
						"defaultValue": "daptiv-datalanding"
					},
					"targetblobfilefolderpath": {
						"type": "string",
						"defaultValue": "daptiv-datalanding/Daptiv/monthly_actuals"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"sourcecolumnlist": {
						"type": "string",
						"defaultValue": "[[External_ID],[Financial_Year],[Months],[Month_Name],[Month_date],[Monthly_Actuals],[Category],[Expenditure_Type]"
					},
					"storageaccount": {
						"type": "string",
						"defaultValue": "quueatstdadlslanding001"
					},
					"targetblobfilefolder": {
						"type": "string",
						"defaultValue": "Daptiv/monthly_actuals"
					},
					"databricksclusterid": {
						"type": "string",
						"defaultValue": "1202-224447-p84nrrmi"
					},
					"databrickssecretname": {
						"type": "string",
						"defaultValue": "databricks-token"
					},
					"blobfilename": {
						"type": "string",
						"defaultValue": "daptiv-datalanding/Daptiv/monthly_actuals,monthly_actuals.csv"
					}
				},
				"variables": {
					"processfile": {
						"type": "Boolean"
					},
					"FileNames": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"FileSize": {
						"type": "String"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FizeSize')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_TRFM_TransformSourceDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of Columns for Date Transformation",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSelect SDTD.TableID \n\t\t,SDTD.SourceColumn\n\t\t,STD.targetblobfilename\n\t\t,STD.targetblobcontainer \n\t\t,case when SS.sourcename = 'Daptiv' then 'Daptiv/' + STD.targetblobfilename else STD.targetblobfilename end as targetblobfilefolder \n\t\t,replace(STD.targetblobfilepath,'/transformed','') as targetblobfilefolderpath\n\t\t,STD.ColumnDelimiter\n\t\t,STD.QuoteCharacter\n\t\t,replace(STD.targetblobfilepath,'/transformed','') as blobfilename /* Keeping the blobfile name as targetblobcontainer. The actual filename gets appended to it at execute notebook - ETL_Change_DateFormat step in the \n\t\tPL_Framework_TRFM_TransformDateForEachtable pipeline*/\n\t\t,STD.sourcecolumnlist\n\t\t,STD.storageaccount\n\t\t,SS.databricksclusterid\n\t\t,SS.databrickssecretname\nFrom ETL.sourcesystem SS join ETL.sourcetabledetails STD on SS.sourceid = STD.sourceid\njoin ETL.SourceDateTransformationDetails SDTD on SDTD.tableid = STD.tableid \nwhere SS.sourcename = '@{pipeline().parameters.SourceName}'\nand STD.isactive = 1\nand SDTD.isactive = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each date transformation",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Columns for Date Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Columns for Date Transformation').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Execute PL_Framework_TRFM_TransformDateForEachtable",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_TRFM_TransformDateForEachtable",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"SourceColumn": {
												"value": "@item().SourceColumn",
												"type": "Expression"
											},
											"targetblobcontainer": {
												"value": "@item().targetblobcontainer",
												"type": "Expression"
											},
											"targetblobfilefolderpath": {
												"value": "@item().targetblobfilefolderpath",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"sourcecolumnlist": {
												"value": "@item().sourcecolumnlist",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@item().storageaccount",
												"type": "Expression"
											},
											"targetblobfilefolder": {
												"value": "@item().targetblobfilefolder",
												"type": "Expression"
											},
											"databricksclusterid": {
												"value": "@item().databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@item().databrickssecretname",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@item().blobfilename",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Daptiv"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_TRFM_TransformDateForEachtable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GIS_Source_To_ASQL_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_Oracle",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "GIS"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "GIS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_Oracle')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GIS_Source_To_ASQL_SQLServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "GIS_SQLServer_SDUV_SQL"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "GIS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Hydronet_Locations_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Obtain Auth Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Auth-ClientID",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Auth-ClientSecret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "API-URL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://login.hydronet.com/auth/realms/hydronet/protocol/openid-connect/token",
							"method": "POST",
							"headers": {
								"content-type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@{concat('grant_type=client_credentials&client_id=',activity('Auth-ClientID').output.value,'&client_secret=',activity('Auth-ClientSecret').output.value,'&')}",
								"type": "Expression"
							},
							"httpRequestTimeout": "00:10:00"
						}
					},
					{
						"name": "Get Locations",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Obtain Auth Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{concat(activity('API-URL').output.value,'entity/locations/get')}",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('Obtain Auth Token').output.access_token}",
									"type": "Expression"
								},
								"Content-type": "application/json"
							},
							"body": {
								"value": "@{concat('{\"DataSourceCodes\":',pipeline().parameters.DataSources,'}')}",
								"type": "Expression"
							},
							"httpRequestTimeout": "00:10:00"
						}
					},
					{
						"name": "Copy Locations to Blob as CSV",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Locations",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "GetColumnMappings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[Hydronet_GetLocations]",
								"storedProcedureParameters": {
									"JsonString": {
										"type": "String",
										"value": {
											"value": "@replace(string(activity('Get Locations').output.Locations),variables('ReplaceChar'),variables('ReplaceCharWith'))",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@activity('GetColumnMappings').output.firstRow.json_output",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding_IncludeHeader",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].FolderName",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].FileName",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Obtain Destination File Details",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWDiscovery",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "SourceName",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.SourceName",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "DestinationTable",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.DestinationTable",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "/*\nDECLARE @SourceName VARCHAR(100) = 'Hydronet',\n\t\t@DestinationTable VARCHAR(200) = 'Hydronet.Location'\n*/\nDECLARE @SQL NVARCHAR(MAX) = '\nSELECT st.TableId,TargetBlobFilePath AS FolderName, TargetBlobFileName + CASE WHEN st.[File_Name_DateTime_Ind] = 1 THEN ''_'' + CONVERT(VARCHAR(10),dbo.udf_getLocalDTM(),112) ELSE '''' END + TargetBlobFileNameExt AS FileName, QuoteCharacter, ColumnDelimiter\nFROM ETL.SourceTableDetails st\nWHERE EXISTS\n(\n\tSELECT *\n\tFROM ETL.SourceSystem ss\n\tWHERE st.SourceID = ss.SourceID\n\tAND ss.SourceName = @SourceName\n)\nAND AzuresqlTargetTableName = @DestinationTable'\n\nEXEC sp_executesql\t@SQL, \n\t\t\t\t\tN'@SourceName VARCHAR(100), @DestinationTable VARCHAR(200)', \n\t\t\t\t\t@SourceName = @SourceName, \n\t\t\t\t\t@DestinationTable = @DestinationTable"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Auth-ClientID",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{replace(pipeline().parameters.KeyVaultPath,'<secretname>','Hydronet-API-ClientID')}",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Auth-ClientSecret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{replace(pipeline().parameters.KeyVaultPath,'<secretname>','Hydronet-API-ClientSecret')}",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "API-URL",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{replace(pipeline().parameters.KeyVaultPath,'<secretname>','HydroNet-Base-URL')}",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Land to Destination",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Locations to Blob as CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceName": {
									"value": "@pipeline().parameters.SourceName",
									"type": "Expression"
								},
								"OnlySourceToBlob": false,
								"OnlyBlobtoASQL": true,
								"AllowPartialUpdateOfDiscovery": false,
								"OnlyExtractDeletedRecordsFromSourceToBlob": false,
								"OnlyDeleteRecordsFromBlobToASQL": false,
								"TriggerName": {
									"value": "@pipeline().parameters.TriggerName",
									"type": "Expression"
								},
								"HttpTriggerCategory": "Trigger"
							}
						}
					},
					{
						"name": "GetColumnMappings",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Obtain Destination File Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_getColumnMapping_json_to_csv]",
								"storedProcedureParameters": {
									"additional_param": {
										"type": "String",
										"value": ""
									},
									"TableID": {
										"type": "Int32",
										"value": {
											"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].TableId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DataSources": {
						"type": "string",
						"defaultValue": [
							"QUU.BoM.RF3.IDR66"
						]
					},
					"SourceName": {
						"type": "string",
						"defaultValue": "Hydronet"
					},
					"DestinationTable": {
						"type": "string",
						"defaultValue": "Hydronet.Location"
					},
					"TriggerName": {
						"type": "string",
						"defaultValue": "Hydronet_PreReq_Daily"
					},
					"KeyVaultPath": {
						"type": "string",
						"defaultValue": "https://quu-ea-prd-da-key-vault.vault.azure.net/secrets/<secretname>?api-version=7.0"
					}
				},
				"variables": {
					"ReplaceChar": {
						"type": "String",
						"defaultValue": "'"
					},
					"ReplaceCharWith": {
						"type": "String",
						"defaultValue": "''"
					}
				},
				"folder": {
					"name": "Hydronet"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding_IncludeHeader')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Hydronet_TimeSeries_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each Processing Set",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Location Codes",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Processing Set",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "GetColumnMappings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Processing Set').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "TimeseriesToCSV",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Obtain Token",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "DataSourceCode",
													"value": {
														"value": "@item().DataSourceGroup",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"additionalHeaders": {
													"value": "Authorization:Bearer @{activity('Obtain Token').output.access_token}\ncontent-type:application/json",
													"type": "Expression"
												},
												"requestBody": {
													"value": "@{concat('{\n              \"Readers\": [\n    {\n                             \"DataSourceCode\": \"',item().DataSourceGroup,'\",\n                             \"Settings\": {\n                                           \"StructureType\": \"TimeSeries\",\n                                           \"StartDate\": \"',item().JobStartDate,'\",\n                                           \"EndDate\": \"',item().JobEndDate,'\",\n                                           \"VariableCodes\": ', string(pipeline().parameters.VariableCodes),',\n                                           \"LocationCodes\": [',activity('Get Location Codes').output.firstRow.LocationList,'],\n                                           \"ReadQuality\": false,\n                                           \"Interval\": {\n                                                          \"Type\": \"None\"\n                                           },\n                                           \"ReadAccumulated\": false,\n                                           \"CalculationType\":\"None\"\n                             }\n              }],\n              \"Exporter\": {\n                             \"DataFormatCode\": \"hydronet.csv.simple\"\n              },\n\t      \"TimeZoneOffset\": \"',pipeline().parameters.TimeZone,'\"\n}')}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(replace(string(activity('GetColumnMappings').output.firstRow.json_output),'\"path\"','\"name\"'))",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HTTP_CSV_IncludeHeader",
											"type": "DatasetReference",
											"parameters": {
												"HTTPURL": {
													"value": "@{concat(activity('API-URL').output.value,'timeseries/get?=')}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding_IncludeHeader",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].FolderName",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Obtain Token",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://login.hydronet.com/auth/realms/hydronet/protocol/openid-connect/token",
										"method": "POST",
										"headers": {
											"content-type": "application/x-www-form-urlencoded"
										},
										"body": {
											"value": "@{concat('grant_type=client_credentials&client_id=',activity('Auth-ClientID').output.value,'&client_secret=',activity('Auth-ClientSecret').output.value,'&')}",
											"type": "Expression"
										},
										"httpRequestTimeout": "00:10:00"
									}
								}
							]
						}
					},
					{
						"name": "Obtain Auth Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Auth-ClientID",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Auth-ClientSecret",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "API-URL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://login.hydronet.com/auth/realms/hydronet/protocol/openid-connect/token",
							"method": "POST",
							"headers": {
								"content-type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@{concat('grant_type=client_credentials&client_id=',activity('Auth-ClientID').output.value,'&client_secret=',activity('Auth-ClientSecret').output.value,'&')}",
								"type": "Expression"
							},
							"httpRequestTimeout": "00:10:00"
						}
					},
					{
						"name": "Get Data Source Settings",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Obtain Auth Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{concat(activity('API-URL').output.value,'entity/datasources/get')}",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('Obtain Auth Token').output.access_token}",
									"type": "Expression"
								},
								"Content-type": "application/json"
							},
							"body": {
								"value": "@{concat('{\"DataSourceCodes\":',string(pipeline().parameters.DataSources),',\"RelationDepth\":0, \"TimeZoneOffset\": \"',pipeline().parameters.TimeZone,'\"}')}",
								"type": "Expression"
							},
							"httpRequestTimeout": "00:10:00"
						}
					},
					{
						"name": "Get Processing Set",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Data Source Settings",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Obtain Destination File Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[Hydronet_GetTimeSeriesDateRange]",
								"storedProcedureParameters": {
									"APIDataJSONString": {
										"type": "String",
										"value": {
											"value": "@string(activity('Get Data Source Settings').output.DataSources)",
											"type": "Expression"
										}
									},
									"DaysPerFile": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.DaysPerFile",
											"type": "Expression"
										}
									},
									"RequestEndDateTime": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.EndDate",
											"type": "Expression"
										}
									},
									"FileExtension": {
										"type": "String",
										"value": ".csv"
									},
									"LabelSeperator": {
										"type": "String",
										"value": "|"
									},
									"LocationFilter": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.LocationCodes",
											"type": "Expression"
										}
									},
									"RequestStartDateTime": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.StartDate",
											"type": "Expression"
										}
									},
									"TableID": {
										"type": "Int32",
										"value": {
											"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].TableID",
											"type": "Expression"
										}
									},
									"TimeZone": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TimeZone",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Location Codes",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[Hydronet_GetTimeSeriesLocations]",
								"storedProcedureParameters": {
									"LocationExclude": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.LocationCodesExclude",
											"type": "Expression"
										}
									},
									"LocationFilter": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.LocationCodes",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Auth-ClientID",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{replace(pipeline().parameters.KeyVaultPath,'<secretname>','Hydronet-API-ClientID')}",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Auth-ClientSecret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{replace(pipeline().parameters.KeyVaultPath,'<secretname>','Hydronet-API-ClientSecret')}",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "API-URL",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{replace(pipeline().parameters.KeyVaultPath,'<secretname>','HydroNet-Base-URL')}",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Obtain Destination File Details",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWDiscovery",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "SourceName",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.SourceName",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "DestinationTable",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.DestinationTable",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "DECLARE @SQL NVARCHAR(MAX) = '\nSELECT st.TableID, TargetBlobFilePath AS FolderName, TargetBlobFileName + ''_'' + CONVERT(VARCHAR(10),dbo.udf_getLocalDTM(),112) + TargetBlobFileNameExt AS FileName, QuoteCharacter, ColumnDelimiter\nFROM ETL.SourceTableDetails st\nWHERE EXISTS\n(\n\tSELECT *\n\tFROM ETL.SourceSystem ss\n\tWHERE st.SourceID = ss.SourceID\n\tAND ss.SourceName = @SourceName\n)\nAND AzuresqlTargetTableName = @DestinationTable'\n\nEXEC sp_executesql\t@SQL, \n\t\t\t\t\tN'@SourceName VARCHAR(100), @DestinationTable VARCHAR(200)', \n\t\t\t\t\t@SourceName = @SourceName, \n\t\t\t\t\t@DestinationTable = @DestinationTable"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "If rows to process greater than zero",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "For Each Processing Set",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Processing Set').output.count,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set the Source Watermark",
									"description": "The last watermark that we have processed up until. If only a portion of records have been retrieved this should always represent the max source date captured",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('Get Processing Set').output.value[0].IncrementalWaterMark",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Land to Destination",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set the Source Watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceName": {
												"value": "@pipeline().parameters.SourceName",
												"type": "Expression"
											},
											"OnlySourceToBlob": false,
											"OnlyBlobtoASQL": true,
											"AllowPartialUpdateOfDiscovery": false,
											"OnlyExtractDeletedRecordsFromSourceToBlob": false,
											"OnlyDeleteRecordsFromBlobToASQL": false,
											"TriggerName": {
												"value": "@pipeline().parameters.TriggerName",
												"type": "Expression"
											},
											"HttpTriggerCategory": "Trigger"
										}
									}
								}
							]
						}
					},
					{
						"name": "GetColumnMappings",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Obtain Destination File Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_getColumnMapping_json_to_csv]",
								"storedProcedureParameters": {
									"additional_param": {
										"type": "String",
										"value": ""
									},
									"TableID": {
										"type": "Int32",
										"value": {
											"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].TableId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StartDate": {
						"type": "string",
						"defaultValue": "1900-01-01"
					},
					"EndDate": {
						"type": "string",
						"defaultValue": "1900-01-01"
					},
					"DaysPerFile": {
						"type": "int",
						"defaultValue": 90
					},
					"LocationCodes": {
						"type": "string",
						"defaultValue": "1326,1327"
					},
					"LocationCodesExclude": {
						"type": "string",
						"defaultValue": "@coalesce(null)"
					},
					"TimeZone": {
						"type": "string",
						"defaultValue": "+1000"
					},
					"DataSources": {
						"type": "array",
						"defaultValue": [
							"QUU.BoM.RF3.IDR66"
						]
					},
					"SourceName": {
						"type": "string",
						"defaultValue": "Hydronet"
					},
					"DestinationTable": {
						"type": "string",
						"defaultValue": "Hydronet.Rainfall_Exceedance"
					},
					"VariableCodes": {
						"type": "array",
						"defaultValue": [
							"EY_30min",
							"EY_1hr",
							"EY_2hr",
							"EY_3hr",
							"EY_4.5hr",
							"EY_6hr",
							"EY_9hr",
							"EY_12hr",
							"EY_18hr",
							"EY_24hr",
							"EY_36hr",
							"EY_48hr",
							"EY_72hr",
							"EY_168hr"
						]
					},
					"TriggerName": {
						"type": "string",
						"defaultValue": "Hydronet_Daily_Trigger"
					},
					"KeyVaultPath": {
						"type": "string",
						"defaultValue": "https://quu-ea-prd-da-key-vault.vault.azure.net/secrets/<secretname>?api-version=7.0"
					}
				},
				"variables": {
					"DataSourceSettings": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Hydronet"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_HTTP_CSV_IncludeHeader')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding_IncludeHeader')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ICN_Data_Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from Fileshare to Blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".*"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_NFUJPRD301_ICN",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_DataLanding_ICN",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ICN Data Copy"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_NFUJPRD301_ICN')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_ICN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ICN_Payment_Extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Extract File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Ellipse9].[usp_get_Icn_Payment_Extract]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ICN_Payment_Extract_File",
								"type": "DatasetReference",
								"parameters": {
									"FilePath": {
										"value": "@pipeline().parameters.FilePath",
										"type": "Expression"
									},
									"FileName": {
										"value": "@concat('ICN','_Payment_',convertFromUtc(utcnow(),'E. Australia Standard Time','yyyyMMdd_HHmmss'),'.txt')\n\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FilePath": {
						"type": "string",
						"defaultValue": "DEVELOPER CLIENT MANAGEMENT TEAM FOLDER\\14.00 ICNDbRegister\\Payment Reports"
					}
				},
				"folder": {
					"name": "ICN Payment Extract"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ICN_Payment_Extract_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Kantar_DataModel_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute PL_Kantar_Main",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceName": {
									"value": "@pipeline().parameters.SourceName",
									"type": "Expression"
								},
								"OnlySourceToBlob": {
									"value": "@pipeline().parameters.OnlySourceToBlob",
									"type": "Expression"
								},
								"OnlyBlobtoASQL": {
									"value": "@pipeline().parameters.OnlyBlobtoASQL",
									"type": "Expression"
								},
								"AllowPartialUpdateOfDiscovery": {
									"value": "@pipeline().parameters.AllowPartialUpdateOfDiscovery",
									"type": "Expression"
								},
								"Additional_MappingParam": {
									"value": "@pipeline().parameters.Additional_MappingParam",
									"type": "Expression"
								},
								"OnlyExtractDeletedRecordsFromSourceToBlob": {
									"value": "@pipeline().parameters.OnlyExtractDeletedRecordsFromSourceToBlob",
									"type": "Expression"
								},
								"OnlyDeleteRecordsFromBlobToASQL": {
									"value": "@pipeline().parameters.OnlyDeleteRecordsFromBlobToASQL",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().parameters.TriggerName",
									"type": "Expression"
								},
								"HttpTriggerCategory": "EDW_Completion"
							}
						}
					},
					{
						"name": "Execute PL_Kantar_Model_Main",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute PL_Kantar_Main",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDW_Mart_Kantar",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourcename": {
									"value": "@pipeline().parameters.SourceName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Kantar"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					},
					"AllowPartialUpdateOfDiscovery": {
						"type": "bool",
						"defaultValue": false
					},
					"Additional_MappingParam": {
						"type": "string"
					},
					"OnlyExtractDeletedRecordsFromSourceToBlob": {
						"type": "bool",
						"defaultValue": false
					},
					"OnlyDeleteRecordsFromBlobToASQL": {
						"type": "bool",
						"defaultValue": false
					},
					"TriggerName": {
						"type": "string",
						"defaultValue": "Kantar_Monthly_Trigger"
					}
				},
				"folder": {
					"name": "Kantar"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-24T06:00:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDW_Mart_Kantar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LIMS_Source_To_ASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute_PL_EDWDiscovery_TRFM_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute_PL_EDWDiscovery_SourceToBlob_SqlServer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute_PL_EDWDiscovery_SourceToBlob_SqlServer",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "LIMS"
					}
				},
				"folder": {
					"name": "LIMS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LIWIS_SourceToAsql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_Oracle",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "LIWIS"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "LIWIS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_Oracle')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MDSProd_SourceToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "MDSProd"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "MDSProd"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_NetworkAccess_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select \ns.sourceID,\ntableID, \nSourceLandingContainer,\nconcat('networkaccess-datalanding/',SourceTableName) as SourceFilePath,\nTargetBlobContainer,\nTargetBlobFilePath,\nTargetBlobFileName = lower(TargetBlobFileName + '_' + cast(SYSDATETIME() as varchar(100))+ targetBlobFileNameExt ),\nColumnDelimiter,QuoteCharacter\nfrom etl.sourcesystem s\nLEFT OUTER JOIN ETL.SourceTableDetails d\nON s.sourceid = d.sourceid \nand d.isactive = 1\nwhere sourcename='@{pipeline().parameters.sourcename}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOREACH_json_to_csv",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_getfilemetadata').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Execute_json_csv_conversion",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_json_to_csv",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceLandingContainer": {
												"value": "@item().SourceLandingContainer",
												"type": "Expression"
											},
											"SourceFilePath": {
												"value": "@item().SourceFilePath",
												"type": "Expression"
											},
											"sourceID": {
												"value": "@item().sourceID",
												"type": "Expression"
											},
											"tableID": {
												"value": "@item().tableID",
												"type": "Expression"
											},
											"TargetBlobFilePath": {
												"value": "@item().TargetBlobFilePath",
												"type": "Expression"
											},
											"TargetBlobFileName": {
												"value": "@item().TargetBlobFileName",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"TargetBlobContainer": {
												"value": "@item().TargetBlobContainer",
												"type": "Expression"
											},
											"Additional_MappingParam": {
												"value": "@pipeline().parameters.Additional_MappingParam",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FOREACH_json_to_csv",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetSourceID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetSourceID",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "NetworkAccess"
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					},
					"Additional_MappingParam": {
						"type": "string",
						"defaultValue": ",\"collectionReference\": \"$['Entry']['attribute']\",\"mapComplexValuesToString\": true"
					}
				},
				"folder": {
					"name": "NetworkAccess"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_json_to_csv')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_NetworkAccess_Source_To_ASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_MySQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "NetworkAccess"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "NetworkAccess"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_MySQL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Openwindows_SourceToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "OpenWindows"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "OpenWindows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ProcessModel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a general pipeline for ssas tabular model cube refresh. it would refresh the cube according to the parameter parsed in the pipeline.",
				"activities": [
					{
						"name": "Login",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',pipeline().parameters.TenantID,'/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&resource=https://*.asazure.windows.net&client_id=',pipeline().parameters.ClientID,'&client_secret=',encodeUriComponent(pipeline().parameters.ClientSecret))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilRefreshComplete",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "FilterToCurrentRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('GetAzureASRefreshStatus').output.status,'inProgress'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GetAzureASRefreshStatus",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait30Seconds",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://',pipeline().parameters.Region,'.asazure.windows.net/servers/',pipeline().parameters.Server,'/models/',pipeline().parameters.DatabaseName,'/refreshes/',activity('FilterToCurrentRefresh').output.Value[0].refreshId)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Wait30Seconds",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "FilterToCurrentRefresh",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetAzureASRefreshes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@json(activity('GetAzureASRefreshes').output.Response)",
								"type": "Expression"
							},
							"condition": {
								"value": "@greaterOrEquals(item().startTime,addseconds(activity('StartProcessingAzureAS').output.startTime,-30))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartProcessingAzureAS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Login",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://',pipeline().parameters.Region,'.asazure.windows.net/servers/',pipeline().parameters.Server,'/models/',pipeline().parameters.DatabaseName,'/refreshes')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
									"type": "Expression"
								}
							},
							"body": {
								"Type": "Full",
								"CommitMode": "transactional",
								"MaxParallelism": 10,
								"RetryCount": 2
							}
						}
					},
					{
						"name": "IfFailed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "UntilRefreshComplete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetAzureASRefreshStatus').output.status,'failed')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ThrowErrorOnFailure",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@string(activity('GetAzureASRefreshStatus').output)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {}
									}
								}
							]
						}
					},
					{
						"name": "GetAzureASRefreshes",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "StartProcessingAzureAS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://',pipeline().parameters.Region,'.asazure.windows.net/servers/',pipeline().parameters.Server,'/models/',pipeline().parameters.DatabaseName,'/refreshes')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
									"type": "Expression"
								}
							},
							"body": {
								"Type": "Full",
								"CommitMode": "transactional",
								"MaxParallelism": 10,
								"RetryCount": 2
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TenantID": {
						"type": "String",
						"defaultValue": "855f3711-2ce2-4c7e-af5b-a513f6f2ae6d"
					},
					"ClientID": {
						"type": "String",
						"defaultValue": "89ad5ef1-4924-43a2-9dca-37e65f827ef8"
					},
					"ClientSecret": {
						"type": "String",
						"defaultValue": "[QG2xdpLS5T1l9-/MoK-?ALgjk/Enf.-"
					},
					"SubscriptionID": {
						"type": "String",
						"defaultValue": "3ae58716-8913-4137-b029-844b270cb4a0"
					},
					"Region": {
						"type": "String",
						"defaultValue": "australiaeast"
					},
					"Server": {
						"type": "String",
						"defaultValue": "quueaprddaaas001"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "Temetra"
					}
				},
				"folder": {
					"name": "Azure AS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Reference_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "REFERENCE"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "REF"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SUMS_Daily_Consumption_And_Analysis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SUMS_Daily_Consumption",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/SUMS/SUMS_DailyConsumption",
							"baseParameters": {
								"Load_Type": {
									"value": "@pipeline().parameters.Load_Type",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID,databricksclusterid,databrickssecretname FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SUMS_MovingAnalysis",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "SUMS_Daily_Consumption",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/SUMS/SUMS_MovingAnalysis",
							"baseParameters": {
								"Load_Type": {
									"value": "@pipeline().parameters.Load_Type",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SUMS_KCA_Consumption",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "SUMS_MovingAnalysis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/SUMS/SUMS_KCA_Consumption"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "SUMS"
					},
					"Load_Type": {
						"type": "string",
						"defaultValue": "Full"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Salesforce_DM_SourcetoBlob_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID FROM etl.SourceSystem where \nSourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckSourceToBlobInd",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SourceToBlob,true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute_Salesforce_DM_SourceToBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SalesForce",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckBlobtoAsqlInd",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckSourceToBlobInd",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.BlobtoAsql,true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute_Salesforce_TRFM_BlobToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "SalesForce"
					},
					"SourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"BlobtoAsql": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Salesforce"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SalesForce')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ServiceNow_DM_GSFileServerToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Transfer file to Blob storage",
				"activities": [
					{
						"name": "GetFileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_GlobalScape_ServiceNow",
								"type": "DatasetReference",
								"parameters": {
									"p_FileFolder": {
										"value": "@pipeline().parameters.p_GSFileFolderName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FilterOnlyCSVFiles",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileNames').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterOnlyCSVFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterOnlyCSVFiles').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "GetSourceDetails",
									"description": "Fetching SourceId from etl.SourceSystem",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select TableId, TargetBlobFilePath, IsActive from etl.SourceTableDetails a where a.SourceId = @{pipeline().parameters.p_SourceId} and lower(SUBSTRING(a.SourceFileName, 1, CHARINDEX('*', a.SourceFileName)-1)) = lower('@{substring(Item().name, 0, indexof(Item().name, '_'))}')",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "If Record Exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetSourceDetails",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('GetSourceDetails').output.Firstrow['IsActive']",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy_Incident_Files_GSFileServer_to_Blob",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_BFS_GlobalScape_ServiceNow",
														"type": "DatasetReference",
														"parameters": {
															"p_FileFolder": {
																"value": "@pipeline().parameters.p_GSFileFolderName",
																"type": "Expression"
															},
															"p_FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_FS_ServiceNow_Sink",
														"type": "DatasetReference",
														"parameters": {
															"p_snk_blob_container_name": {
																"value": "@activity('GetSourceDetails').output.Firstrow['TargetBlobFilePath']",
																"type": "Expression"
															},
															"p_snk_blob_file_name": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Archive_GSFileServer_File",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy_Incident_Files_GSFileServer_to_Blob",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_BFS_GlobalScape_ServiceNow",
														"type": "DatasetReference",
														"parameters": {
															"p_FileFolder": {
																"value": "@pipeline().parameters.p_GSFileFolderName",
																"type": "Expression"
															},
															"p_FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_BFS_GlobalScape_ServiceNow",
														"type": "DatasetReference",
														"parameters": {
															"p_FileFolder": {
																"value": "@concat(pipeline().parameters.p_GSFileFolderName,'\\Archive')",
																"type": "Expression"
															},
															"p_FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete_Processed_GSFileServer_File",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Archive_GSFileServer_File",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_BFS_GlobalScape_ServiceNow",
														"type": "DatasetReference",
														"parameters": {
															"p_FileFolder": {
																"value": "@pipeline().parameters.p_GSFileFolderName",
																"type": "Expression"
															},
															"p_FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_GSFileFolderName": {
						"type": "string",
						"defaultValue": "ServiceNow\\\\Pre-Prod"
					},
					"p_SourceId": {
						"type": "string",
						"defaultValue": "61"
					}
				},
				"variables": {
					"v_blob_container_name": {
						"type": "String",
						"defaultValue": "servicenow-datalanding"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_ServiceNow')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_BFS_GlobalScape_ServiceNow')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_ServiceNow_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ServiceNow_DM_SourceToGSFileServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_All_Files_MidServer_to_GSFileServer",
						"description": "Copy all the files from MidServer to GSFileServer\nMidServer Location: \\\\NFUJPRD281\\c$\\Utils\\PROD\\export\\updates\n\nGSFileServer Location: \\\\nfujprd200\\EBI_PROD_LANDING\\ServiceNow",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@variables('v_FileType')",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_MidServer_ServiceNow_Source",
								"type": "DatasetReference",
								"parameters": {
									"p_MidServerLocation": {
										"value": "@pipeline().parameters.p_MidServerLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FS_MidServer_ServiceNow_Destination",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@pipeline().parameters.p_GSFileFolderName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_GSFileFolderName": {
						"type": "string",
						"defaultValue": "ServiceNow\\\\Pre-Prod"
					},
					"p_SourceId": {
						"type": "string"
					},
					"p_MidServerLocation": {
						"type": "string",
						"defaultValue": "\\\\NFUJPRD281\\c$\\Utils\\PROD\\export\\updates"
					}
				},
				"variables": {
					"v_FileType": {
						"type": "String",
						"defaultValue": "*.csv"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_MidServer_ServiceNow_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_FS_MidServer_ServiceNow_Destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ServiceNow_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceDetails",
						"description": "Fetching SourceId from etl.SourceSystem",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID, Fileserverlocation, FileFolderName from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForGSFileServerToBlob",
						"description": "Execute only if OnlyGSFileServerToBlob = TRUE",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForMidServerToGSFileServer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyGSFileServerToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute_PL_ServiceNow_GSFileServer_To_Blob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ServiceNow_DM_GSFileServerToBlob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_GSFileFolderName": {
												"value": "@activity('GetSourceDetails').output.Firstrow['FileFolderName']",
												"type": "Expression"
											},
											"p_SourceId": {
												"value": "@activity('GetSourceDetails').output.Firstrow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"description": "Execute only if OnlyBlobtoASQL= TRUE",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForGSFileServerToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceDetails').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForMidServerToGSFileServer",
						"description": "Execute only if OnlySourceToGSFileServer = TRUE",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToGSFileServer",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute_PL_ServiceNow_MidServer_To_GSFileServer",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_ServiceNow_DM_SourceToGSFileServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_GSFileFolderName": {
												"value": "@activity('GetSourceDetails').output.Firstrow['FileFolderName']",
												"type": "Expression"
											},
											"p_SourceId": {
												"value": "@activity('GetSourceDetails').output.Firstrow['SourceId']",
												"type": "Expression"
											},
											"p_MidServerLocation": {
												"value": "@pipeline().parameters.p_MidServerLocation",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "ServiceNow"
					},
					"OnlySourceToGSFileServer": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyGSFileServerToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					},
					"p_MidServerLocation": {
						"type": "string",
						"defaultValue": "\\\\NFUJPRD281\\c$\\Utils\\PROD\\export\\updates"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ServiceNow_DM_GSFileServerToBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ServiceNow_DM_SourceToGSFileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Silo_Weather_Observations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute notebook to produce the csv file",
				"activities": [
					{
						"name": "Silo_Weather_Observations",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Silo/01-SILO_Weather_Observations",
							"baseParameters": {
								"param_load_type": {
									"value": "@pipeline().parameters.Silo_load_type",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID,databricksclusterid,databrickssecretname FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "PL_EDWDiscovery_TRFM_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Silo_Weather_Observations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "SILO"
					},
					"Silo_load_type": {
						"type": "string",
						"defaultValue": "Incremental_Load"
					}
				},
				"folder": {
					"name": "Silo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_StartFSECluster')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start FSE Cluster",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Get FSE Cluster ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/FSE/Start FSE Cluster"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('Get FSE Cluster ID').output.firstrow.databricksclusterid",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('Get FSE Cluster ID').output.firstrow.databrickssecretname",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get FSE Cluster ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select distinct databricksclusterid,databrickssecretname  from ETL.SourceSystem\nwhere databricksclustername = 'ADF_Job_Cluster_FSE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "FieldServicesEdge"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TFSCS_DM_SourcetoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TFSCS_Copy_to_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 4
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_GlobalScape_TFS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_FS_TFS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"targetblobfoldername": {
										"value": "@variables('targetblobfoldername')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Archive_Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TFSCS_Copy_to_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_GlobalScape_TFS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FS_GlobalScape_Archive",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete_Processed_files From_CardServices",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_GlobalScape_TFS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": false,
								"wildcardFileName": "*.*"
							}
						}
					},
					{
						"name": "Lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  FileFolderName\nfrom etl.sourcesystem\nwhere sourcename = '@{pipeline().parameters.sourcename}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "Tanker Filling Station Card Services"
					}
				},
				"variables": {
					"Testvar": {
						"type": "String"
					},
					"targetblobfoldername": {
						"type": "String",
						"defaultValue": "tankerfillingstation-dataloading/CardService"
					}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_TFS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_TFS_Sink')]",
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_Archive')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TFSCS_SourceToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute PL_TFSCS_DM_SourcetoBlob",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_TFSCS_DM_SourcetoBlob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute PL_TFSCS_TRFM_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute PL_TFSCS_DM_SourcetoBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_TFSCS_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_TFSCS_DM_SourcetoBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_TFSCS_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TFSCS_TRFM_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Table Metadata Information",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute_PL_EDWDiscovery_TRFM_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Table Metadata Information",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_name": {
						"type": "string",
						"defaultValue": "Tanker Filling Station Card Services"
					}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_24HR_STATS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Temetra_24HR_STATS",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/Temetra_24Hr_Stats"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"databricks_cluster_id": {
						"type": "string"
					},
					"databricks_secret_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Temetra/backup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_API_Call')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "3_Temetra_API_Response_Management",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/3_Temetra_API_Response_Management",
							"baseParameters": {
								"Load_Type": {
									"value": "@pipeline().parameters.param_load_type",
									"type": "Expression"
								},
								"InitialStartDate": {
									"value": "@pipeline().parameters.param_startdate",
									"type": "Expression"
								},
								"InitialEndDate": {
									"value": "@pipeline().parameters.param_enddate",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": "0818-004527-fleck168",
								"databrickssecretname": "databricks-token"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"databricks_cluster_id": {
						"type": "string",
						"defaultValue": "0417-051914-axons909"
					},
					"databricks_secret_name": {
						"type": "string",
						"defaultValue": "databricks-token"
					},
					"param_load_type": {
						"type": "string",
						"defaultValue": "Incremental"
					},
					"param_startdate": {
						"type": "string",
						"defaultValue": "20200101"
					},
					"param_enddate": {
						"type": "string",
						"defaultValue": "20201231"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_API_Response')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute Temetra_API_Response databricks notebook for API data ingestion",
				"activities": [
					{
						"name": "Temetra_API_Response",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/Temetra_API_Response"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"databricks_cluster_id": {
						"type": "string"
					},
					"databricks_secret_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Temetra/backup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Analysis_Service')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_Process_ssas_Model_Temetra",
						"description": "Process Temetra Model analysis service",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessModel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"TenantID": "855f3711-2ce2-4c7e-af5b-a513f6f2ae6d",
								"ClientID": "89ad5ef1-4924-43a2-9dca-37e65f827ef8",
								"ClientSecret": "[QG2xdpLS5T1l9-/MoK-?ALgjk/Enf.-",
								"SubscriptionID": "3ae58716-8913-4137-b029-844b270cb4a0",
								"Region": "australiaeast",
								"Server": "quueaprddaaas001",
								"DatabaseName": "Temetra"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Temetra/backup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessModel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePL_TRFM_BLOBToASQL",
						"description": "Loading Temetra API Data into databricks delta and Azure sql db",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.firstRow['SourceID']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "TEMETRA"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_DeviceList_Generate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "1_Temetra_DeviceList_Generate",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/1_Temetra_DeviceList_Generate"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": "0818-004527-fleck168",
								"databrickssecretname": "databricks-token"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"databricks_cluster_id": {
						"type": "string"
					},
					"databricks_secret_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Geospatial_File_Bulk_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT t.TargetBlobFilePath\n            ,t.TargetBlobFileName + '-' + cast(convert(date,[dbo].[udf_getLocalDTM](),121) as  \n varchar(10)) +  t.targetBlobFileNameExt AS targetBlobFileName\n            ,t.TargetBlobContainer\n            ,t.ColumnDelimiter\n            ,t.QuoteCharacter\nFROM ETL.SourceSystem S  \nInner join ETL.SourceTableDetails T\n ON S.SourceID = T.SourceID\nWHERE S.SourceName =  '@{pipeline().parameters.sourcename}'\nand lower(SourceTableName)='geospatial_devices'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy_Geospatial_File_From_API_EndPoint",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Temetra_Geospatial_Meters_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Temetra_Geospatial_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@activity('lkp_getfilemetadata').output.Firstrow['TargetBlobFilePath']",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@activity('lkp_getfilemetadata').output.Firstrow['TargetBlobFileName']",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@activity('lkp_getfilemetadata').output.Firstrow['ColumnDelimiter']",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@activity('lkp_getfilemetadata').output.Firstrow['QuoteCharacter']",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "PL_Temetra_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Geospatial_File_From_API_EndPoint",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceName": {
									"value": "@pipeline().parameters.sourcename",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "01_Temetra_GIS_Spatial_Linkage",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "PL_Temetra_BlobToASQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/01_Temetra_GIS_Spatial_Linkage"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "TEMETRA-GEOSPATIAL-DEVICES"
					},
					"databricks_cluster_id": {
						"type": "string",
						"defaultValue": "1210-010752-knack200"
					},
					"databricks_secret_name": {
						"type": "string",
						"defaultValue": "databricks-token"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_Temetra_Geospatial_Meters_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Temetra_Geospatial_Sink')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_BlobToASQL')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Hourly_Consumption')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute Temetra_Hourly_Consumption Notebook in databricks",
				"activities": [
					{
						"name": "4_Temetra_Hourly_Consumption",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/4_Temetra_Hourly_Consumption",
							"baseParameters": {
								"Load_Type": {
									"value": "@pipeline().parameters.Load_Type",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load Temp to Target",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "4_Temetra_Hourly_Consumption",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ETL].[usp_load_target_table]",
							"storedProcedureParameters": {
								"isDebugFlag": {
									"value": "false",
									"type": "Boolean"
								},
								"isTruncateBeforeLoad": {
									"value": "true",
									"type": "Boolean"
								},
								"sourceObject": {
									"value": "Temp.Temetra_Hourly_Consumption",
									"type": "String"
								},
								"targetObject": {
									"value": "Mart.Temetra_Hourly_Consumption",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWMart",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"databricks_cluster_id": {
						"type": "string",
						"defaultValue": "0417-051914-axons909"
					},
					"databricks_secret_name": {
						"type": "string",
						"defaultValue": "databricks2-token"
					},
					"Load_Type": {
						"type": "string",
						"defaultValue": "Full"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_Temetra_DeviceList_Generate",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_DeviceList_Generate",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_Temetra_devices",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_DeviceList_Generate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_devices",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceName": "TEMETRA-DEVICES"
							}
						}
					},
					{
						"name": "PL_Temetra_API_Call",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_devices",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_API_Call",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								},
								"param_load_type": "Incremental",
								"param_startdate": {
									"value": "@formatDateTime(subtractFromTime(convertTimeZone(utcnow(),'UTC','E. Australia Standard Time'),1,'Day'),'yyyyMMdd')",
									"type": "Expression"
								},
								"param_enddate": {
									"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','E. Australia Standard Time'),'yyyyMMdd')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_Temetra_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_API_Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceName": "TEMETRA"
							}
						}
					},
					{
						"name": "PL_Temetra_Hourly_Consumption",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_BlobToASQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_Hourly_Consumption",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								},
								"Load_Type": "Full"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"databricks_cluster_id": {
						"type": "string",
						"defaultValue": "0417-051914-axons909"
					},
					"databricks_secret_name": {
						"type": "string",
						"defaultValue": "databricks-token"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_DeviceList_Generate')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_devices')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_API_Call')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_BlobToASQL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Hourly_Consumption')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Main_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Temetra Main Pipeline",
				"activities": [
					{
						"name": "PL_Temetra_API_Response",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_API_Response",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_Temetra_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_API_Response",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_Temetra_Hourly_Consumption",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_BlobToASQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_Hourly_Consumption",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_Temetra_Analysis_Service",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_24HR_STATS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_Analysis_Service",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_Temetra_Potential_Leaks",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_Hourly_Consumption",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_Potential_Leaks",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_Temetra_24HR_STATS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_Potential_Leaks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_24HR_STATS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"databricks_cluster_id": {
						"type": "string",
						"defaultValue": "0417-051914-axons909"
					},
					"databricks_secret_name": {
						"type": "string",
						"defaultValue": "databricks-token"
					}
				},
				"folder": {
					"name": "Temetra/backup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_API_Response')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_BlobToASQL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Hourly_Consumption')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Analysis_Service')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Potential_Leaks')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_24HR_STATS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Potential_Leaks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute Temetra_Potential_Leaks databricks notebook",
				"activities": [
					{
						"name": "Temetra_Potential_Leaks",
						"description": "/edw_discovery/Temetra/Temetra_Potential_Leaks",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/Temetra_Potential_Leaks"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"databricks_cluster_id": {
						"type": "string"
					},
					"databricks_secret_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Temetra/backup"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_devices')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePL_TRFM_BLOBToASQL",
						"description": "Loading Temetra API Data into databricks delta and Azure sql db",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.firstRow['SourceID']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "TEMETRA-DEVICES"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_UrbanHQ_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWDiscover_DM_SourceToBlob_globalscape",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_globalscape",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "UrbanHQ"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "UrbanHQ"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_globalscape')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_WWI_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "WWI"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "WWI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_WorkOrder_Model_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_EDW_Mart_WorkOrder",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDW_Mart_WorkOrder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourcename": "Ellipse9"
							}
						}
					},
					{
						"name": "PL_WorkOrder_FinanceTransaction",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_EDW_Mart_WorkOrder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDW_Mart_FinanceTransaction",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourcename": "Ellipse9",
								"incrementaldays": "5"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "WorkOrder-Model"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDW_Mart_WorkOrder')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDW_Mart_FinanceTransaction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_eForms_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select s.sourceID,\ntableID,\nSourceTableName,\nSourceLandingContainer,\nconcat('eforms-datalanding/',SourceTableName) as SourceFilePath,\nTargetBlobContainer,\nTargetBlobFilePath,\nTargetBlobFileName = lower(TargetBlobFileName + '_' + substring(cast(SYSDATETIME() as varchar(100)),0,11)+targetBlobFileNameExt )\n,ColumnDelimiter\n,QuoteCharacter\nfrom etl.sourcesystem s\nLEFT OUTER JOIN ETL.SourceTableDetails d\nON s.sourceid = d.sourceid \nand d.isactive = 1\nwhere sourcename= '@{pipeline().parameters.sourcename}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOREACH_json_to_csv",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_getfilemetadata').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Check_If_File_exists",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_srcLanding_FileExists",
											"type": "DatasetReference",
											"parameters": {
												"blobcontainer": {
													"value": "@item().SourceLandingContainer",
													"type": "Expression"
												},
												"blobfolderpath": {
													"value": "@item().SourceFilePath",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "JsonReadSettings"
										}
									}
								},
								{
									"name": "Convert_to_csv",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check_If_File_exists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(greater(length(activity('Check_If_File_exists').output.ChildItems),0))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Convert_jsonToCSV",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "GetSchemaMapping",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "JsonSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFileName": "*.json",
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "JsonReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings",
															"copyBehavior": "MergeFiles"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"logSettings": {
														"enableCopyActivityLog": true,
														"copyActivityLogSettings": {
															"logLevel": "Warning",
															"enableReliableLogging": false
														},
														"logLocationSettings": {
															"linkedServiceName": {
																"referenceName": "LS_ABLB_quueadadlslanding001",
																"type": "LinkedServiceReference"
															},
															"path": {
																"value": "@concat(item().TargetBlobContainer,'/logs/',item().SourceTableName)",
																"type": "Expression"
															}
														}
													},
													"translator": {
														"value": "@json(activity('GetSchemaMapping').output.firstrow.json_output)",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_srclanding_json_source",
														"type": "DatasetReference",
														"parameters": {
															"Sourceblobfoldername": {
																"value": "@concat(item().SourceLandingContainer,'/',item().SourceFilePath)",
																"type": "Expression"
															},
															"Sourceblobfilename": {
																"value": "*.json",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_Datalanding",
														"type": "DatasetReference",
														"parameters": {
															"FolderPath": {
																"value": "@item().TargetBlobFilePath",
																"type": "Expression"
															},
															"TargetFileName": {
																"value": "@item().TargetBlobFileName",
																"type": "Expression"
															},
															"ColumnDelimiter": {
																"value": "@item().ColumnDelimiter",
																"type": "Expression"
															},
															"QuoteCharacter": {
																"value": "@item().QuoteCharacter",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Archive_delele_json_files",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Convert_jsonToCSV",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Archive_delete_JSONFiles",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"BlobContainer": {
															"value": "@item().SourceLandingContainer",
															"type": "Expression"
														},
														"FilePath": {
															"value": "@item().SourceFilePath",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "GetSchemaMapping",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[ETL].[usp_getColumnMapping_json_to_csv]",
														"storedProcedureParameters": {
															"additional_param": {
																"type": "String",
																"value": {
																	"value": "@pipeline().parameters.additional_param",
																	"type": "Expression"
																}
															},
															"TableID": {
																"type": "Int32",
																"value": {
																	"value": "@item().tableID",
																	"type": "Expression"
																}
															}
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FOREACH_json_to_csv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetSourceID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetSourceID",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "eForms"
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					},
					"additional_param": {
						"type": "string",
						"defaultValue": ",\"collectionReference\": \"$['Entry']['PhotoTable']\""
					}
				},
				"folder": {
					"name": "eForms"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_srcLanding_FileExists')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_srclanding_json_source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/pipelines/Archive_delete_JSONFiles')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADF_DS_SF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SF",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SalesforceObject",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_BinZip_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprddasrclanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blob_directory": {
						"type": "string"
					},
					"blob_container": {
						"type": "string"
					},
					"storage_account": {
						"type": "string",
						"defaultValue": "quueaprddadlslanding001"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().blob_directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blob_container",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprddasrclanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_Binary_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprddasrclanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blob_container": {
						"type": "string"
					},
					"storage_account": {
						"type": "string",
						"defaultValue": "quueaprddasrclanding001"
					},
					"blob_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().blob_folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blob_container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprddasrclanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_Binary_Sink_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprddasrclanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blob_directory": {
						"type": "string"
					},
					"blob_File": {
						"type": "string"
					},
					"blob_storageaccount": {
						"type": "string",
						"defaultValue": "quueaprddadlslanding001"
					},
					"blob_container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().blob_File",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().blob_directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blob_container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprddasrclanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_CSVFile_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprddasrclanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"src_blobcontainer": {
						"type": "string"
					},
					"src_blobfolder": {
						"type": "string"
					},
					"delimiter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().src_blobfolder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().src_blobcontainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprddasrclanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_DataLanding_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"target_storageaccount": {
						"type": "string"
					},
					"target_blobcontainer": {
						"type": "string"
					},
					"target_blobfolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().target_blobfolder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().target_blobcontainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_DataLanding_FileExists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().blobfolderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blobcontainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_DataLanding_FizeSize')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_DataLanding_ICN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprdicndlslanding001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "icn-filelanding"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprdicndlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_Datalanding')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"TargetFileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "\""
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelimiter",
						"type": "Expression"
					},
					"rowDelimiter": "\n",
					"escapeChar": "º",
					"quoteChar": {
						"value": "@dataset().QuoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_Datalanding_IncludeHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"TargetFileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "\""
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelimiter",
						"type": "Expression"
					},
					"escapeChar": "º",
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().QuoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_EDWDiscovery_Delta_Parquet_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"TargetFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath\n",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_Chris21_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"targetblobfoldername": {
						"type": "string"
					},
					"targetblobfilename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Chris21"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().targetblobfilename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().targetblobfoldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "¬"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_Dataloading')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"targetblobfoldername": {
						"type": "string"
					},
					"targetFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().targetFileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().targetblobfoldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_GlobalScape_Binary_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"GSfolderpath": {
						"type": "string",
						"defaultValue": "NOPV\\pre-prod"
					},
					"GSfilename": {
						"type": "string",
						"defaultValue": "Bank_Details_Check_2023_02_08.xlsx"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().GSfilename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().GSfolderpath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_SUMS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"targetblobfoldername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().targetblobfoldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_ServiceNow_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_snk_blob_container_name": {
						"type": "string"
					},
					"p_snk_blob_file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().p_snk_blob_file_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().p_snk_blob_container_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_Srclanding_Binary_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprddasrclanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blobcontainer": {
						"type": "string",
						"defaultValue": "sharepoint-datalanding"
					},
					"blobfolderpath": {
						"type": "string",
						"defaultValue": "kantar-datalanding"
					},
					"blobfilename": {
						"type": "string",
						"defaultValue": "KANTAR Data File Example 250123.xlsx"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().blobfilename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().blobfolderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blobcontainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprddasrclanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_TFS_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"targetblobfoldername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().targetblobfoldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_Temetra_Geospatial_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"TargetFileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "\""
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelimiter",
						"type": "Expression"
					},
					"rowDelimiter": "\n",
					"escapeChar": "º",
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().QuoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_srcLanding_FileExists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprddasrclanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().blobfolderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blobcontainer",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprddasrclanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_srclanding_json_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprddasrclanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Sourceblobfoldername": {
						"type": "string"
					},
					"Sourceblobfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Sourceblobfilename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Sourceblobfoldername",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprddasrclanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_API",
					"type": "LinkedServiceReference",
					"parameters": {
						"APIBaseURL": "https://auapi.envizi.com/api/data",
						"APIReport": "monthlydatasummaryallmeasures",
						"APICallParameter": "End_Period",
						"APICallParameterValue": "Current_Month"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_EDWDiscovery')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_EDWDiscovery",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_EDWDiscovery_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_EDWDiscovery",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "[[Ellipse9].[MSFPackages]"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Ellipse9",
					"table": "MSFPackages"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_EDWMart_Target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_EDWMart",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BFS_GlobalScape_ServiceNow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"p_FileFolder": {
						"type": "string"
					},
					"p_FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().p_FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_FileFolder",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob_ExcelFile_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprddasrclanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DirectoryName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"SheetName": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().SheetName",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprddasrclanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_ABLB_DataLanding_Binary_FileExists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					},
					"blobfilename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().blobfilename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().blobfolderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blobcontainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_ABLB_srcLanding_Binary_FileExists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueaprddasrclanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().blobfolderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blobcontainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueaprddasrclanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_FTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_FTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"Host": {
							"value": "@dataset().FileServer",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"FileFolderPath": {
						"type": "string",
						"defaultValue": "anon/gen/clim_data/IDCKWCDEA0/tables/qld/brisbane"
					},
					"FileFolderName": {
						"type": "string"
					},
					"FileServer": {
						"type": "string",
						"defaultValue": "ftp://ftp.bom.gov.au/"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"folderPath": {
							"value": "@concat(dataset().FileFolderPath,dataset().FileFolderName)",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_FTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Archive folder in GlobalScape",
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@concat(dataset().filefolder,'\\Archive')",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "tag_id",
						"type": "String"
					},
					{
						"name": "time",
						"type": "String"
					},
					{
						"name": "counter",
						"type": "String"
					},
					{
						"name": "event",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_BinaryFile_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@concat(dataset().filefolder,'\\Archive')",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_BinaryFile_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().filefolder",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_Chris21_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Chris21"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filefolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_FileExists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": {
							"value": "@dataset().p_ServerName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"p_FileFolder": {
						"type": "string"
					},
					"p_FileName": {
						"type": "string"
					},
					"p_ServerName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().p_FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_FileFolder",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_FileSize')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": {
							"value": "@dataset().server",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"server": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filefolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_SUMS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": {
							"value": "@dataset().server",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"filefolder": {
						"type": "string",
						"defaultValue": "SUMS"
					},
					"server": {
						"type": "string",
						"defaultValue": "\\\\Nfujprd200\\EBI_PROD_LANDING"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filefolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_SUMS_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": {
							"value": "@dataset().folderlocation",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"folderlocation": {
						"type": "string",
						"defaultValue": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filefolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_ServiceNow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"p_FileFolder": {
						"type": "string",
						"defaultValue": "ServiceNow\\Pre-Prod"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().p_FileFolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_TFS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().filefolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_MidServer_ServiceNow_Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().filefolder",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_MidServer_ServiceNow_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_ServiceNow_MidServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_MidServerLocation": {
							"value": "@dataset().p_MidServerLocation",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"p_MidServerLocation": {
						"type": "string",
						"defaultValue": "\\\\NFUJPRD281\\c$\\Utils\\PROD\\export\\updates"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_ServiceNow_MidServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_NFUJPRD301_ICN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_NFUJPRD301",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": "ICN\\Target"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_NFUJPRD301')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_globalscape_urbanHQ')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_globalscape_PowerBI_file",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "UrbanHQ"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FileFolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_globalscape_PowerBI_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_File_NFUJPRD202')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_NFUJPRD202",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TargetFilePath": {
						"type": "string"
					},
					"TargetFileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"EscapeCharacter": {
						"type": "string"
					},
					"FirstRowHeader": {
						"type": "int"
					}
				},
				"folder": {
					"name": "File Extract"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().TargetFilePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().EscapeCharacter",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@equals(dataset().FirstRowHeader,1)",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().QuoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_NFUJPRD202')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_File_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"DirectoryName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_File_globalscape')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"TargetFilePath": {
						"type": "string"
					},
					"TargetFileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"EscapeCharacter": {
						"type": "string"
					},
					"FirstRowHeader": {
						"type": "int"
					}
				},
				"folder": {
					"name": "File Extract"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().TargetFilePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().EscapeCharacter",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@equals(dataset().FirstRowHeader,1)",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().QuoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Files_NFUJPRD202_GDrive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_NFUJPRD202_GDrive",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TargetFilePath": {
						"type": "string"
					},
					"TargetFileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"EscapeCharacter": {
						"type": "string"
					},
					"FirstRowHeader": {
						"type": "int"
					}
				},
				"folder": {
					"name": "PowerBI Tactical"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().TargetFilePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().EscapeCharacter",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@equals(dataset().FirstRowHeader,1)",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().QuoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_NFUJPRD202_GDrive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_GlobalScape_ExcelFile_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference",
					"parameters": {
						"p_ServerPath": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"parameters": {
					"Filefolder": {
						"type": "string",
						"defaultValue": "NOPV"
					},
					"SheetName": {
						"type": "string",
						"defaultValue": "Bank_Details_Check"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "Bank_Details_Check_2023_02_08.xlsx"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().SheetName",
						"type": "Expression"
					},
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Filefolder",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_HTTP_CSV_IncludeHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HTTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().HTTPURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"HTTPURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_HTTP_DelimitedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HTTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_HTTP_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HTTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HTTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_HTTP_ZipBin_Parameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HTTP_Parameter",
					"type": "LinkedServiceReference",
					"parameters": {
						"s_url": {
							"value": "@dataset().s_url_base",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"s_url_base": {
						"type": "string",
						"defaultValue": "http://www.bom.gov.au/"
					},
					"s_url_relative": {
						"type": "string",
						"defaultValue": "fwo/IDQ65389/IDQ65389%2E540363%2Etbl.shtml"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().s_url_relative",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HTTP_Parameter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ICN_Payment_Extract_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_NFUJPRD202",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilePath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ICN Payment Extract"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FilePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_NFUJPRD202')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_MySQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_MySQL_NetAppManagement",
					"type": "LinkedServiceReference",
					"parameters": {
						"Databasename": {
							"value": "@dataset().Databasename",
							"type": "Expression"
						},
						"SecretPasswordName": {
							"value": "@dataset().SecretPasswordName",
							"type": "Expression"
						},
						"Servername": {
							"value": "@dataset().Servername",
							"type": "Expression"
						},
						"Username": {
							"value": "@dataset().UserName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Databasename": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"Servername": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_MySQL_NetAppManagement')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Oracle_Framework')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ORAC_Framework",
					"type": "LinkedServiceReference",
					"parameters": {
						"HostName": {
							"value": "@dataset().HostName",
							"type": "Expression"
						},
						"PortNo": {
							"value": "@dataset().PortNo",
							"type": "Expression"
						},
						"SID": {
							"value": "@dataset().SID",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretPasswordName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"HostName": {
						"type": "string"
					},
					"PortNo": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ORAC_Framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Oracle_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ORAC_Framework",
					"type": "LinkedServiceReference",
					"parameters": {
						"HostName": {
							"value": "@dataset().HostName",
							"type": "Expression"
						},
						"PortNo": {
							"value": "@dataset().PortNo",
							"type": "Expression"
						},
						"SID": {
							"value": "@dataset().SID",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretPasswordName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"HostName": {
						"type": "string",
						"defaultValue": "QNDCPRD137.corporate.urbanutilities.internal"
					},
					"PortNo": {
						"type": "string",
						"defaultValue": "1521"
					},
					"SID": {
						"type": "string",
						"defaultValue": "SDCM"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "EBI_TECHM_USERS"
					},
					"SecretPasswordName": {
						"type": "string",
						"defaultValue": "gis-ebi-techm-users"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ORAC_Framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_EDWDiscovery_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_Framework",
					"type": "LinkedServiceReference",
					"parameters": {
						"Servername": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"Databasename": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"SecretPasswordName": {
							"value": "@dataset().SecretPasswordName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "PRDC04-SQL"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "EDW_Discovery"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "urbanutilities\\svc-EBI_PRDC04_AGT"
					},
					"SecretPasswordName": {
						"type": "string",
						"defaultValue": "SVC-EBI-PRDC04-AGT"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_Framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_EDWDiscovery_OnPrem_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_Framework",
					"type": "LinkedServiceReference",
					"parameters": {
						"Servername": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"Databasename": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"SecretPasswordName": {
							"value": "@dataset().SecretPasswordName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV052"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "EDW_Discovery"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "urbanutilities\\svc-EBI_PRDC04_AGT"
					},
					"SecretPasswordName": {
						"type": "string",
						"defaultValue": "SVC-EBI-PRDC04-AGT"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "HiAffinity"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "BPACKAGE"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_Framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_ELLIPSE_ANALYTICS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_ELLIPSE_ANALYTICS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Z_RUN_HISTORY"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_ELLIPSE_ANALYTICS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Temetra_Geospatial_Meters_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HTTPS_Temetra_Geospatial_API_EndPoint",
					"type": "LinkedServiceReference",
					"parameters": {
						"temetra_api_endpoint": "https://au.temetra.com/api//file",
						"networkmeterload": "1",
						"auth_token": "1c4be2ef9009863ac5c9af1b55051a"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HTTPS_Temetra_Geospatial_API_EndPoint')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADF_LS_AKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://quu-ea-prd-da-key-vault.vault.azure.net/",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ADF_LS_AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_quueadadlslanding001')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_ABLB_quueadadlslanding001_properties_typeProperties_serviceEndpoint')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_quueaprddasrclanding001')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_ABLB_quueaprddasrclanding001_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "BlobStorage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_quueaprdicndlslanding001')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_ABLB_quueaprdicndlslanding001_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"APIBaseURL": {
						"type": "string",
						"defaultValue": "https://auapi.envizi.com/api/data"
					},
					"APIReport": {
						"type": "string",
						"defaultValue": "monthlydatasummaryallmeasures"
					},
					"APICallParameter": {
						"type": "string",
						"defaultValue": "End_Period"
					},
					"APICallParameterValue": {
						"type": "string",
						"defaultValue": "Current_Month"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('LS_API_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "Envizi-API-Password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_EDWDiscovery')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_EDWDiscovery_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_EDWDiscovery_Dev_Test')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_EDWDiscovery_Dev_Test_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "dev-test-edw-discovery-admin-password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_EDWMart')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_EDWMart_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_EDWTactical')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_EDWTactical_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_DBR_ADF_Job_Cluster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Azure Databricks Access Token",
				"parameters": {
					"databricksclusterid": {
						"type": "string",
						"defaultValue": "0417-051914-axons909"
					},
					"databrickssecretname": {
						"type": "string",
						"defaultValue": "databricks-token"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://australiaeast.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().databrickssecretname",
							"type": "Expression"
						}
					},
					"existingClusterId": "[parameters('LS_DBR_ADF_Job_Cluster_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FS_FTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Host": {
						"type": "string",
						"defaultValue": "ftp://ftp.bom.gov.au/"
					}
				},
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('LS_FS_FTP_properties_typeProperties_host')]",
					"port": 21,
					"enableSsl": false,
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FS_Globalscape')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"p_ServerPath": {
						"type": "string",
						"defaultValue": "\\\\Nfujprd310\\ebi_prod_landing"
					}
				},
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_FS_Globalscape_properties_typeProperties_host')]",
					"userId": "[parameters('LS_FS_Globalscape_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "SVC-EBI-PRDC04-AGT"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FS_NFUJPRD202')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_FS_NFUJPRD202_properties_typeProperties_host')]",
					"userId": "[parameters('LS_FS_NFUJPRD202_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "SVC-EBI-PRDC04-AGT"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FS_NFUJPRD202_GDrive')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_FS_NFUJPRD202_GDrive_properties_typeProperties_host')]",
					"userId": "[parameters('LS_FS_NFUJPRD202_GDrive_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "svc-ebi-prdc04-agt"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FS_NFUJPRD301')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_FS_NFUJPRD301_properties_typeProperties_host')]",
					"userId": "[parameters('LS_FS_NFUJPRD301_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "SVC-EBI-PRDC04-AGT"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FS_ServiceNow_MidServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Service Now mid-server -    \\\\NFUJPRD281\\c$\\Utils\\PROD\\export\\updates",
				"parameters": {
					"p_MidServerLocation": {
						"type": "string",
						"defaultValue": "\\\\NFUJPRD281\\c$\\Utils\\PROD\\export\\updates"
					}
				},
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_FS_ServiceNow_MidServer_properties_typeProperties_host')]",
					"userId": "[parameters('LS_FS_ServiceNow_MidServer_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "svc-ebi-prdc04-agt"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FS_globalscape_PowerBI_file')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_FS_globalscape_PowerBI_file_properties_typeProperties_host')]",
					"userId": "[parameters('LS_FS_globalscape_PowerBI_file_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "svc-ebi-prdc04-agt"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_HTTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_HTTPS_Temetra_Geospatial_API_EndPoint')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the temetra geospatial API Endpoint for the bulk load. This endpoint will download a csv file.",
				"parameters": {
					"temetra_api_endpoint": {
						"type": "string",
						"defaultValue": "https://au.temetra.com/api//file"
					},
					"networkmeterload": {
						"type": "string",
						"defaultValue": "1"
					},
					"auth_token": {
						"type": "string",
						"defaultValue": "1c4be2ef9009863ac5c9af1b55051a"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTPS_Temetra_Geospatial_API_EndPoint_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_HTTP_Parameter')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"s_url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_Parameter_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_MySQL_NetAppManagement')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Databasename": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"Servername": {
						"type": "string"
					},
					"Username": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('LS_MySQL_NetAppManagement_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretPasswordName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ORAC_Framework')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"HostName": {
						"type": "string"
					},
					"PortNo": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('LS_ORAC_Framework_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SF')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Salesforce",
				"typeProperties": {
					"environmentUrl": "[parameters('LS_SF_properties_typeProperties_environmentUrl')]",
					"username": "[parameters('LS_SF_properties_typeProperties_username')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "salesforce-prod-analytics-support-password"
					},
					"securityToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "salesforce-prod-analytics-support-securitytoken"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_ELLIPSE_ANALYTICS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_SQL_ELLIPSE_ANALYTICS_properties_typeProperties_connectionString_secretName')]"
					},
					"userName": "[parameters('LS_SQL_ELLIPSE_ANALYTICS_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "svc-ebi-prdc04-agt"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_Framework')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Servername": {
						"type": "string",
						"defaultValue": "PRDC04-SQL"
					},
					"Databasename": {
						"type": "string",
						"defaultValue": "EDW_DISCOVERY"
					},
					"SecretPasswordName": {
						"type": "string",
						"defaultValue": "svc-ebi-prdc04-agt"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "urbanutilities\\svc-EBI_PRDC04_AGT"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_Framework_connectionString')]",
					"userName": "[parameters('LS_SQL_Framework_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretPasswordName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABN_daily_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ABN data Ingestion via Web Api",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_ABN_Main",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-04-30T05:49:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ABN_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BOM_Daily_Rainfall')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "BOM_Daily_Rainfall",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('BOM_Daily_Rainfall_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-05-23T01:17:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								11
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BOM_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_BOM_SourceToAsql",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2020-03-23T20:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"monthDays": [
								3,
								4,
								5,
								6,
								7,
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								17,
								18,
								19,
								20,
								21,
								16,
								22,
								23,
								24,
								25,
								26,
								27,
								28,
								-1,
								31,
								30,
								29
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_SourceToAsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bom_Forecast_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_BOM_Forecast_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Bom_Forecast_Daily_Trigger_properties_PL_BOM_Forecast_Main_parameters_SourceName')]",
							"databricksclusterid": "[parameters('Bom_Forecast_Daily_Trigger_properties_PL_BOM_Forecast_Main_parameters_databricksclusterid')]",
							"databrickssecretname": "[parameters('Bom_Forecast_Daily_Trigger_properties_PL_BOM_Forecast_Main_parameters_databrickssecretname')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-10-15T05:29:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								21
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_Forecast_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chloroclam_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Evoqua_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Chloroclam_Daily_Trigger_properties_PL_Evoqua_Main_parameters_SourceName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-09T03:55:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Evoqua_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chris21_Weekly_Trigger_Monday')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Every Thursday loading Chris21 Payroll files.",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Chris21_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_OnlyBlobtoASQL')]",
							"EmailTo": "[parameters('Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_EmailTo')]",
							"LogicAppURL": "[parameters('Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_LogicAppURL')]",
							"TriggerName": "[parameters('Chris21_Weekly_Trigger_Monday_properties_PL_Chris21_Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-07-31T01:09:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								12
							],
							"weekDays": [
								"Monday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Chris21_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chris21_Weekly_Trigger_Thursday')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Every Thursday loading Chris21 Payroll files.",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Chris21_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_OnlyBlobtoASQL')]",
							"EmailTo": "[parameters('Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_EmailTo')]",
							"LogicAppURL": "[parameters('Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_LogicAppURL')]",
							"TriggerName": "[parameters('Chris21_Weekly_Trigger_Thursday_properties_PL_Chris21_Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2020-07-31T01:09:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								8
							],
							"weekDays": [
								"Thursday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Chris21_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cost_Summary_Monthly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Cost_Summary_By_Region",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2020-07-23T05:14:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							],
							"monthDays": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Cost_Summary_By_Region')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daptiv_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('Daptiv_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-04-07T11:30:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								11
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EAMS_Integration_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EAMS_Integration",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('EAMS_Integration_Daily_Trigger_properties_PL_EAMS_Integration_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('EAMS_Integration_Daily_Trigger_properties_PL_EAMS_Integration_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('EAMS_Integration_Daily_Trigger_properties_PL_EAMS_Integration_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-02-10T01:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EAMS_Integration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ellipse9_WorkOrderModel_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Ellipse9_DataModel_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('Ellipse9_WorkOrderModel_Daily_Trigger_properties_PL_Ellipse9_DataModel_Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-19T03:12:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Ellipse9_DataModel_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Envizi_Monthly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('Envizi_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2022-10-21T00:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"hours": [
								5
							],
							"monthDays": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FSE_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_FSE_Source_To_ASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-06-23T06:30:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								45
							],
							"hours": [
								0
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_FSE_Source_To_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FSE_Hourly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "FSE_Hourly_Trigger",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_FSE_Source_To_ASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-06-23T06:31:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								50
							],
							"hours": [
								5,
								6,
								7,
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								16,
								17,
								18,
								19,
								4
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_FSE_Source_To_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FSE_StartFSECluster_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_StartFSECluster",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-06-24T05:27:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								45
							],
							"hours": [
								5,
								6,
								7,
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								16,
								17,
								18,
								19,
								4
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_StartFSECluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GIS_SDCM_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('GIS_SDCM_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-01-20T19:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								20
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GIS_SDPROC_Weekly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('GIS_SDPROC_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-01-31T19:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							],
							"weekDays": [
								"Tuesday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GIS_SDUV_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('GIS_SDUV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-01-20T22:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								22
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GIS_SD_MANAGED_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_GIS_Source_To_ASQL_Oracle",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('GIS_SD_MANAGED_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('GIS_SD_MANAGED_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('GIS_SD_MANAGED_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-01-20T20:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								20
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_GIS_Source_To_ASQL_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GIS_SD_REFERENCE_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_GIS_Source_To_ASQL_Oracle",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('GIS_SD_REFERENCE_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('GIS_SD_REFERENCE_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('GIS_SD_REFERENCE_Daily_Trigger_properties_PL_GIS_Source_To_ASQL_Oracle_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2021-01-20T20:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								20
							],
							"weekDays": [
								"Sunday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_GIS_Source_To_ASQL_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HiAffinity_BPackage_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_DM_SourceToASQL_HiAffinity",
							"type": "PipelineReference"
						},
						"parameters": {
							"TargetServerName": "[parameters('HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_TargetServerName')]",
							"TargetDatabaseName": "[parameters('HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_TargetDatabaseName')]",
							"TargetUserName": "[parameters('HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_TargetUserName')]",
							"TargetSecretPasswordName": "[parameters('HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_TargetSecretPasswordName')]",
							"SourceHostName": "[parameters('HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourceHostName')]",
							"SourcePortNo": "[parameters('HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourcePortNo')]",
							"SourceSID": "[parameters('HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourceSID')]",
							"SourceUserName": "[parameters('HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourceUserName')]",
							"SourceSecretPasswordName": "[parameters('HiAffinity_BPackage_Daily_Trigger_properties_PL_EDWDiscovery_DM_SourceToASQL_HiAffinity_parameters_SourceSecretPasswordName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-11-11T09:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToASQL_HiAffinity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hydronet_Locations_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This trigger is a prerequisite to other hydronet ingestions",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Hydronet_Locations_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"DataSources": "[parameters('Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_DataSources')]",
							"SourceName": "[parameters('Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_SourceName')]",
							"DestinationTable": "[parameters('Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_DestinationTable')]",
							"TriggerName": "[parameters('Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_TriggerName')]",
							"KeyVaultPath": "[parameters('Hydronet_Locations_Daily_Trigger_properties_PL_Hydronet_Locations_Main_parameters_KeyVaultPath')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-05-21T06:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								10
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Hydronet_Locations_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hydronet_TimeSeries_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Time series trigger, this has a reliance on the Locations data for hydronet",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Hydronet_TimeSeries_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"StartDate": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_StartDate')]",
							"EndDate": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_EndDate')]",
							"DaysPerFile": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_DaysPerFile')]",
							"LocationCodes": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_LocationCodes')]",
							"LocationCodesExclude": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_LocationCodesExclude')]",
							"TimeZone": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_TimeZone')]",
							"DataSources": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_DataSources')]",
							"SourceName": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_SourceName')]",
							"DestinationTable": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_DestinationTable')]",
							"VariableCodes": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_VariableCodes')]",
							"TriggerName": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_TriggerName')]",
							"KeyVaultPath": "[parameters('Hydronet_TimeSeries_Daily_Trigger_properties_PL_Hydronet_TimeSeries_Main_parameters_KeyVaultPath')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-05-21T06:45:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								10
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Hydronet_TimeSeries_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ICN_Data_Copy_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_ICN_Data_Copy",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2021-07-16T01:30:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							],
							"monthDays": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ICN_Data_Copy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ICN_Payment_Extract_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_File_Export_To_NFUJPRD202",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileExportName": "[parameters('ICN_Payment_Extract_Daily_Trigger_properties_PL_File_Export_To_NFUJPRD202_parameters_FileExportName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-08-19T23:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_File_Export_To_NFUJPRD202')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ixom_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('Ixom_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-07-14T04:59:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Kantar_Monthly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Kantar_DataModel_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_AllowPartialUpdateOfDiscovery')]",
							"Additional_MappingParam": "[parameters('Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_Additional_MappingParam')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('Kantar_Monthly_Trigger_properties_PL_Kantar_DataModel_Main_parameters_TriggerName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2022-11-11T09:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								6
							],
							"monthDays": [
								26,
								27,
								28,
								29,
								30,
								31,
								-1,
								1,
								2,
								3,
								4,
								5,
								6,
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Kantar_DataModel_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LIMS_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_LIMS_Source_To_ASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"Source_Name": "[parameters('LIMS_Daily_Trigger_properties_PL_LIMS_Source_To_ASQL_parameters_Source_Name')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:49:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								17
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_LIMS_Source_To_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LIWIS_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_LIWIS_SourceToAsql",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:43:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_LIWIS_SourceToAsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Liwis_DataModel_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDW_Mart_LIWIS",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourcename": "[parameters('Liwis_DataModel_Daily_Trigger_properties_PL_EDW_Mart_LIWIS_parameters_sourcename')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-06-28T08:20:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDW_Mart_LIWIS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MDS_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_MDSProd_SourceToASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-26T22:52:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_MDSProd_SourceToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NOPVDigital_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "run the NOPV datasets from blob json files into EDW_Discovery",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"Additional_MappingParam": "[parameters('NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_Additional_MappingParam')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('NOPVDigital_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-06-03T03:15:00",
						"timeZone": "E. Australia Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NOPV_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('NOPV_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-12-08T22:57:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								8
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NetworkAccess_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_NetworkAccess_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('NetworkAccess_Daily_Trigger_properties_PL_NetworkAccess_Main_parameters_SourceName')]",
							"OnlyBlobtoASQL": "[parameters('NetworkAccess_Daily_Trigger_properties_PL_NetworkAccess_Main_parameters_OnlyBlobtoASQL')]",
							"Additional_MappingParam": "[parameters('NetworkAccess_Daily_Trigger_properties_PL_NetworkAccess_Main_parameters_Additional_MappingParam')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-07-20T16:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								15
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_NetworkAccess_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWindows_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "OpenWindows Daily Trigger",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Openwindows_SourceToASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-04-30T05:47:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								21
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Openwindows_SourceToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Promaster_Monthly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('Promaster_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2022-11-11T00:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"hours": [
								7
							],
							"monthDays": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QAO_File_Export_Monthly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Every 2nd Monday of each Month at 9 : 00 AM",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_File_Export_To_globalscape",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileExportName": "[parameters('QAO_File_Export_Monthly_Trigger_properties_PL_File_Export_To_globalscape_parameters_FileExportName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2020-09-22T02:04:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							],
							"monthlyOccurrences": [
								{
									"day": "Sunday",
									"occurrence": 2
								}
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_File_Export_To_globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Reference_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('REF_Daily_Trigger_properties_PL_Reference_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('REF_Daily_Trigger_properties_PL_Reference_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('REF_Daily_Trigger_properties_PL_Reference_Main_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-26T22:56:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Reference_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SILO_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Silo_Weather_Observations",
							"type": "PipelineReference"
						},
						"parameters": {
							"Source_Name": "[parameters('SILO_Daily_Trigger_properties_PL_Silo_Weather_Observations_parameters_Source_Name')]",
							"Silo_load_type": "[parameters('SILO_Daily_Trigger_properties_PL_Silo_Weather_Observations_parameters_Silo_load_type')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:47:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Silo_Weather_Observations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SUMS_Hourly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('SUMS_Hourly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2022-09-06T15:40:00",
						"timeZone": "E. Australia Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SUMS_Mart_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_SUMS_Daily_Consumption_And_Analysis",
							"type": "PipelineReference"
						},
						"parameters": {
							"Source_Name": "[parameters('SUMS_Mart_Daily_Trigger_properties_PL_SUMS_Daily_Consumption_And_Analysis_parameters_Source_Name')]",
							"Load_Type": "[parameters('SUMS_Mart_Daily_Trigger_properties_PL_SUMS_Daily_Consumption_And_Analysis_parameters_Load_Type')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-08-03T00:15:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								12
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_SUMS_Daily_Consumption_And_Analysis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Salesforce_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Salesforce_DM_SourcetoBlob_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"Source_Name": "[parameters('Salesforce_Daily_Trigger_properties_PL_Salesforce_DM_SourcetoBlob_Master_parameters_Source_Name')]",
							"SourceToBlob": "[parameters('Salesforce_Daily_Trigger_properties_PL_Salesforce_DM_SourcetoBlob_Master_parameters_SourceToBlob')]",
							"BlobtoAsql": "[parameters('Salesforce_Daily_Trigger_properties_PL_Salesforce_DM_SourcetoBlob_Master_parameters_BlobtoAsql')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-01-15T06:33:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Salesforce_DM_SourcetoBlob_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ServiceNow_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_ServiceNow_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_SourceName')]",
							"OnlySourceToGSFileServer": "[parameters('ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_OnlySourceToGSFileServer')]",
							"OnlyGSFileServerToBlob": "[parameters('ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_OnlyGSFileServerToBlob')]",
							"OnlyBlobtoASQL": "[parameters('ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_OnlyBlobtoASQL')]",
							"p_MidServerLocation": "[parameters('ServiceNow_Daily_Trigger_properties_PL_ServiceNow_Main_parameters_p_MidServerLocation')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-02-23T04:35:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ServiceNow_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEMETRA_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Temetra_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"databricks_cluster_id": "[parameters('TEMETRA_Daily_Trigger_properties_PL_Temetra_Main_parameters_databricks_cluster_id')]",
							"databricks_secret_name": "[parameters('TEMETRA_Daily_Trigger_properties_PL_Temetra_Main_parameters_databricks_secret_name')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:47:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								21
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TFS_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_TFSCS_SourceToASQL",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:48:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								17
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_TFSCS_SourceToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Takadu_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Takadu_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlyBlobtoASQL": "[parameters('Takadu_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"OnlySourceToBlob": "[parameters('Takadu_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('Takadu_Daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-09-28T06:04:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Takadu_Weekly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('Takadu_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlyBlobtoASQL": "[parameters('Takadu_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"OnlySourceToBlob": "[parameters('Takadu_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('Takadu_Weekly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2021-09-28T06:05:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							],
							"weekDays": [
								"Monday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Temetra_Geospatial_Devices_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Temetra_Geospatial_File_Bulk_Load",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourcename": "[parameters('Temetra_Geospatial_Devices_Daily_Trigger_properties_PL_Temetra_Geospatial_File_Bulk_Load_parameters_sourcename')]",
							"databricks_cluster_id": "[parameters('Temetra_Geospatial_Devices_Daily_Trigger_properties_PL_Temetra_Geospatial_File_Bulk_Load_parameters_databricks_cluster_id')]",
							"databricks_secret_name": "[parameters('Temetra_Geospatial_Devices_Daily_Trigger_properties_PL_Temetra_Geospatial_File_Bulk_Load_parameters_databricks_secret_name')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-12-09T01:42:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Geospatial_File_Bulk_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UrbanHQ_EDW_Monthly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "History Tables",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('UrbanHQ_EDW_Monthly_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-01-30T22:57:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								6
							],
							"monthDays": [
								-1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UrbanHQ_EDW_daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyBlobtoASQL')]",
							"AllowPartialUpdateOfDiscovery": "[parameters('UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_AllowPartialUpdateOfDiscovery')]",
							"OnlyExtractDeletedRecordsFromSourceToBlob": "[parameters('UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyExtractDeletedRecordsFromSourceToBlob')]",
							"OnlyDeleteRecordsFromBlobToASQL": "[parameters('UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_OnlyDeleteRecordsFromBlobToASQL')]",
							"TriggerName": "[parameters('UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_TriggerName')]",
							"HttpTriggerCategory": "[parameters('UrbanHQ_EDW_daily_Trigger_properties_PL_EDWDiscovery_SourceToDiscovery_Master_parameters_HttpTriggerCategory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-02-08T00:53:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_SourceToDiscovery_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UrbanHQ_daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_UrbanHQ_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('UrbanHQ_daily_Trigger_properties_PL_UrbanHQ_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('UrbanHQ_daily_Trigger_properties_PL_UrbanHQ_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('UrbanHQ_daily_Trigger_properties_PL_UrbanHQ_Main_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-06-05T06:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_UrbanHQ_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWI_Daily_Scondary_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_WWI_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('WWI_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('WWI_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('WWI_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-06-05T06:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_WWI_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWI_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_WWI_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('WWI_Daily_Trigger_properties_PL_WWI_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('WWI_Daily_Trigger_properties_PL_WWI_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('WWI_Daily_Trigger_properties_PL_WWI_Main_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-06-05T06:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_WWI_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WorkOrder_DataModel_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "updating dimensional work order tables in edw_mart",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_WorkOrder_Model_Main",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-07-28T06:52:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_WorkOrder_Model_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eDNA_Daily_Scondary_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_WWI_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('eDNA_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('eDNA_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('eDNA_Daily_Scondary_Trigger_properties_PL_WWI_Main_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-24T06:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_WWI_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eDNA_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_WWI_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('eDNA_Daily_Trigger_properties_PL_WWI_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('eDNA_Daily_Trigger_properties_PL_WWI_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('eDNA_Daily_Trigger_properties_PL_WWI_Main_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-24T06:00:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_WWI_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eForms_daily_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "eForms_daily_trigger",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_eForms_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('eForms_daily_trigger_properties_PL_eForms_Main_parameters_SourceName')]",
							"OnlyBlobtoASQL": "[parameters('eForms_daily_trigger_properties_PL_eForms_Main_parameters_OnlyBlobtoASQL')]",
							"additional_param": "[parameters('eForms_daily_trigger_properties_PL_eForms_Main_parameters_additional_param')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-14T02:36:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_eForms_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}