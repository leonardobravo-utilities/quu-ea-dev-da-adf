{
	"name": "PL_Framework_TRFM_BlobToASQL_Delete",
	"properties": {
		"activities": [
			{
				"name": "lkp_getlocalstarttime2",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlMISource",
						"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQL_EDWDiscovery",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "FullCopyToBlob",
				"description": "Full Copy from source table into blob storage",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "lkp_getlocalstarttime2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OracleSource",
						"oracleReaderQuery": {
							"value": "select @{replace(replace(pipeline().parameters.BusinessKeyList,'[',''),']','')}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".csv"
						}
					},
					"enableStaging": false,
					"dataIntegrationUnits": 0
				},
				"inputs": [
					{
						"referenceName": "DS_Oracle_OnPrem",
						"type": "DatasetReference",
						"parameters": {
							"HostName": {
								"value": "@pipeline().parameters.Host_Name",
								"type": "Expression"
							},
							"PortNo": {
								"value": "@pipeline().parameters.Port_No",
								"type": "Expression"
							},
							"SID": {
								"value": "@pipeline().parameters.SID",
								"type": "Expression"
							},
							"UserName": {
								"value": "@pipeline().parameters.UserName",
								"type": "Expression"
							},
							"SecretPasswordName": {
								"value": "@pipeline().parameters.SecretPasswordName",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_ABLB_Datalanding",
						"type": "DatasetReference",
						"parameters": {
							"FolderPath": {
								"value": "@pipeline().parameters.Data_Destination_Folder_Path",
								"type": "Expression"
							},
							"TargetFileName": {
								"value": "@concat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)",
								"type": "Expression"
							},
							"ColumnDelimiter": {
								"value": "@pipeline().parameters.ColumnDelimiter",
								"type": "Expression"
							},
							"QuoteCharacter": {
								"value": "@pipeline().parameters.QuoteCharacter",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "GenerateDeleteFile",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "FullCopyToBlob",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/edw_discovery/ETL_Create_Delete_File",
					"baseParameters": {
						"blobcontainer": {
							"value": "@pipeline().parameters.BlobContainer",
							"type": "Expression"
						},
						"blobfilename": {
							"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
							"type": "Expression"
						},
						"columnlist": {
							"value": "@pipeline().parameters.Source_Column_List",
							"type": "Expression"
						},
						"businesskeylist": {
							"value": "@pipeline().parameters.BusinessKeyList",
							"type": "Expression"
						},
						"deltatargetdbname": {
							"value": "@pipeline().parameters.DeltaTargetDbName",
							"type": "Expression"
						},
						"storageaccount": {
							"value": "@pipeline().parameters.StorageAccount",
							"type": "Expression"
						},
						"columndelimiter": {
							"value": "@pipeline().parameters.ColumnDelimiter",
							"type": "Expression"
						},
						"quotecharacter": {
							"value": "@base64(pipeline().parameters.QuoteCharacter)",
							"type": "Expression"
						},
						"rowsource": {
							"value": "@pipeline().parameters.RowSource",
							"type": "Expression"
						},
						"dbhostname": {
							"value": "@pipeline().parameters.DbHostName",
							"type": "Expression"
						},
						"skipcsvrows": "0",
						"azuretargettablename": {
							"value": "@pipeline().parameters.AzureTargetTableName",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_DBR_ADF_Job_Cluster",
					"type": "LinkedServiceReference",
					"parameters": {
						"databricksclusterid": {
							"value": "@pipeline().parameters.databricksclusterid",
							"type": "Expression"
						},
						"databrickssecretname": {
							"value": "@pipeline().parameters.databrickssecretname",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "GetFileDetails",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "GenerateDeleteFile",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_ABLB_Datalanding",
						"type": "DatasetReference",
						"parameters": {
							"FolderPath": {
								"value": "@pipeline().parameters.Data_Destination_Folder_Path",
								"type": "Expression"
							},
							"TargetFileName": {
								"value": "@concat(pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
								"type": "Expression"
							},
							"ColumnDelimiter": {
								"value": "@pipeline().parameters.ColumnDelimiter",
								"type": "Expression"
							},
							"QuoteCharacter": {
								"value": "@pipeline().parameters.QuoteCharacter",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "CheckFileExists",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "GetFileDetails",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('GetFileDetails').output.Exists",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "DeleteRecords",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/edw_discovery/ETL_Merge_Delete",
								"baseParameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.BlobContainer",
										"type": "Expression"
									},
									"blobfilename": {
										"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"columnlist": {
										"value": "@pipeline().parameters.Source_Column_List",
										"type": "Expression"
									},
									"businesskeylist": {
										"value": "@pipeline().parameters.BusinessKeyList",
										"type": "Expression"
									},
									"deltastagingdbname": {
										"value": "@pipeline().parameters.DeltaStagingDbName",
										"type": "Expression"
									},
									"deltatargetdbname": {
										"value": "@pipeline().parameters.DeltaTargetDbName",
										"type": "Expression"
									},
									"deltastagetablename": {
										"value": "@pipeline().parameters.DeltaStageTableName",
										"type": "Expression"
									},
									"azuresqltemptablename": {
										"value": "@pipeline().parameters.AzureSqlTempTableName",
										"type": "Expression"
									},
									"storageaccount": {
										"value": "@pipeline().parameters.StorageAccount",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@base64(pipeline().parameters.QuoteCharacter)",
										"type": "Expression"
									},
									"azuresqldbetllastmodifieddtm": {
										"value": "@pipeline().parameters.DeleteProcessCompletionDTM",
										"type": "Expression"
									},
									"deltastagingtableparquetfilepath": {
										"value": "@pipeline().parameters.DeltaStagingTableParquetFilePath",
										"type": "Expression"
									},
									"DbHostName": {
										"value": "@pipeline().parameters.DbHostName",
										"type": "Expression"
									},
									"RowSource": {
										"value": "@pipeline().parameters.RowSource",
										"type": "Expression"
									},
									"skipcsvrows": "0",
									"azuresqltargettablename": {
										"value": "@pipeline().parameters.AzureTargetTableName",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_DBR_ADF_Job_Cluster",
								"type": "LinkedServiceReference",
								"parameters": {
									"databricksclusterid": {
										"value": "@pipeline().parameters.databricksclusterid",
										"type": "Expression"
									},
									"databrickssecretname": {
										"value": "@pipeline().parameters.databrickssecretname",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "DeleteRecordsInDatabase",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "DeleteRecords",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_delete_from_azuresqltable]",
								"storedProcedureParameters": {
									"table_source": {
										"value": {
											"value": "@pipeline().parameters.AzureSqlTempTableName",
											"type": "Expression"
										},
										"type": "String"
									},
									"table_target": {
										"value": {
											"value": "@pipeline().parameters.AzureTargetTableName",
											"type": "Expression"
										},
										"type": "String"
									},
									"tableid": {
										"value": {
											"value": "@pipeline().parameters.TableID",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_ASQL_EDWDiscovery",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"Data_Source_Table_Name": {
				"type": "String",
				"defaultValue": "dbo.MSF660"
			},
			"Data_Source_WaterMarkColumn": {
				"type": "String",
				"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
			},
			"Data_Destination_Folder_Path": {
				"type": "String",
				"defaultValue": "ellipse9-datalanding/MSF660"
			},
			"TableID": {
				"type": "string",
				"defaultValue": "1"
			},
			"Data_Destination_File_Name": {
				"type": "string",
				"defaultValue": "MSF660"
			},
			"SourceServerName": {
				"type": "string",
				"defaultValue": "NFUJDEV073"
			},
			"SourceDatabaseName": {
				"type": "string",
				"defaultValue": "Datamart"
			},
			"File_Name_Ext": {
				"type": "string",
				"defaultValue": ".csv"
			},
			"Join_Condition": {
				"type": "string",
				"defaultValue": " "
			},
			"Source_Column_List": {
				"type": "string",
				"defaultValue": "*"
			},
			"ColumnDelimiter": {
				"type": "string",
				"defaultValue": ","
			},
			"QuoteCharacter": {
				"type": "string",
				"defaultValue": "¬"
			},
			"source_where_filter": {
				"type": "string",
				"defaultValue": " "
			},
			"UserName": {
				"type": "string"
			},
			"SecretPasswordName": {
				"type": "string"
			},
			"BlobContainer": {
				"type": "string"
			},
			"BusinessKeyList": {
				"type": "string"
			},
			"DeltaTargetDbName": {
				"type": "string"
			},
			"StorageAccount": {
				"type": "string"
			},
			"RowSource": {
				"type": "string"
			},
			"DbHostName": {
				"type": "string"
			},
			"AzureTargetTableName": {
				"type": "string"
			},
			"DeltaStagingTableParquetFilePath": {
				"type": "string"
			},
			"DeleteProcessCompletionDTM": {
				"type": "string"
			},
			"DeltaStagingDbName": {
				"type": "string"
			},
			"DeltaStageTableName": {
				"type": "string"
			},
			"AzureSqlTempTableName": {
				"type": "string"
			},
			"Host_Name": {
				"type": "string"
			},
			"Port_No": {
				"type": "string"
			},
			"SID": {
				"type": "string"
			},
			"databricksclustername": {
				"type": "string"
			},
			"databricksclusterid": {
				"type": "string"
			},
			"databrickssecretname": {
				"type": "string"
			}
		},
		"folder": {
			"name": "FrameWork"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}