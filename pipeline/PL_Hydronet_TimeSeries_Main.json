{
	"name": "PL_Hydronet_TimeSeries_Main",
	"properties": {
		"activities": [
			{
				"name": "For Each Processing Set",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Location Codes",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Processing Set",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "GetColumnMappings",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Processing Set').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "TimeseriesToCSV",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Obtain Token",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"additionalColumns": [
										{
											"name": "DataSourceCode",
											"value": {
												"value": "@item().DataSourceGroup",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "HttpReadSettings",
										"requestMethod": "POST",
										"additionalHeaders": {
											"value": "Authorization:Bearer @{activity('Obtain Token').output.access_token}\ncontent-type:application/json",
											"type": "Expression"
										},
										"requestBody": {
											"value": "@{concat('{\n              \"Readers\": [\n    {\n                             \"DataSourceCode\": \"',item().DataSourceGroup,'\",\n                             \"Settings\": {\n                                           \"StructureType\": \"TimeSeries\",\n                                           \"StartDate\": \"',item().JobStartDate,'\",\n                                           \"EndDate\": \"',item().JobEndDate,'\",\n                                           \"VariableCodes\": ', string(pipeline().parameters.VariableCodes),',\n                                           \"LocationCodes\": [',activity('Get Location Codes').output.firstRow.LocationList,'],\n                                           \"ReadQuality\": false,\n                                           \"Interval\": {\n                                                          \"Type\": \"None\"\n                                           },\n                                           \"ReadAccumulated\": false,\n                                           \"CalculationType\":\"None\"\n                             }\n              }],\n              \"Exporter\": {\n                             \"DataFormatCode\": \"hydronet.csv.simple\"\n              },\n\t      \"TimeZoneOffset\": \"',pipeline().parameters.TimeZone,'\"\n}')}",
											"type": "Expression"
										},
										"requestTimeout": ""
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"value": "@json(replace(string(activity('GetColumnMappings').output.firstRow.json_output),'\"path\"','\"name\"'))",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "DS_HTTP_CSV_IncludeHeader",
									"type": "DatasetReference",
									"parameters": {
										"HTTPURL": {
											"value": "@{concat(activity('API-URL').output.value,'timeseries/get?=')}",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ABLB_Datalanding_IncludeHeader",
									"type": "DatasetReference",
									"parameters": {
										"FolderPath": {
											"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].FolderName",
											"type": "Expression"
										},
										"TargetFileName": {
											"value": "@item().FileName",
											"type": "Expression"
										},
										"ColumnDelimiter": {
											"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].ColumnDelimiter",
											"type": "Expression"
										},
										"QuoteCharacter": {
											"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].QuoteCharacter",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Obtain Token",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 5,
								"retryIntervalInSeconds": 30,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"url": "https://login.hydronet.com/auth/realms/hydronet/protocol/openid-connect/token",
								"method": "POST",
								"headers": {
									"content-type": "application/x-www-form-urlencoded"
								},
								"body": {
									"value": "@{concat('grant_type=client_credentials&client_id=',activity('Auth-ClientID').output.value,'&client_secret=',activity('Auth-ClientSecret').output.value,'&')}",
									"type": "Expression"
								},
								"httpRequestTimeout": "00:10:00"
							}
						}
					]
				}
			},
			{
				"name": "Obtain Auth Token",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Auth-ClientID",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Auth-ClientSecret",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "API-URL",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 5,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://login.hydronet.com/auth/realms/hydronet/protocol/openid-connect/token",
					"method": "POST",
					"headers": {
						"content-type": "application/x-www-form-urlencoded"
					},
					"body": {
						"value": "@{concat('grant_type=client_credentials&client_id=',activity('Auth-ClientID').output.value,'&client_secret=',activity('Auth-ClientSecret').output.value,'&')}",
						"type": "Expression"
					},
					"httpRequestTimeout": "00:10:00"
				}
			},
			{
				"name": "Get Data Source Settings",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Obtain Auth Token",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 5,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@{concat(activity('API-URL').output.value,'entity/datasources/get')}",
						"type": "Expression"
					},
					"method": "POST",
					"headers": {
						"Authorization": {
							"value": "Bearer @{activity('Obtain Auth Token').output.access_token}",
							"type": "Expression"
						},
						"Content-type": "application/json"
					},
					"body": {
						"value": "@{concat('{\"DataSourceCodes\":',string(pipeline().parameters.DataSources),',\"RelationDepth\":0, \"TimeZoneOffset\": \"',pipeline().parameters.TimeZone,'\"}')}",
						"type": "Expression"
					},
					"httpRequestTimeout": "00:10:00"
				}
			},
			{
				"name": "Get Processing Set",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Data Source Settings",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Obtain Destination File Details",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[ETL].[Hydronet_GetTimeSeriesDateRange]",
						"storedProcedureParameters": {
							"APIDataJSONString": {
								"type": "String",
								"value": {
									"value": "@string(activity('Get Data Source Settings').output.DataSources)",
									"type": "Expression"
								}
							},
							"DaysPerFile": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.DaysPerFile",
									"type": "Expression"
								}
							},
							"RequestEndDateTime": {
								"type": "DateTime",
								"value": {
									"value": "@pipeline().parameters.EndDate",
									"type": "Expression"
								}
							},
							"FileExtension": {
								"type": "String",
								"value": ".csv"
							},
							"LabelSeperator": {
								"type": "String",
								"value": "|"
							},
							"LocationFilter": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.LocationCodes",
									"type": "Expression"
								}
							},
							"RequestStartDateTime": {
								"type": "DateTime",
								"value": {
									"value": "@pipeline().parameters.StartDate",
									"type": "Expression"
								}
							},
							"TableID": {
								"type": "Int32",
								"value": {
									"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].TableID",
									"type": "Expression"
								}
							},
							"TimeZone": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.TimeZone",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQL_EDWDiscovery",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Get Location Codes",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[ETL].[Hydronet_GetTimeSeriesLocations]",
						"storedProcedureParameters": {
							"LocationExclude": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.LocationCodesExclude",
									"type": "Expression"
								}
							},
							"LocationFilter": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.LocationCodes",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQL_EDWDiscovery",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "Auth-ClientID",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 5,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@{replace(pipeline().parameters.KeyVaultPath,'<secretname>','Hydronet-API-ClientID')}",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Auth-ClientSecret",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 5,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@{replace(pipeline().parameters.KeyVaultPath,'<secretname>','Hydronet-API-ClientSecret')}",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "API-URL",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 5,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@{replace(pipeline().parameters.KeyVaultPath,'<secretname>','HydroNet-Base-URL')}",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Obtain Destination File Details",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_ASQL_EDWDiscovery",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "SourceName",
									"type": "String",
									"value": {
										"value": "@pipeline().parameters.SourceName",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "DestinationTable",
									"type": "String",
									"value": {
										"value": "@pipeline().parameters.DestinationTable",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "Query",
							"text": "DECLARE @SQL NVARCHAR(MAX) = '\nSELECT st.TableID, TargetBlobFilePath AS FolderName, TargetBlobFileName + ''_'' + CONVERT(VARCHAR(10),dbo.udf_getLocalDTM(),112) + TargetBlobFileNameExt AS FileName, QuoteCharacter, ColumnDelimiter\nFROM ETL.SourceTableDetails st\nWHERE EXISTS\n(\n\tSELECT *\n\tFROM ETL.SourceSystem ss\n\tWHERE st.SourceID = ss.SourceID\n\tAND ss.SourceName = @SourceName\n)\nAND AzuresqlTargetTableName = @DestinationTable'\n\nEXEC sp_executesql\t@SQL, \n\t\t\t\t\tN'@SourceName VARCHAR(100), @DestinationTable VARCHAR(200)', \n\t\t\t\t\t@SourceName = @SourceName, \n\t\t\t\t\t@DestinationTable = @DestinationTable"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "If rows to process greater than zero",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "For Each Processing Set",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(activity('Get Processing Set').output.count,0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Set the Source Watermark",
							"description": "The last watermark that we have processed up until. If only a portion of records have been retrieved this should always represent the max source date captured",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_update_incrementaldatevalue]",
								"storedProcedureParameters": {
									"LastModifiedDTM": {
										"value": {
											"value": "@activity('Get Processing Set').output.value[0].IncrementalWaterMark",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"TableID": {
										"value": {
											"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].TableID",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_ASQL_EDWDiscovery",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Land to Destination",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Set the Source Watermark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "PL_EDWDiscovery_SourceToDiscovery_Master",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"SourceName": {
										"value": "@pipeline().parameters.SourceName",
										"type": "Expression"
									},
									"OnlySourceToBlob": false,
									"OnlyBlobtoASQL": true,
									"AllowPartialUpdateOfDiscovery": false,
									"OnlyExtractDeletedRecordsFromSourceToBlob": false,
									"OnlyDeleteRecordsFromBlobToASQL": false,
									"TriggerName": {
										"value": "@pipeline().parameters.TriggerName",
										"type": "Expression"
									},
									"HttpTriggerCategory": "Trigger"
								}
							}
						}
					]
				}
			},
			{
				"name": "GetColumnMappings",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Obtain Destination File Details",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[ETL].[usp_getColumnMapping_json_to_csv]",
						"storedProcedureParameters": {
							"additional_param": {
								"type": "String",
								"value": ""
							},
							"TableID": {
								"type": "Int32",
								"value": {
									"value": "@activity('Obtain Destination File Details').output.resultSets[0].rows[0].TableId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ASQL_EDWDiscovery",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"StartDate": {
				"type": "string",
				"defaultValue": "1900-01-01"
			},
			"EndDate": {
				"type": "string",
				"defaultValue": "1900-01-01"
			},
			"DaysPerFile": {
				"type": "int",
				"defaultValue": 90
			},
			"LocationCodes": {
				"type": "string",
				"defaultValue": "1326,1327"
			},
			"LocationCodesExclude": {
				"type": "string",
				"defaultValue": "@coalesce(null)"
			},
			"TimeZone": {
				"type": "string",
				"defaultValue": "+1000"
			},
			"DataSources": {
				"type": "array",
				"defaultValue": [
					"QUU.BoM.RF3.IDR66"
				]
			},
			"SourceName": {
				"type": "string",
				"defaultValue": "Hydronet"
			},
			"DestinationTable": {
				"type": "string",
				"defaultValue": "Hydronet.Rainfall_Exceedance"
			},
			"VariableCodes": {
				"type": "array",
				"defaultValue": [
					"EY_30min",
					"EY_1hr",
					"EY_2hr",
					"EY_3hr",
					"EY_4.5hr",
					"EY_6hr",
					"EY_9hr",
					"EY_12hr",
					"EY_18hr",
					"EY_24hr",
					"EY_36hr",
					"EY_48hr",
					"EY_72hr",
					"EY_168hr"
				]
			},
			"TriggerName": {
				"type": "string",
				"defaultValue": "Hydronet_Daily_Trigger"
			},
			"KeyVaultPath": {
				"type": "string",
				"defaultValue": "https://quu-ea-tst-da-key-vault.vault.azure.net/secrets/<secretname>?api-version=7.0"
			}
		},
		"variables": {
			"DataSourceSettings": {
				"type": "Array"
			}
		},
		"folder": {
			"name": "Hydronet"
		},
		"annotations": []
	}
}