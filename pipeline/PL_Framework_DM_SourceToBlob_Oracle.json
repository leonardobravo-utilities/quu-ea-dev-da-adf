{
	"name": "PL_Framework_DM_SourceToBlob_Oracle",
	"properties": {
		"description": "Copy new or updated rows only from database using external control table",
		"activities": [
			{
				"name": "Incremental or Full",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "FullCopyToBlob",
							"description": "Full Copy from source table into blob storage",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "lkp_getlocalstarttime2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": {
										"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".csv"
									}
								},
								"enableStaging": false,
								"dataIntegrationUnits": 0
							},
							"inputs": [
								{
									"referenceName": "DS_Oracle_OnPrem",
									"type": "DatasetReference",
									"parameters": {
										"HostName": {
											"value": "@pipeline().parameters.Host_Name",
											"type": "Expression"
										},
										"PortNo": {
											"value": "@pipeline().parameters.Port_No",
											"type": "Expression"
										},
										"SID": {
											"value": "@pipeline().parameters.SID",
											"type": "Expression"
										},
										"UserName": {
											"value": "@pipeline().parameters.User_Name",
											"type": "Expression"
										},
										"SecretPasswordName": {
											"value": "@pipeline().parameters.Secret_Password_Name",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ABLB_Datalanding",
									"type": "DatasetReference",
									"parameters": {
										"FolderPath": {
											"value": "@pipeline().parameters.Data_Destination_Folder_Path",
											"type": "Expression"
										},
										"TargetFileName": {
											"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
											"type": "Expression"
										},
										"ColumnDelimiter": {
											"value": "@pipeline().parameters.ColumnDelimiter",
											"type": "Expression"
										},
										"QuoteCharacter": {
											"value": "@pipeline().parameters.QuoteCharacter",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "SqlServerStoredProcedure2",
							"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "FullCopyToBlob",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_update_incrementaldatevalue]",
								"storedProcedureParameters": {
									"TableID": {
										"value": {
											"value": "@pipeline().parameters.TableID",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_ASQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"database_name": "edw_discovery"
								}
							}
						},
						{
							"name": "lkp_getlocalstarttime2",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_ASQL_EDWDiscovery",
									"type": "DatasetReference"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "lkp_getpreviousdatevalue",
							"description": "Retrieve  the last high-watermark value stored in external control table",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_ASQL_EDWDiscovery",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "lkp_getcurrentmaxvalue",
							"description": "Retrieve  the current maximum value in watermark column of source data store",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": {
										"value": "\nSELECT MAX(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_Oracle_OnPrem",
									"type": "DatasetReference",
									"parameters": {
										"HostName": {
											"value": "@pipeline().parameters.Host_Name",
											"type": "Expression"
										},
										"PortNo": {
											"value": "@pipeline().parameters.Port_No",
											"type": "Expression"
										},
										"SID": {
											"value": "@pipeline().parameters.SID",
											"type": "Expression"
										},
										"UserName": {
											"value": "@pipeline().parameters.User_Name",
											"type": "Expression"
										},
										"SecretPasswordName": {
											"value": "@pipeline().parameters.Secret_Password_Name",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "DeltaCopyfromDB",
							"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "lkp_getpreviousdatevalue",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "lkp_getcurrentmaxvalue",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "lkp_getlocattime",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": {
										"value": "select   @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition} \nWHERE\nTO_CHAR(@{pipeline().parameters.Data_Source_WaterMarkColumn} ,'YYYY-MM-DD HH24:MI:SS')>REPLACE( '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' ,'T',' ')\nand TO_CHAR(@{pipeline().parameters.Data_Source_WaterMarkColumn} ,'YYYY-MM-DD HH24:MI:SS')<= REPLACE('@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}','T',' ')\n\n",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ""
									}
								},
								"enableStaging": false,
								"dataIntegrationUnits": 0
							},
							"inputs": [
								{
									"referenceName": "DS_Oracle_OnPrem",
									"type": "DatasetReference",
									"parameters": {
										"HostName": {
											"value": "@pipeline().parameters.Host_Name",
											"type": "Expression"
										},
										"PortNo": {
											"value": "@pipeline().parameters.Port_No",
											"type": "Expression"
										},
										"SID": {
											"value": "@pipeline().parameters.SID",
											"type": "Expression"
										},
										"UserName": {
											"value": "@pipeline().parameters.User_Name",
											"type": "Expression"
										},
										"SecretPasswordName": {
											"value": "@pipeline().parameters.Secret_Password_Name",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ABLB_Datalanding",
									"type": "DatasetReference",
									"parameters": {
										"FolderPath": {
											"value": "@pipeline().parameters.Data_Destination_Folder_Path",
											"type": "Expression"
										},
										"TargetFileName": {
											"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
											"type": "Expression"
										},
										"ColumnDelimiter": {
											"value": "@pipeline().parameters.ColumnDelimiter",
											"type": "Expression"
										},
										"QuoteCharacter": {
											"value": "@pipeline().parameters.QuoteCharacter",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "SqlServerStoredProcedure1",
							"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "DeltaCopyfromDB",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 3,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ETL].[usp_update_incrementaldatevalue]",
								"storedProcedureParameters": {
									"LastModifiedDTM": {
										"value": {
											"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"TableID": {
										"value": {
											"value": "@pipeline().parameters.TableID",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_ASQL",
								"type": "LinkedServiceReference",
								"parameters": {
									"database_name": "edw_discovery"
								}
							}
						},
						{
							"name": "lkp_getlocattime",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_ASQL_EDWDiscovery",
									"type": "DatasetReference"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"Data_Source_Table_Name": {
				"type": "String",
				"defaultValue": "dbo.MSF660"
			},
			"Data_Source_WaterMarkColumn": {
				"type": "String",
				"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
			},
			"Data_Destination_Folder_Path": {
				"type": "String",
				"defaultValue": "ellipse9-datalanding/MSF660"
			},
			"Control_Table_Table_Name": {
				"type": "String",
				"defaultValue": "ETL.SourceTableDetails"
			},
			"Control_Table_Column_Name": {
				"type": "String",
				"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
			},
			"TableID": {
				"type": "string",
				"defaultValue": "1"
			},
			"Data_Destination_File_Name": {
				"type": "string",
				"defaultValue": "MSF660"
			},
			"SourceServerName": {
				"type": "string",
				"defaultValue": "NFUJDEV073"
			},
			"SourceDatabaseName": {
				"type": "string",
				"defaultValue": "Datamart"
			},
			"IncrementalLoadInd": {
				"type": "int",
				"defaultValue": 1
			},
			"File_Name_Ext": {
				"type": "string",
				"defaultValue": ".csv"
			},
			"File_Name_DateTime_Ind": {
				"type": "int",
				"defaultValue": 1
			},
			"Join_Condition": {
				"type": "string",
				"defaultValue": " "
			},
			"Source_Column_List": {
				"type": "string",
				"defaultValue": "*"
			},
			"ColumnDelimiter": {
				"type": "string",
				"defaultValue": ","
			},
			"QuoteCharacter": {
				"type": "string",
				"defaultValue": "¬"
			},
			"source_where_filter": {
				"type": "string",
				"defaultValue": " "
			},
			"Host_Name": {
				"type": "string"
			},
			"Port_No": {
				"type": "string"
			},
			"SID": {
				"type": "string"
			},
			"User_Name": {
				"type": "string"
			},
			"Secret_Password_Name": {
				"type": "string"
			}
		},
		"folder": {
			"name": "FrameWork"
		},
		"annotations": [],
		"lastPublishTime": "2022-04-19T00:29:13Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}