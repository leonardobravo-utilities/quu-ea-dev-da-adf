{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "quu-ea-prd-da-adf-001"
		},
		"LS_ASQL_EDWDiscovery_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_EDWDiscovery'"
		},
		"LS_ORAC_Framework_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ORAC_Framework'"
		},
		"LS_SQL_Framework_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_Framework'"
		},
		"ADF_LS_AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://quu-ea-prd-da-key-vault.vault.azure.net/"
		},
		"LS_ABLB_quueadadlslanding001_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://quueaprddadlslanding001.blob.core.windows.net"
		},
		"LS_FS_FTP_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().Host}"
		},
		"LS_FS_Globalscape_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\nfujprd200\\EBI_PROD_LANDING"
		},
		"LS_FS_Globalscape_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "urbanutilities\\SVC-EBI_PRDC04_AGT"
		},
		"LS_SQL_ELLIPSE_ANALYTICS_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ellipse-analytics-connection-string"
		},
		"LS_SQL_ELLIPSE_ANALYTICS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "URBANUTILITIES\\SVC-EBI_PRDC04_AGT"
		},
		"LS_SQL_Framework_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().UserName}"
		},
		"BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_SourceName": {
			"type": "string",
			"defaultValue": "BOM Weather Data"
		},
		"BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Field Service Edge"
		},
		"FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_SourceName": {
			"type": "string",
			"defaultValue": "Field Service Edge Hourly_Refresh"
		},
		"FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"LIMS_Daily_Trigger_properties_PL_LIMS_Source_To_ASQL_parameters_Source_Name": {
			"type": "string",
			"defaultValue": "LIMS"
		},
		"LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_SourceName": {
			"type": "string",
			"defaultValue": "LIWIS"
		},
		"LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_SourceName": {
			"type": "string",
			"defaultValue": "MDSProd"
		},
		"MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_SourceName": {
			"type": "string",
			"defaultValue": "OpenWindows"
		},
		"OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"REF_Daily_Trigger_properties_PL_Reference_Main_parameters_SourceName": {
			"type": "string",
			"defaultValue": "REFERENCE"
		},
		"REF_Daily_Trigger_properties_PL_Reference_Main_parameters_OnlySourceToBlob": {
			"type": "bool",
			"defaultValue": true
		},
		"REF_Daily_Trigger_properties_PL_Reference_Main_parameters_OnlyBlobtoASQL": {
			"type": "bool",
			"defaultValue": true
		},
		"SILO_Daily_Trigger_properties_PL_Silo_Weather_Observations_parameters_Source_Name": {
			"type": "string",
			"defaultValue": "SILO"
		},
		"SILO_Daily_Trigger_properties_PL_Silo_Weather_Observations_parameters_Silo_load_type": {
			"type": "string",
			"defaultValue": "Incremental_Load"
		},
		"SUMS_Daily_Trigger_properties_PL_SUMS_Main_parameters_Load_Type": {
			"type": "string",
			"defaultValue": "Incremental"
		},
		"TEMETRA_Daily_Trigger_properties_PL_Temetra_Main_parameters_databricks_cluster_id": {
			"type": "string",
			"defaultValue": "0417-051914-axons909"
		},
		"TEMETRA_Daily_Trigger_properties_PL_Temetra_Main_parameters_databricks_secret_name": {
			"type": "string",
			"defaultValue": "databricks-token"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_ABN_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Process the ABN data in Databricks delta then move to Azure sql db",
				"activities": [
					{
						"name": "usp_get_tablelist_by_sourceid",
						"description": "Lookup activity to retrieve the list blob csv file need to be processed from the metadata table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachABNFiles",
						"description": "looping through the list of blob file.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "usp_get_tablelist_by_sourceid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('usp_get_tablelist_by_sourceid').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Exec_PL_Framework_TRFM_BlobToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"blobcontainer": {
												"value": "@item().TargetBlobContainer",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@item().StorageAccount",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@if(equals(item().SourceName,'EDW_Discovery'), item().Source_Column_list,item().ColumnSchemaList)",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@item().BusinessKeyColumnList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@item().DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@item().DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@item().DeltaStagingTableName",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@item().AzuresqldbMaxLastModifieddtm",
												"type": "Expression"
											},
											"tableid": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@item().azuresqltemptablename",
												"type": "Expression"
											},
											"blobfolderpath": {
												"value": "@item().TargetBlobFolderPath",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@item().deltastagingtableparquetfilepath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@item().DestinationHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"azuresqltargettablename": {
												"value": "@item().AzuresqlTargetTableName",
												"type": "Expression"
											},
											"skipcsvrows": "0",
											"ETLMergeNotebookPath": {
												"value": "@item().ETLMergeNotebookPath",
												"type": "Expression"
											},
											"StoredProcNameMergeAzuresqltable": {
												"value": "@item().StoredProcNameMergeAzuresqltable",
												"type": "Expression"
											},
											"databricksclustername": {
												"value": "@item().databricksclustername",
												"type": "Expression"
											},
											"databricksclusterid": {
												"value": "@item().databricksclusterid",
												"type": "Expression"
											},
											"SourceTableName": {
												"value": "@item().SourceTableName",
												"type": "Expression"
											},
											"skipchangedset": "0",
											"databrickssecretname": {
												"value": "@item().databrickssecretname",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ETL_usp_delete_from_azuresqltable",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exec_PL_Framework_TRFM_BlobToASQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_delete_from_azuresqltable]",
										"storedProcedureParameters": {
											"table_source": {
												"value": {
													"value": "@item().AzuresqlTempTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_target": {
												"value": {
													"value": "@item().AzuresqlTargetTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableid": {
												"value": {
													"value": "@item().TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "ABN"
					}
				},
				"folder": {
					"name": "ABN"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ABN_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Exec_PL_ABN",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ABN_SourceToBlob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Exec_PL_ABN_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Exec_PL_ABN",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ABN_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"folder": {
					"name": "ABN"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ABN_SourceToBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_ABN_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ABN_SourceToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is to validate the Supplier ABN Number.,",
				"activities": [
					{
						"name": "usp_get_tablelist_by_sourceid",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "usp_get_tablelist_by_sourceid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('usp_get_tablelist_by_sourceid').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName\n",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName\n",
												"type": "Expression"
											},
											"CDCMigrationCompleted": {
												"value": "@item().CDCMigrationCompleted",
												"type": "Expression"
											},
											"CDCMigrationInd": {
												"value": "@item().CDCMigrationInd",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"DeltaTargetTableName": {
												"value": "@item().DeltaTargetTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Databricks_ABN_SEARCH_Notebook",
						"description": "Execute ABN_SEARCH_Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ForEachTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@pipeline().parameters.abn_search_databrick_notebook",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID,databricksclusterid,databrickssecretname FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"abn_search_databrick_notebook": {
						"type": "string",
						"defaultValue": "/edw_discovery/ABN/ABN_Search"
					},
					"Source_Name": {
						"type": "string",
						"defaultValue": "ABN_SUPPLIER_BUSINESS"
					}
				},
				"folder": {
					"name": "ABN"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_CopyandTransformSourceFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy BOM file to Blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": false,
									"wildcardFileName": {
										"value": "@{concat(pipeline().parameters.STATION_POINT_NAME,'-',pipeline().parameters.yesterdayyear,pipeline().parameters.yesterdaymonth,'.csv')}",
										"type": "Expression"
									},
									"useBinaryTransfer": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_FTP",
								"type": "DatasetReference",
								"parameters": {
									"FileFolderPath": {
										"value": "@pipeline().parameters.FileFolderPath",
										"type": "Expression"
									},
									"FileFolderName": {
										"value": "@pipeline().parameters.STATION_POINT_NAME",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_FS_Dataloading",
								"type": "DatasetReference",
								"parameters": {
									"targetblobfoldername": {
										"value": "@concat('bom-datalanding/',pipeline().parameters.STATION_POINT_NAME)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "PL_BOM_TRFM_BlobFile",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "getlistofblobfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_BOM_TRFM_BlobFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"blobcontainer": {
									"value": "@activity('getlistofblobfile').output.firstrow.TargetBlobContainer",
									"type": "Expression"
								},
								"storageaccount": {
									"value": "@activity('getlistofblobfile').output.firstrow.StorageAccount",
									"type": "Expression"
								},
								"blobfilename": {
									"value": "@concat(activity('getlistofblobfile').output.firstrow.TargetBlobContainer,'/',pipeline().parameters.STATION_POINT_NAME)",
									"type": "Expression"
								},
								"columnlist": {
									"value": "@activity('getlistofblobfile').output.firstrow.ColumnSchemaList",
									"type": "Expression"
								},
								"ColumnDelimiter": {
									"value": "@activity('getlistofblobfile').output.firstrow.ColumnDelimiter",
									"type": "Expression"
								},
								"QuoteCharacter": {
									"value": "@activity('getlistofblobfile').output.firstrow.QuoteCharacter",
									"type": "Expression"
								},
								"STATION_POINT_NAME": {
									"value": "@pipeline().parameters.STATION_POINT_NAME",
									"type": "Expression"
								},
								"blobfolderpath": {
									"value": "@pipeline().parameters.STATION_POINT_NAME",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "getlistofblobfile",
						"description": "Lookup activity to retrieve the list blob csv file need to be processed from the metadata table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy BOM file to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "ETL.usp_get_tablelist_by_sourceid_and_tableid",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									},
									"TableID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.TableID",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"parameters": {
					"Fileserverlocation": {
						"type": "string"
					},
					"FileFolderPath": {
						"type": "string"
					},
					"STATION_POINT_NAME": {
						"type": "string"
					},
					"TableID": {
						"type": "string"
					},
					"yesterdayyear": {
						"type": "string"
					},
					"yesterdaymonth": {
						"type": "string"
					},
					"SourceID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_FTP')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_Dataloading')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_TRFM_BlobFile')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_DM_SourcetoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lkp_LocalDates",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select substring(dbo.udf_covert_utc_to_local_Datetime(getdate()), 1,4)  as  currentyear\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(getdate()),6,2)  as  currentmonth\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(getdate()),9,2)  as  currentdayofmonth\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(dateadd(DAY,-1,getdate())), 1,4)  as  yesterdayyear\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(dateadd(DAY,-1,getdate())),6,2)  as  yesterdaymonth\n\t,substring(dbo.udf_covert_utc_to_local_Datetime(dateadd(DAY,-1,getdate())),9,2)  as  yesterdaydayofmonth"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lkp_FTPFolderDetails",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lkp_LocalDates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select \n\t\tss.*, STD.TableID\n From \n (\n\n\t SELECT \n\t\tsourceid, Fileserverlocation, FileFolderPath,value as STATION_POINT_NAME\n\tFROM  ETL.SourceSystem \n\t\tcross apply STRING_SPLIT(filefoldername, ',')\n\twhere sourceid = @{pipeline().parameters.SourceID}\n\n) SS join  [ETL].[SourceTableDetails] STD on STD.sourceid = ss.sourceid\nand TargetBlobFileName = ss.STATION_POINT_NAME",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each Station Point Name",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lkp_FTPFolderDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lkp_FTPFolderDetails').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute PL_BOM_CopyandTransformSourceFile",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_BOM_CopyandTransformSourceFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Fileserverlocation": {
												"value": "@item().Fileserverlocation",
												"type": "Expression"
											},
											"FileFolderPath": {
												"value": "@item().FileFolderPath",
												"type": "Expression"
											},
											"STATION_POINT_NAME": {
												"value": "@item().STATION_POINT_NAME",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"yesterdayyear": {
												"value": "@activity('Lkp_LocalDates').output.firstrow.yesterdayyear",
												"type": "Expression"
											},
											"yesterdaymonth": {
												"value": "@activity('Lkp_LocalDates').output.firstrow.yesterdaymonth",
												"type": "Expression"
											},
											"SourceID": {
												"value": "@pipeline().parameters.SourceID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "38"
					}
				},
				"variables": {
					"Fileserverlocation": {
						"type": "String"
					},
					"FileFolderPath": {
						"type": "String"
					},
					"STATION_POINT_NAME": {
						"type": "String"
					},
					"TableID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_CopyandTransformSourceFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_SourceToAsql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_BOM_DM_SourcetoBlob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.FirstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "BOM Weather Data"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_DM_SourcetoBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BOM_TRFM_BlobFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_DataLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.blobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.blobfolderpath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyCsvFilesAndExecuteDatabricks",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "executedatabricksnotebook",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "MoveEmptyFile",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": "/edw_discovery/FileTransfer",
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.blobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": "0417-051914-axons909",
														"databrickssecretname": "databricks-token"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "ETL_Change_DateFormat",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": "/edw_discovery/ETL_Change_DateFormat",
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.blobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														},
														"columnlist": {
															"value": "@pipeline().parameters.columnlist",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@base64(pipeline().parameters.QuoteCharacter)",
															"type": "Expression"
														},
														"STATION_POINT_NAME": {
															"value": "@pipeline().parameters.STATION_POINT_NAME",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": "0417-051914-axons909",
														"databrickssecretname": "databricks-token"
													}
												}
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(AND(greater(variables('FileSize'),'0'), contains(variables('FileName'),'.csv') ),true,false)\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_DataLanding_FizeSize",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.blobcontainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.blobfolderpath",
													"type": "Expression"
												},
												"file": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					},
					"storageaccount": {
						"type": "string"
					},
					"blobfilename": {
						"type": "string"
					},
					"columnlist": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"STATION_POINT_NAME": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					}
				},
				"variables": {
					"processfile": {
						"type": "Boolean"
					},
					"FileNames": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"FileSize": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BOM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FizeSize')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscover_DM_SourceToBlob_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Framework_CopyFiletoBlob_Pipeline",
									"description": "Execute copy file to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetTableInfo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_File",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceFolderLocation": {
												"value": "@activity('GetTableInfo').output.firstRow.SourceFolderLocation",
												"type": "Expression"
											},
											"SourceFileName": {
												"value": "@activity('GetTableInfo').output.firstRow.SourceFileName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetTableInfo",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid_and_tableid]",
											"storedProcedureParameters": {
												"sourceid": {
													"type": "Int32",
													"value": {
														"value": "@pipeline().parameters.SourceID",
														"type": "Expression"
													}
												},
												"tableid": {
													"type": "Int32",
													"value": {
														"value": "@item().TableID",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlobDelete_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "CheckForDeleteIndicator",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().CheckForDeletes,1)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Framework_CopyDBtoBlob_Pipeline",
												"description": "Execute copy db to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_Framework_DM_SourcetoBlob_Delete_Oracle",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Data_Source_Table_Name": {
															"value": "@item().Data_Source_Table_Name",
															"type": "Expression"
														},
														"Data_Source_WaterMarkColumn": {
															"value": "@item().Data_Source_WaterMarkColumn",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path": {
															"value": "@item().Data_Destination_Folder_Path_DeleteProcess",
															"type": "Expression"
														},
														"TableID": {
															"value": "@item().TableID",
															"type": "Expression"
														},
														"Data_Destination_File_Name": {
															"value": "@item().Data_Destination_File_Name",
															"type": "Expression"
														},
														"SourceServerName": {
															"value": "@item().SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@item().SourceDatabaseName",
															"type": "Expression"
														},
														"File_Name_Ext": {
															"value": "@item().File_Name_Ext",
															"type": "Expression"
														},
														"Join_Condition": {
															"value": "@item().Join_Condition",
															"type": "Expression"
														},
														"Source_Column_List": {
															"value": "@item().Source_Column_list",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@item().ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@item().QuoteCharacter",
															"type": "Expression"
														},
														"source_where_filter": {
															"value": "@item().Source_Where_Filter",
															"type": "Expression"
														},
														"UserName": {
															"value": "@item().UserName",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@item().SecretPasswordName",
															"type": "Expression"
														},
														"BlobContainer": {
															"value": "@item().TargetBlobContainer",
															"type": "Expression"
														},
														"BusinessKeyList": {
															"value": "@item().BusinessKeyColumnList",
															"type": "Expression"
														},
														"DeltaTargetDbName": {
															"value": "@item().DeltaTargetDbName",
															"type": "Expression"
														},
														"StorageAccount": {
															"value": "@item().StorageAccount",
															"type": "Expression"
														},
														"RowSource": {
															"value": "@item().SourceName",
															"type": "Expression"
														},
														"DbHostName": {
															"value": "@item().DestinationHostName",
															"type": "Expression"
														},
														"AzureTargetTableName": {
															"value": "@item().AzuresqlTargetTableName",
															"type": "Expression"
														},
														"DeleteProcessCompletionDTM": {
															"value": "@item().DeleteProcessCompletionDTM",
															"type": "Expression"
														},
														"DeltaStagingTableParquetFilePath": {
															"value": "@item().DeltaStagingTableParquetFilePath",
															"type": "Expression"
														},
														"AzureSqlTempTableName": {
															"value": "@item().AzuresqlTempTableName",
															"type": "Expression"
														},
														"DeltaStagingDbName": {
															"value": "@item().DeltaStagingDbName",
															"type": "Expression"
														},
														"DeltaStageTableName": {
															"value": "@item().DeltaStagingTableName",
															"type": "Expression"
														},
														"Host_Name": {
															"value": "@item().Host_Name",
															"type": "Expression"
														},
														"Port_No": {
															"value": "@item().Port_No",
															"type": "Expression"
														},
														"SID": {
															"value": "@item().SID",
															"type": "Expression"
														},
														"databricksclusterid": {
															"value": "@item().databricksclusterid",
															"type": "Expression"
														},
														"databricksclustername": {
															"value": "@item().databricksclustername",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@item().databrickssecretname",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_Delete_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlobDelete_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "CheckForDeletes",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().CheckForDeletes,1)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Framework_CopyDBtoBlob_Pipeline",
												"description": "Execute copy db to blob storage pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_Framework_DM_SourcetoBlob_Delete_SqlServer",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"Data_Source_Table_Name": {
															"value": "@item().Data_Source_Table_Name",
															"type": "Expression"
														},
														"Data_Source_WaterMarkColumn": {
															"value": "@item().Data_Source_WaterMarkColumn",
															"type": "Expression"
														},
														"Data_Destination_Folder_Path": {
															"value": "@item().Data_Destination_Folder_Path_DeleteProcess",
															"type": "Expression"
														},
														"TableID": {
															"value": "@item().TableID",
															"type": "Expression"
														},
														"Data_Destination_File_Name": {
															"value": "@item().Data_Destination_File_Name",
															"type": "Expression"
														},
														"SourceServerName": {
															"value": "@item().SourceServerName",
															"type": "Expression"
														},
														"SourceDatabaseName": {
															"value": "@item().SourceDatabaseName",
															"type": "Expression"
														},
														"File_Name_Ext": {
															"value": "@item().File_Name_Ext",
															"type": "Expression"
														},
														"Join_Condition": {
															"value": "@item().Join_Condition",
															"type": "Expression"
														},
														"Source_Column_List": {
															"value": "@item().Source_Column_List",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@item().ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@item().QuoteCharacter",
															"type": "Expression"
														},
														"source_where_filter": {
															"value": "@item().Source_Where_Filter",
															"type": "Expression"
														},
														"UserName": {
															"value": "@item().UserName",
															"type": "Expression"
														},
														"SecretPasswordName": {
															"value": "@item().SecretPasswordName",
															"type": "Expression"
														},
														"BlobContainer": {
															"value": "@item().TargetBlobContainer",
															"type": "Expression"
														},
														"BusinessKeyList": {
															"value": "@item().BusinessKeyColumnList",
															"type": "Expression"
														},
														"DeltaTargetDbName": {
															"value": "@item().DeltaTargetDbName",
															"type": "Expression"
														},
														"StorageAccount": {
															"value": "@item().StorageAccount",
															"type": "Expression"
														},
														"RowSource": {
															"value": "@item().SourceName",
															"type": "Expression"
														},
														"DbHostName": {
															"value": "@item().DestinationHostName",
															"type": "Expression"
														},
														"AzureTargetTableName": {
															"value": "@item().AzuresqlTargetTableName",
															"type": "Expression"
														},
														"DeltaStagingTableParquetFilePath": {
															"value": "@item().DeltaStagingTableParquetFilePath",
															"type": "Expression"
														},
														"DeleteProcessCompletionDTM": {
															"value": "@item().DeleteProcessCompletionDTM",
															"type": "Expression"
														},
														"DeltaStagingDbName": {
															"value": "@item().DeltaStagingDbName",
															"type": "Expression"
														},
														"DeltaStageTableName": {
															"value": "@item().DeltaStagingTableName",
															"type": "Expression"
														},
														"AzureSqlTempTableName": {
															"value": "@item().AzuresqlTempTableName",
															"type": "Expression"
														},
														"databricksclustername": {
															"value": "@item().databricksclustername",
															"type": "Expression"
														},
														"databricksclusterid": {
															"value": "@item().databricksclusterid",
															"type": "Expression"
														},
														"columnschemalist": {
															"value": "@item().ColumnSchemaList",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@item().databrickssecretname",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_Delete_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourceToBlob_Oracle",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@replace(replace(item().Source_Column_List,'[',''),']','')",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"Host_Name": {
												"value": "@item().Host_Name",
												"type": "Expression"
											},
											"Port_No": {
												"value": "@item().Port_No",
												"type": "Expression"
											},
											"SID": {
												"value": "@item().SID",
												"type": "Expression"
											},
											"User_Name": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"Secret_Password_Name": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourceToBlob_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"DeltaTargetTableName": {
												"value": "@item().DeltaTargetTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_Delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetSourceType",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select HostName from etl.SourceSystem\nwhere SourceID=@{activity('GetSourceID').output.Firstrow['SourceID']}",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckForSourceType",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('GetSourceType').output.Firstrow['HostName'],NULL),false,true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob_Delete_Sqlserver",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlobDelete_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob_Delete_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlobDelete_Oracle",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "OpenWindows_SIT"
					}
				},
				"folder": {
					"name": "Delete Process"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlobDelete_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlobDelete_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_Migration_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getlistofblobfile",
						"description": "Lookup activity to retrieve the list blob csv file need to be processed from the metadata table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "foreachblobfile",
						"description": "looping through the list of blob file.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getlistofblobfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getlistofblobfile').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "execute_databricks_merge_pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_Migration_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"blobcontainer": {
												"value": "@item().TargetBlobContainer",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@item().StorageAccount",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@item().ColumnSchemaList",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@item().BusinessKeyColumnList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@item().DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@item().DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@item().DeltaStagingTableName",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@item().AzuresqldbMaxLastModifieddtm",
												"type": "Expression"
											},
											"tableid": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@item().azuresqltemptablename",
												"type": "Expression"
											},
											"blobfolderpath": {
												"value": "@item().TargetBlobFolderPath",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@item().deltastagingtableparquetfilepath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@item().DestinationHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"azuresqltargettablename": {
												"value": "@item().AzuresqlTargetTableName",
												"type": "Expression"
											},
											"skipcsvrows": {
												"value": "@item().skipcsvrows",
												"type": "Expression"
											},
											"ETLMergeNotebookPath": {
												"value": "@item().ETLMergeNotebookPath",
												"type": "Expression"
											},
											"StoredProcNameMergeAzuresqltable": {
												"value": "@item().StoredProcNameMergeAzuresqltable",
												"type": "Expression"
											},
											"databricksclustername": {
												"value": "@item().databricksclustername",
												"type": "Expression"
											},
											"databricksclusterid": {
												"value": "@item().databricksclusterid",
												"type": "Expression"
											},
											"CDCMigrationCompleted": {
												"value": "@item().CDCMigrationCompleted",
												"type": "Expression"
											},
											"CDCBlobPath": {
												"value": "@item().CDCBlobPath",
												"type": "Expression"
											},
											"SourceTableName": {
												"value": "@item().SourceTableName",
												"type": "Expression"
											},
											"CDCMigrationInd": {
												"value": "@item().CDCMigrationInd",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@item().databrickssecretname",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_Migration_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_Migration_SourceToBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_Migration_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"DeltaTargetTableName": {
												"value": "@item().DeltaTargetTableName",
												"type": "Expression"
											},
											"CDCMigrationCompleted": {
												"value": "@item().CDCMigrationCompleted",
												"type": "Expression"
											},
											"CDCMigrationInd": {
												"value": "@item().CDCMigrationInd",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_Migration_SourceToBlob_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_TRFM_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getlistofblobfile",
						"description": "Lookup activity to retrieve the list blob csv file need to be processed from the metadata table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "foreachblobfile",
						"description": "looping through the list of blob file.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getlistofblobfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getlistofblobfile').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "execute_databricks_merge_pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"blobcontainer": {
												"value": "@item().TargetBlobContainer",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@item().StorageAccount",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@item().ColumnSchemaList",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@item().BusinessKeyColumnList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@item().DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@item().DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@item().DeltaStagingTableName",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@item().AzuresqldbMaxLastModifieddtm",
												"type": "Expression"
											},
											"tableid": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@item().azuresqltemptablename",
												"type": "Expression"
											},
											"blobfolderpath": {
												"value": "@item().TargetBlobFolderPath",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@item().deltastagingtableparquetfilepath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@item().DestinationHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"azuresqltargettablename": {
												"value": "@item().AzuresqlTargetTableName",
												"type": "Expression"
											},
											"skipcsvrows": {
												"value": "@item().skipcsvrows",
												"type": "Expression"
											},
											"skipbottomrows": {
												"value": "@item().skipbottomrows",
												"type": "Expression"
											},
											"ETLMergeNotebookPath": {
												"value": "@item().ETLMergeNotebookPath",
												"type": "Expression"
											},
											"StoredProcNameMergeAzuresqltable": {
												"value": "@item().StoredProcNameMergeAzuresqltable",
												"type": "Expression"
											},
											"databricksclustername": {
												"value": "@item().databricksclustername",
												"type": "Expression"
											},
											"databricksclusterid": {
												"value": "@item().databricksclusterid",
												"type": "Expression"
											},
											"SourceTableName": {
												"value": "@item().SourceTableName",
												"type": "Expression"
											},
											"skipchangedset": "0",
											"databrickssecretname": {
												"value": "@item().databrickssecretname",
												"type": "Expression"
											},
											"checkfordeletesind": {
												"value": "@item().checkfordeletes",
												"type": "Expression"
											},
											"incrementalloadind": {
												"value": "@item().incrementalloadind",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Ellipse9_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Wait for EA Job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Wait for EA Job",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(contains(activity('Query EA Job History').output,'firstRow'), equals(activity('Query EA Job History').output.Firstrow['JobOutCome'],1))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Query EA Job History",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "Select top(1 ) SUCCESS  as JobOutCome from dbo.z_run_history \nwhere cast(START_TIME as date) = cast(GETDATE() as date)  \n\norder by RUN_ID desc",
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "DS_SQL_ELLIPSE_ANALYTICS",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Wait If",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Query EA Job History",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(and(contains(activity('Query EA Job History').output,'firstRow'), equals(activity('Query EA Job History').output.Firstrow['JobOutCome'],1)))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Wait",
												"description": "",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 600
												}
											}
										]
									}
								}
							],
							"timeout": "01:00:00"
						}
					}
				],
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Ellipse9"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Ellipse9"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_ELLIPSE_ANALYTICS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_FSE_Source_To_ASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Field_Service_Edge_UAT_DailyRefresh"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "FieldServicesEdge"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourceToBlob_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_Oracle_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"HostName": {
													"value": "@pipeline().parameters.Host_Name",
													"type": "Expression"
												},
												"PortNo": {
													"value": "@pipeline().parameters.Port_No",
													"type": "Expression"
												},
												"SID": {
													"value": "@pipeline().parameters.SID",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.User_Name",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.Secret_Password_Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure2",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "\nSELECT MAX(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Oracle_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"HostName": {
													"value": "@pipeline().parameters.Host_Name",
													"type": "Expression"
												},
												"PortNo": {
													"value": "@pipeline().parameters.Port_No",
													"type": "Expression"
												},
												"SID": {
													"value": "@pipeline().parameters.SID",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.User_Name",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.Secret_Password_Name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "select   @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition} \nWHERE\nTO_CHAR(@{pipeline().parameters.Data_Source_WaterMarkColumn} ,'YYYY-MM-DD HH24:MI:SS')>REPLACE( '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' ,'T',' ')\nand TO_CHAR(@{pipeline().parameters.Data_Source_WaterMarkColumn} ,'YYYY-MM-DD HH24:MI:SS')<= REPLACE('@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}','T',' ')\n\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_Oracle_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"HostName": {
													"value": "@pipeline().parameters.Host_Name",
													"type": "Expression"
												},
												"PortNo": {
													"value": "@pipeline().parameters.Port_No",
													"type": "Expression"
												},
												"SID": {
													"value": "@pipeline().parameters.SID",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.User_Name",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.Secret_Password_Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure1",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"Host_Name": {
						"type": "string"
					},
					"Port_No": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"User_Name": {
						"type": "string"
					},
					"Secret_Password_Name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Oracle_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Delete_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "lkp_getlocalstarttime2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_getlocalstarttime2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "select @{replace(replace(pipeline().parameters.BusinessKeyList,'[',''),']','')}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_Oracle_OnPrem",
								"type": "DatasetReference",
								"parameters": {
									"HostName": {
										"value": "@pipeline().parameters.Host_Name",
										"type": "Expression"
									},
									"PortNo": {
										"value": "@pipeline().parameters.Port_No",
										"type": "Expression"
									},
									"SID": {
										"value": "@pipeline().parameters.SID",
										"type": "Expression"
									},
									"UserName": {
										"value": "@pipeline().parameters.UserName",
										"type": "Expression"
									},
									"SecretPasswordName": {
										"value": "@pipeline().parameters.SecretPasswordName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "GenerateDeleteFile",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/ETL_Create_Delete_File",
							"baseParameters": {
								"blobcontainer": {
									"value": "@pipeline().parameters.BlobContainer",
									"type": "Expression"
								},
								"blobfilename": {
									"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
									"type": "Expression"
								},
								"columnlist": {
									"value": "@pipeline().parameters.Source_Column_List",
									"type": "Expression"
								},
								"businesskeylist": {
									"value": "@pipeline().parameters.BusinessKeyList",
									"type": "Expression"
								},
								"deltatargetdbname": {
									"value": "@pipeline().parameters.DeltaTargetDbName",
									"type": "Expression"
								},
								"storageaccount": {
									"value": "@pipeline().parameters.StorageAccount",
									"type": "Expression"
								},
								"columndelimiter": {
									"value": "@pipeline().parameters.ColumnDelimiter",
									"type": "Expression"
								},
								"quotecharacter": {
									"value": "@base64(pipeline().parameters.QuoteCharacter)",
									"type": "Expression"
								},
								"rowsource": {
									"value": "@pipeline().parameters.RowSource",
									"type": "Expression"
								},
								"dbhostname": {
									"value": "@pipeline().parameters.DbHostName",
									"type": "Expression"
								},
								"skipcsvrows": "0",
								"azuretargettablename": {
									"value": "@pipeline().parameters.AzureTargetTableName",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricksclusterid",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databrickssecretname",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetFileDetails",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "GenerateDeleteFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckFileExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetFileDetails').output.Exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteRecords",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/edw_discovery/ETL_Merge_Delete",
										"baseParameters": {
											"blobcontainer": {
												"value": "@pipeline().parameters.BlobContainer",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@pipeline().parameters.Source_Column_List",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@pipeline().parameters.BusinessKeyList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@pipeline().parameters.DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@pipeline().parameters.DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@pipeline().parameters.DeltaStageTableName",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@pipeline().parameters.AzureSqlTempTableName",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@pipeline().parameters.StorageAccount",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@pipeline().parameters.ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@base64(pipeline().parameters.QuoteCharacter)",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@pipeline().parameters.DeleteProcessCompletionDTM",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@pipeline().parameters.DeltaStagingTableParquetFilePath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@pipeline().parameters.DbHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@pipeline().parameters.RowSource",
												"type": "Expression"
											},
											"skipcsvrows": "0",
											"azuresqltargettablename": {
												"value": "@pipeline().parameters.AzureTargetTableName",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DBR_ADF_Job_Cluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"databricksclusterid": {
												"value": "@pipeline().parameters.databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@pipeline().parameters.databrickssecretname",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteRecordsInDatabase",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeleteRecords",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_delete_from_azuresqltable]",
										"storedProcedureParameters": {
											"table_source": {
												"value": {
													"value": "@pipeline().parameters.AzureSqlTempTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_target": {
												"value": {
													"value": "@pipeline().parameters.AzureTargetTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableid": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"BlobContainer": {
						"type": "string"
					},
					"BusinessKeyList": {
						"type": "string"
					},
					"DeltaTargetDbName": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"AzureTargetTableName": {
						"type": "string"
					},
					"DeltaStagingTableParquetFilePath": {
						"type": "string"
					},
					"DeleteProcessCompletionDTM": {
						"type": "string"
					},
					"DeltaStagingDbName": {
						"type": "string"
					},
					"DeltaStageTableName": {
						"type": "string"
					},
					"AzureSqlTempTableName": {
						"type": "string"
					},
					"Host_Name": {
						"type": "string"
					},
					"Port_No": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"databricksclustername": {
						"type": "string"
					},
					"databricksclusterid": {
						"type": "string"
					},
					"databrickssecretname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_Oracle_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Delete_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "lkp_getlocalstarttime2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_getlocalstarttime2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select \n\n@{if(  AND(equals(pipeline().parameters.RowSource,'CHRIS21' ),\n equals(pipeline().parameters.Data_Destination_File_Name,'D_13_PDT')) ,\nreplace(pipeline().parameters.BusinessKeyList,'Position_Number','Position Number')\n,pipeline().parameters.BusinessKeyList)}\n\n\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.SourceServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.SourceDatabaseName",
										"type": "Expression"
									},
									"UserName": {
										"value": "@pipeline().parameters.UserName",
										"type": "Expression"
									},
									"SecretPasswordName": {
										"value": "@pipeline().parameters.SecretPasswordName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "GenerateDeleteFile",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/ETL_Create_Delete_File",
							"baseParameters": {
								"blobcontainer": {
									"value": "@pipeline().parameters.BlobContainer",
									"type": "Expression"
								},
								"blobfilename": {
									"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
									"type": "Expression"
								},
								"columnlist": {
									"value": "@pipeline().parameters.Source_Column_List",
									"type": "Expression"
								},
								"businesskeylist": {
									"value": "@pipeline().parameters.BusinessKeyList",
									"type": "Expression"
								},
								"deltatargetdbname": {
									"value": "@pipeline().parameters.DeltaTargetDbName",
									"type": "Expression"
								},
								"storageaccount": {
									"value": "@pipeline().parameters.StorageAccount",
									"type": "Expression"
								},
								"columndelimiter": {
									"value": "@pipeline().parameters.ColumnDelimiter",
									"type": "Expression"
								},
								"quotecharacter": {
									"value": "@base64(pipeline().parameters.QuoteCharacter)",
									"type": "Expression"
								},
								"rowsource": {
									"value": "@pipeline().parameters.RowSource",
									"type": "Expression"
								},
								"dbhostname": {
									"value": "@pipeline().parameters.DbHostName",
									"type": "Expression"
								},
								"skipcsvrows": "0",
								"azuretargettablename": {
									"value": "@pipeline().parameters.AzureTargetTableName",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricksclusterid",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databrickssecretname",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetFileDetails",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "GenerateDeleteFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckFileExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetFileDetails').output.Exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteRecords",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/edw_discovery/ETL_Merge_Delete",
										"baseParameters": {
											"blobcontainer": {
												"value": "@pipeline().parameters.BlobContainer",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@pipeline().parameters.columnschemalist",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@pipeline().parameters.BusinessKeyList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@pipeline().parameters.DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@pipeline().parameters.DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@pipeline().parameters.DeltaStageTableName",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@pipeline().parameters.AzureSqlTempTableName",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@pipeline().parameters.StorageAccount",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@pipeline().parameters.ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@base64(pipeline().parameters.QuoteCharacter)",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@pipeline().parameters.DeleteProcessCompletionDTM",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@pipeline().parameters.DeltaStagingTableParquetFilePath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@pipeline().parameters.DbHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@pipeline().parameters.RowSource",
												"type": "Expression"
											},
											"skipcsvrows": "0",
											"azuresqltargettablename": {
												"value": "@pipeline().parameters.AzureTargetTableName",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DBR_ADF_Job_Cluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"databricksclusterid": {
												"value": "@pipeline().parameters.databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@pipeline().parameters.databrickssecretname",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteRecordsInDatabase",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeleteRecords",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_delete_from_azuresqltable]",
										"storedProcedureParameters": {
											"table_source": {
												"value": {
													"value": "@pipeline().parameters.AzureSqlTempTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_target": {
												"value": {
													"value": "@pipeline().parameters.AzureTargetTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableid": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"BlobContainer": {
						"type": "string"
					},
					"BusinessKeyList": {
						"type": "string"
					},
					"DeltaTargetDbName": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"AzureTargetTableName": {
						"type": "string"
					},
					"DeltaStagingTableParquetFilePath": {
						"type": "string"
					},
					"DeleteProcessCompletionDTM": {
						"type": "string"
					},
					"DeltaStagingDbName": {
						"type": "string"
					},
					"DeltaStageTableName": {
						"type": "string"
					},
					"AzureSqlTempTableName": {
						"type": "string"
					},
					"databricksclustername": {
						"type": "string"
					},
					"databricksclusterid": {
						"type": "string"
					},
					"columnschemalist": {
						"type": "string"
					},
					"databrickssecretname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_EDWDiscovery_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetLastModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_File_Source",
								"type": "DatasetReference",
								"parameters": {
									"DirectoryName": {
										"value": "@pipeline().parameters.SourceFolderLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"ColumnDelimiter": ",",
									"QuoteCharacter": "\""
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            , formatDateTime(convertFromUtc(activity('GetLastModifiedDate').output.lastModified,'E. Australia Standard Time'),'yyyyMMdd-HHmmss')\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SqlServerStoredProcedure2",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
							"storedProcedureParameters": {
								"TableID": {
									"value": {
										"value": "@pipeline().parameters.TableID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWDiscovery",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetLastModifiedDate",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_File_Source",
								"type": "DatasetReference",
								"parameters": {
									"DirectoryName": {
										"value": "@pipeline().parameters.SourceFolderLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"ColumnDelimiter": ",",
									"QuoteCharacter": "\""
								}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceFolderLocation": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_File_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterFullLoad",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": "urbanutilities\\svc-EBI_PRDC04_AGT",
												"SecretPasswordName": "SVC-EBI-PRDC04-AGT"
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List} from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere\n@{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' \nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}'\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterDelta",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DeltaTargetTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_EDWDiscovery_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_Migration_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_DataLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.blobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.blobfolderpath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyCsvFilesAndExecuteDatabricks",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckForCDCMigration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "executedatabricksnotebook",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyFileToArchive_Empty",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@{pipeline().parameters.blobfolderpath}",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{variables('FileName')}",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.blobfolderpath,'/Archived/')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile_Empty",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{variables('FileName')}",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "ETL_Merge",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@pipeline().parameters.ETLMergeNotebookPath",
														"type": "Expression"
													},
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.blobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														},
														"columnlist": {
															"value": "@pipeline().parameters.columnlist",
															"type": "Expression"
														},
														"businesskeylist": {
															"value": "@pipeline().parameters.businesskeylist",
															"type": "Expression"
														},
														"deltastagingdbname": {
															"value": "@pipeline().parameters.deltastagingdbname",
															"type": "Expression"
														},
														"deltatargetdbname": {
															"value": "@pipeline().parameters.deltatargetdbname",
															"type": "Expression"
														},
														"deltastagetablename": {
															"value": "@pipeline().parameters.deltastagetablename",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@base64(pipeline().parameters.QuoteCharacter)",
															"type": "Expression"
														},
														"azuresqldbetllastmodifieddtm": {
															"value": "@formatDateTime(pipeline().parameters.azuresqldbetllastmodifieddtm,'yyyy-MM-dd hh:mm:ss.fff')",
															"type": "Expression"
														},
														"tableid": {
															"value": "@pipeline().parameters.tableid",
															"type": "Expression"
														},
														"deltastagingtableparquetfilepath": {
															"value": "@pipeline().parameters.deltastagingtableparquetfilepath",
															"type": "Expression"
														},
														"DbHostName": {
															"value": "@pipeline().parameters.DbHostName",
															"type": "Expression"
														},
														"azuresqltemptablename": {
															"value": "@pipeline().parameters.azuresqltemptablename",
															"type": "Expression"
														},
														"RowExecutionID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"RowSource": {
															"value": "@pipeline().parameters.RowSource",
															"type": "Expression"
														},
														"skipcsvrows": {
															"value": "@pipeline().parameters.skipcsvrows",
															"type": "Expression"
														},
														"ETLMergeNotebookPath": {
															"value": "@pipeline().parameters.ETLMergeNotebookPath",
															"type": "Expression"
														},
														"skipchangedset": {
															"value": "@if(variables('CDCRun'),'1','0')",
															"type": "Expression"
														},
														"CDCMigrationInd": {
															"value": "@string(coalesce(pipeline().parameters.CDCMigrationInd,0))",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": {
															"value": "@pipeline().parameters.databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@pipeline().parameters.databrickssecretname",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "SqlServerStoredProcedureMergeData",
												"description": "execute merge store procedure to merge data from temp into target table in azure sql db",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL_Merge",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@pipeline().parameters.StoredProcNameMergeAzuresqltable",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"table_source": {
															"value": {
																"value": "@pipeline().parameters.azuresqltemptablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"table_target": {
															"value": {
																"value": "@pipeline().parameters.azuresqltargettablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"tableid": {
															"value": {
																"value": "@pipeline().parameters.tableid",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "CopyFileToArchive",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "SqlServerStoredProcedureMergeData",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@{pipeline().parameters.blobfolderpath}",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{variables('FileName')}",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.blobfolderpath,'/Archived/')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{variables('FileName')}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "TruncateTempTable",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "DeleteSourceFile",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "sp_executesql",
													"storedProcedureParameters": {
														"stmt": {
															"value": {
																"value": "truncate table @{pipeline().parameters.azuresqltemptablename}",
																"type": "Expression"
															}
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(AND(greater(variables('FileSize'),'0'), contains(variables('FileName'),'.csv') ),true,false)\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_DataLanding_FizeSize",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.blobcontainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.blobfolderpath",
													"type": "Expression"
												},
												"file": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckForCDCMigration",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(pipeline().parameters.CDCMigrationInd,1),not(equals(pipeline().parameters.CDCMigrationCompleted,1)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ETLMergeChangeset",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/edw_discovery/ETL_Merge_Changedset",
										"baseParameters": {
											"blobcontainer": {
												"value": "@pipeline().parameters.blobcontainer",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@concat(pipeline().parameters.CDCBlobPath,',',pipeline().parameters.deltastagetablename,'.csv')",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@pipeline().parameters.columnlist",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@pipeline().parameters.businesskeylist",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@pipeline().parameters.deltastagingdbname",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@pipeline().parameters.deltatargetdbname",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@pipeline().parameters.deltastagetablename",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@pipeline().parameters.storageaccount",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@pipeline().parameters.ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@base64(pipeline().parameters.QuoteCharacter)",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@pipeline().parameters.azuresqldbetllastmodifieddtm",
												"type": "Expression"
											},
											"tableid": {
												"value": "@pipeline().parameters.tableid",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@pipeline().parameters.deltastagingtableparquetfilepath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@pipeline().parameters.DbHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@pipeline().parameters.RowSource",
												"type": "Expression"
											},
											"RowExecutionID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"skipcsvrows": {
												"value": "@pipeline().parameters.skipcsvrows",
												"type": "Expression"
											},
											"SourceTableName": {
												"value": "@pipeline().parameters.SourceTableName",
												"type": "Expression"
											},
											"CDCMigrationInd": {
												"value": "@string(coalesce(pipeline().parameters.CDCMigrationInd,0))",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DBR_ADF_Job_Cluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"databricksclusterid": {
												"value": "@pipeline().parameters.databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@pipeline().parameters.databrickssecretname",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "UpdateCDCMigrationInd",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ETLMergeChangeset",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_CDCMigrationCompleted]",
										"storedProcedureParameters": {
											"tableid": {
												"value": {
													"value": "@pipeline().parameters.tableid",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SetCDCRun",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "UpdateCDCMigrationInd",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CDCRun",
										"value": {
											"value": "@bool(1)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"storageaccount": {
						"type": "string"
					},
					"blobfilename": {
						"type": "string"
					},
					"columnlist": {
						"type": "string"
					},
					"businesskeylist": {
						"type": "string"
					},
					"deltastagingdbname": {
						"type": "string"
					},
					"deltatargetdbname": {
						"type": "string"
					},
					"deltastagetablename": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"azuresqldbetllastmodifieddtm": {
						"type": "string"
					},
					"tableid": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"azuresqltemptablename": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					},
					"deltastagingtableparquetfilepath": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"azuresqltargettablename": {
						"type": "string"
					},
					"skipcsvrows": {
						"type": "string",
						"defaultValue": "0"
					},
					"ETLMergeNotebookPath": {
						"type": "string",
						"defaultValue": "/edw_discovery/ETL_Merge"
					},
					"StoredProcNameMergeAzuresqltable": {
						"type": "string",
						"defaultValue": "ETL.[usp_merge_azuresqltable]"
					},
					"databricksclustername": {
						"type": "string",
						"defaultValue": "ADF_Job_Cluster"
					},
					"databricksclusterid": {
						"type": "string",
						"defaultValue": "0827-051915-duchy366"
					},
					"CDCMigrationCompleted": {
						"type": "int"
					},
					"CDCBlobPath": {
						"type": "string"
					},
					"SourceTableName": {
						"type": "string"
					},
					"CDCMigrationInd": {
						"type": "int"
					},
					"databrickssecretname": {
						"type": "string"
					}
				},
				"variables": {
					"processfile": {
						"type": "Boolean"
					},
					"FileNames": {
						"type": "Array"
					},
					"FileName": {
						"type": "String"
					},
					"FileSize": {
						"type": "String"
					},
					"CDCRun": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FizeSize')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_Migration_SourceToBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckCDCMigrationCompleted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingFull",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": "urbanutilities\\svc-EBI_PRDC04_AGT",
												"SecretPasswordName": "SVC-EBI-PRDC04-AGT"
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\n from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere\n@{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' \nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}'\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingDelta",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckCDCMigrationCompleted",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(pipeline().parameters.CDCMigrationInd,1),not(equals(pipeline().parameters.CDCMigrationCompleted,1)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyCDCData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT  \n\t Case WHEN [__$operation] = 1 THEN 'DELETE'\n\t        WHEN [__$operation] = 2 THEN 'INSERT'\n\t\t\tWHEN [__$operation] = 4 THEN ' UPDATE' END as ROW_OPERATION\n    ,@{pipeline().parameters.Source_Column_List}\n  FROM @{concat('cdc.',pipeline().parameters.DeltaTargetTableName,'_CT',' ',  pipeline().parameters.Data_Destination_File_Name)}\n  WHERE [__$operation] !=3\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,'/cdc')",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@concat(pipeline().parameters.DeltaTargetTableName,pipeline().parameters.File_Name_Ext)",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DeltaTargetTableName": {
						"type": "string"
					},
					"CDCMigrationCompleted": {
						"type": "int"
					},
					"CDCMigrationInd": {
						"type": "int"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_EDWDiscovery_OnPrem')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_Datalanding')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_TRFM_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_DataLanding_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"blobcontainer": {
										"value": "@pipeline().parameters.blobcontainer",
										"type": "Expression"
									},
									"blobfolderpath": {
										"value": "@pipeline().parameters.blobfolderpath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyCsvFilesAndExecuteDatabricks",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "executedatabricksnotebook",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyFileToArchive_Empty",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@{pipeline().parameters.blobfolderpath}",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{variables('FileName')}",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.blobfolderpath,'/Archived/')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile_Empty",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{variables('FileName')}",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "ETL_Merge",
												"type": "DatabricksNotebook",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 1,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": {
														"value": "@pipeline().parameters.ETLMergeNotebookPath",
														"type": "Expression"
													},
													"baseParameters": {
														"blobcontainer": {
															"value": "@pipeline().parameters.blobcontainer",
															"type": "Expression"
														},
														"storageaccount": {
															"value": "@pipeline().parameters.storageaccount",
															"type": "Expression"
														},
														"blobfilename": {
															"value": "@concat(pipeline().parameters.blobfilename,',',variables('FileName'))",
															"type": "Expression"
														},
														"columnlist": {
															"value": "@pipeline().parameters.columnlist",
															"type": "Expression"
														},
														"businesskeylist": {
															"value": "@pipeline().parameters.businesskeylist",
															"type": "Expression"
														},
														"deltastagingdbname": {
															"value": "@pipeline().parameters.deltastagingdbname",
															"type": "Expression"
														},
														"deltatargetdbname": {
															"value": "@pipeline().parameters.deltatargetdbname",
															"type": "Expression"
														},
														"deltastagetablename": {
															"value": "@pipeline().parameters.deltastagetablename",
															"type": "Expression"
														},
														"ColumnDelimiter": {
															"value": "@pipeline().parameters.ColumnDelimiter",
															"type": "Expression"
														},
														"QuoteCharacter": {
															"value": "@base64(pipeline().parameters.QuoteCharacter)",
															"type": "Expression"
														},
														"azuresqldbetllastmodifieddtm": {
															"value": "@formatDateTime(pipeline().parameters.azuresqldbetllastmodifieddtm,'yyyy-MM-dd HH:mm:ss.fff')",
															"type": "Expression"
														},
														"tableid": {
															"value": "@pipeline().parameters.tableid",
															"type": "Expression"
														},
														"deltastagingtableparquetfilepath": {
															"value": "@pipeline().parameters.deltastagingtableparquetfilepath",
															"type": "Expression"
														},
														"DbHostName": {
															"value": "@pipeline().parameters.DbHostName",
															"type": "Expression"
														},
														"azuresqltemptablename": {
															"value": "@pipeline().parameters.azuresqltemptablename",
															"type": "Expression"
														},
														"RowExecutionID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"RowSource": {
															"value": "@pipeline().parameters.RowSource",
															"type": "Expression"
														},
														"skipcsvrows": {
															"value": "@pipeline().parameters.skipcsvrows",
															"type": "Expression"
														},
														"ETLMergeNotebookPath": {
															"value": "@pipeline().parameters.ETLMergeNotebookPath",
															"type": "Expression"
														},
														"skipchangedset": {
															"value": "@pipeline().parameters.skipchangedset",
															"type": "Expression"
														},
														"skipbottomrows": {
															"value": "@pipeline().parameters.skipbottomrows",
															"type": "Expression"
														},
														"incrementalloadind": {
															"value": "@pipeline().parameters.incrementalloadind",
															"type": "Expression"
														},
														"checkfordeletesind": {
															"value": "@pipeline().parameters.checkfordeletesind",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_DBR_ADF_Job_Cluster",
													"type": "LinkedServiceReference",
													"parameters": {
														"databricksclusterid": {
															"value": "@pipeline().parameters.databricksclusterid",
															"type": "Expression"
														},
														"databrickssecretname": {
															"value": "@pipeline().parameters.databrickssecretname",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "SqlServerStoredProcedureMergeData",
												"description": "execute merge store procedure to merge data from temp into target table in azure sql db",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL_Merge",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@pipeline().parameters.StoredProcNameMergeAzuresqltable",
														"type": "Expression"
													},
													"storedProcedureParameters": {
														"table_source": {
															"value": {
																"value": "@pipeline().parameters.azuresqltemptablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"table_target": {
															"value": {
																"value": "@pipeline().parameters.azuresqltargettablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"tableid": {
															"value": {
																"value": "@pipeline().parameters.tableid",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "CopyFileToArchive",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "SqlServerStoredProcedureMergeData",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFolderPath": {
																"value": "@{pipeline().parameters.blobfolderpath}",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@{variables('FileName')}",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@concat(pipeline().parameters.blobfolderpath,'/Archived/')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_ABLB_DataLanding_FileExists",
														"type": "DatasetReference",
														"parameters": {
															"blobcontainer": {
																"value": "@pipeline().parameters.blobcontainer",
																"type": "Expression"
															},
															"blobfolderpath": {
																"value": "@pipeline().parameters.blobfolderpath",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{variables('FileName')}",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(AND(greater(variables('FileSize'),'0'), contains(variables('FileName'),'.csv') ),true,false)\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_DataLanding_FizeSize",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.blobcontainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.blobfolderpath",
													"type": "Expression"
												},
												"file": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"storageaccount": {
						"type": "string"
					},
					"blobfilename": {
						"type": "string"
					},
					"columnlist": {
						"type": "string"
					},
					"businesskeylist": {
						"type": "string"
					},
					"deltastagingdbname": {
						"type": "string"
					},
					"deltatargetdbname": {
						"type": "string"
					},
					"deltastagetablename": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"azuresqldbetllastmodifieddtm": {
						"type": "string"
					},
					"tableid": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					},
					"azuresqltemptablename": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					},
					"deltastagingtableparquetfilepath": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"azuresqltargettablename": {
						"type": "string"
					},
					"skipcsvrows": {
						"type": "string",
						"defaultValue": "0"
					},
					"skipbottomrows": {
						"type": "string",
						"defaultValue": "0"
					},
					"ETLMergeNotebookPath": {
						"type": "string",
						"defaultValue": "/edw_discovery/ETL_Merge"
					},
					"StoredProcNameMergeAzuresqltable": {
						"type": "string",
						"defaultValue": "ETL.[usp_merge_azuresqltable]"
					},
					"databricksclustername": {
						"type": "string",
						"defaultValue": "ADF_Job_Cluster"
					},
					"databricksclusterid": {
						"type": "string",
						"defaultValue": "0827-051915-duchy366"
					},
					"SourceTableName": {
						"type": "string"
					},
					"skipchangedset": {
						"type": "string",
						"defaultValue": "0"
					},
					"databrickssecretname": {
						"type": "string"
					},
					"checkfordeletesind": {
						"type": "string",
						"defaultValue": "0"
					},
					"incrementalloadind": {
						"type": "string",
						"defaultValue": "0"
					}
				},
				"variables": {
					"processfile": {
						"type": "Boolean"
					},
					"FileNames": {
						"type": "Array"
					},
					"FileName": {
						"type": "String"
					},
					"FileSize": {
						"type": "String"
					},
					"CDCRun": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FileExists')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_DataLanding_FizeSize')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LIMS_Source_To_ASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute_PL_EDWDiscovery_TRFM_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute_PL_EDWDiscovery_SourceToBlob_SqlServer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute_PL_EDWDiscovery_SourceToBlob_SqlServer",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "LIMS"
					}
				},
				"folder": {
					"name": "LIMS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LIWIS_SourceToAsql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_Oracle",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "LIWIS"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "LIWIS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_Oracle')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MDSProd_SourceToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "MDSProd"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "MDSProd"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Openwindows_SourceToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "OpenWindows"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "OpenWindows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ProcessModel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a general pipeline for ssas tabular model cube refresh. it would refresh the cube according to the parameter parsed in the pipeline.",
				"activities": [
					{
						"name": "Login",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',pipeline().parameters.TenantID,'/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&resource=https://*.asazure.windows.net&client_id=',pipeline().parameters.ClientID,'&client_secret=',encodeUriComponent(pipeline().parameters.ClientSecret))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilRefreshComplete",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "FilterToCurrentRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('GetAzureASRefreshStatus').output.status,'inProgress'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GetAzureASRefreshStatus",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait30Seconds",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://',pipeline().parameters.Region,'.asazure.windows.net/servers/',pipeline().parameters.Server,'/models/',pipeline().parameters.DatabaseName,'/refreshes/',activity('FilterToCurrentRefresh').output.Value[0].refreshId)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Wait30Seconds",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "FilterToCurrentRefresh",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetAzureASRefreshes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@json(activity('GetAzureASRefreshes').output.Response)",
								"type": "Expression"
							},
							"condition": {
								"value": "@greaterOrEquals(item().startTime,addseconds(activity('StartProcessingAzureAS').output.startTime,-30))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartProcessingAzureAS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Login",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://',pipeline().parameters.Region,'.asazure.windows.net/servers/',pipeline().parameters.Server,'/models/',pipeline().parameters.DatabaseName,'/refreshes')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
									"type": "Expression"
								}
							},
							"body": {
								"Type": "Full",
								"CommitMode": "transactional",
								"MaxParallelism": 10,
								"RetryCount": 2
							}
						}
					},
					{
						"name": "IfFailed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "UntilRefreshComplete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetAzureASRefreshStatus').output.status,'failed')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ThrowErrorOnFailure",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@string(activity('GetAzureASRefreshStatus').output)",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {}
									}
								}
							]
						}
					},
					{
						"name": "GetAzureASRefreshes",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "StartProcessingAzureAS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://',pipeline().parameters.Region,'.asazure.windows.net/servers/',pipeline().parameters.Server,'/models/',pipeline().parameters.DatabaseName,'/refreshes')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat(string(activity('Login').output.token_type),' ',string(activity('Login').output.access_token))",
									"type": "Expression"
								}
							},
							"body": {
								"Type": "Full",
								"CommitMode": "transactional",
								"MaxParallelism": 10,
								"RetryCount": 2
							}
						}
					}
				],
				"parameters": {
					"TenantID": {
						"type": "String",
						"defaultValue": "855f3711-2ce2-4c7e-af5b-a513f6f2ae6d"
					},
					"ClientID": {
						"type": "String",
						"defaultValue": "89ad5ef1-4924-43a2-9dca-37e65f827ef8"
					},
					"ClientSecret": {
						"type": "String",
						"defaultValue": "[QG2xdpLS5T1l9-/MoK-?ALgjk/Enf.-"
					},
					"SubscriptionID": {
						"type": "String",
						"defaultValue": "3ae58716-8913-4137-b029-844b270cb4a0"
					},
					"Region": {
						"type": "String",
						"defaultValue": "australiaeast"
					},
					"Server": {
						"type": "String",
						"defaultValue": "quueaprddaaas001"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "Temetra"
					}
				},
				"folder": {
					"name": "Azure AS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Reference_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckExecutionStatusForSourceToBlob",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlySourceToBlob",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_EDWOnPrem_DM_SourcetoBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SqlServer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckExecutionStatusForBlobToASQL",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckExecutionStatusForSourceToBlob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.OnlyBlobtoASQL",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ExecutePL_TRFM_BLOBToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.firstRow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "REFERENCE"
					},
					"OnlySourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"OnlyBlobtoASQL": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "REF"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SqlServer')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SUMS_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute notebook to produce the csv file",
				"activities": [
					{
						"name": "Sums_Prepare_Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/SUMS/SUMS_Prepare",
							"baseParameters": {
								"Load_Type": {
									"value": "@pipeline().parameters.Load_Type",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID,databricksclusterid,databrickssecretname FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "PL_EDWDiscovery_TRFM_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Sums_Prepare_Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "SUMS"
					},
					"Load_Type": {
						"type": "string",
						"defaultValue": "Full"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SUMS_Daily_Consumption_And_Analysis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SUMS_Daily_Consumption",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/SUMS/SUMS_DailyConsumption",
							"baseParameters": {
								"Load_Type": {
									"value": "@pipeline().parameters.Load_Type",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID,databricksclusterid,databrickssecretname FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SUMS_MovingAnalysis",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "SUMS_Daily_Consumption",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/SUMS/SUMS_MovingAnalysis",
							"baseParameters": {
								"Load_Type": {
									"value": "@pipeline().parameters.Load_Type",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SUMS_KCA_Consumption",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "SUMS_MovingAnalysis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/SUMS/SUMS_KCA_Consumption"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "SUMS"
					},
					"Load_Type": {
						"type": "string",
						"defaultValue": "Full"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SUMS_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_SUMS_SourceToBlob",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_SUMS_SourcetoBlob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_SUMS_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_SUMS_SourceToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_SUMS_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Load_Type": {
									"value": "@pipeline().parameters.Load_Type",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_SUMS_Daily_Consumption_And_Analysis",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_SUMS_BlobToASQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_SUMS_Daily_Consumption_And_Analysis",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Source_Name": "SUMS",
								"Load_Type": {
									"value": "@pipeline().parameters.Load_Type",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"Load_Type": {
						"type": "string",
						"defaultValue": "Full"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_SUMS_SourcetoBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SUMS_BlobToASQL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_SUMS_Daily_Consumption_And_Analysis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SUMS_SourcetoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SUMS_Copy_to_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2
						},
						"inputs": [
							{
								"referenceName": "DS_FS_GlobalScape_SUMS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_FS_SUMS",
								"type": "DatasetReference",
								"parameters": {
									"targetblobfoldername": {
										"value": "@variables('targetblobfoldername')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Archive_Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SUMS_Copy_to_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_GlobalScape_SUMS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FS_GlobalScape_SUMS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@concat(activity('lkp_getfilemetadata').output.Firstrow['FileFolderName'],'\\Archive')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete_Old_From_Ventia",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_GlobalScape_SUMS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": false,
								"wildcardFileName": "*.*"
							}
						}
					},
					{
						"name": "lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  FileFolderName\nfrom etl.sourcesystem\nwhere sourcename = '@{pipeline().parameters.sourcename}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "SUMS"
					}
				},
				"variables": {
					"targetblobfoldername": {
						"type": "String",
						"defaultValue": "sums-datalanding"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_SUMS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_SUMS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Silo_Weather_Observations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute notebook to produce the csv file",
				"activities": [
					{
						"name": "Silo_Weather_Observations",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Silo/01-SILO_Weather_Observations",
							"baseParameters": {
								"param_load_type": {
									"value": "@pipeline().parameters.Silo_load_type",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('GetSourceID').output.Firstrow['databricksclusterid']",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('GetSourceID').output.Firstrow['databrickssecretname']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID,databricksclusterid,databrickssecretname FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "PL_EDWDiscovery_TRFM_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Silo_Weather_Observations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "SILO"
					},
					"Silo_load_type": {
						"type": "string",
						"defaultValue": "Incremental_Load"
					}
				},
				"folder": {
					"name": "Silo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_StartFSECluster')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start FSE Cluster",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Get FSE Cluster ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/FSE/Start FSE Cluster"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@activity('Get FSE Cluster ID').output.firstrow.databricksclusterid",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@activity('Get FSE Cluster ID').output.firstrow.databrickssecretname",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get FSE Cluster ID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select distinct databricksclusterid,databrickssecretname  from ETL.SourceSystem\nwhere databricksclustername = 'ADF_Job_Cluster FSE'",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"folder": {
					"name": "FieldServicesEdge"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TFSCS_DM_SourcetoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TFSCS_Copy_to_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 4
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_GlobalScape_TFS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_FS_TFS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"targetblobfoldername": {
										"value": "@variables('targetblobfoldername')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Archive_Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TFSCS_Copy_to_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_GlobalScape_TFS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FS_GlobalScape_Archive",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete_Processed_files From_CardServices",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_GlobalScape_TFS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": false,
								"wildcardFileName": "*.*"
							}
						}
					},
					{
						"name": "Lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  FileFolderName\nfrom etl.sourcesystem\nwhere sourcename = '@{pipeline().parameters.sourcename}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "Tanker Filling Station Card Services"
					}
				},
				"variables": {
					"Testvar": {
						"type": "String"
					},
					"targetblobfoldername": {
						"type": "String",
						"defaultValue": "tankerfillingstation-dataloading/CardService"
					}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_TFS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_FS_TFS_Sink')]",
				"[concat(variables('factoryId'), '/datasets/DS_FS_GlobalScape_Archive')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TFSCS_SourceToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute PL_TFSCS_DM_SourcetoBlob",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_TFSCS_DM_SourcetoBlob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute PL_TFSCS_TRFM_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute PL_TFSCS_DM_SourcetoBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_TFSCS_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_TFSCS_DM_SourcetoBlob')]",
				"[concat(variables('factoryId'), '/pipelines/PL_TFSCS_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TFSCS_TRFM_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID FROM etl.SourceSystem where \n SourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Table Metadata Information",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute_PL_EDWDiscovery_TRFM_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Table Metadata Information",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"source_name": {
						"type": "string",
						"defaultValue": "Tanker Filling Station Card Services"
					}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]",
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_24HR_STATS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Temetra_24HR_STATS",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/Temetra_24Hr_Stats"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"databricks_cluster_id": {
						"type": "string"
					},
					"databricks_secret_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_API_Response')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute Temetra_API_Response databricks notebook for API data ingestion",
				"activities": [
					{
						"name": "Temetra_API_Response",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/Temetra_API_Response"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"databricks_cluster_id": {
						"type": "string"
					},
					"databricks_secret_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Analysis_Service')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_Process_ssas_Model_Temetra",
						"description": "Process Temetra Model analysis service",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_ProcessModel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"TenantID": "855f3711-2ce2-4c7e-af5b-a513f6f2ae6d",
								"ClientID": "89ad5ef1-4924-43a2-9dca-37e65f827ef8",
								"ClientSecret": "[QG2xdpLS5T1l9-/MoK-?ALgjk/Enf.-",
								"SubscriptionID": "3ae58716-8913-4137-b029-844b270cb4a0",
								"Region": "australiaeast",
								"Server": "quueaprddaaas001",
								"DatabaseName": "Temetra"
							}
						}
					}
				],
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ProcessModel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_BlobToASQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePL_TRFM_BLOBToASQL",
						"description": "Loading Temetra API Data into databricks delta and Azure sql db",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceID": {
									"value": "@activity('GetSourceID').output.firstRow['SourceID']",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID from etl.SourceSystem\nwhere SourceName='@{pipeline().parameters.SourceName}'",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "TEMETRA"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_TRFM_BlobToASQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Hourly_Consumption')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute Temetra_Hourly_Consumption Notebook in databricks",
				"activities": [
					{
						"name": "Databricks_Temetra_Hourly_Consumption",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/Temetra_Hourly_Consumption"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"databricks_cluster_id": {
						"type": "string"
					},
					"databricks_secret_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Temetra Main Pipeline",
				"activities": [
					{
						"name": "PL_Temetra_API_Response",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_API_Response",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_Temetra_BlobToASQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_API_Response",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_BlobToASQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_Temetra_Hourly_Consumption",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_BlobToASQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_Hourly_Consumption",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_Temetra_Analysis_Service",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_24HR_STATS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_Analysis_Service",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_Temetra_Potential_Leaks",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_Hourly_Consumption",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_Potential_Leaks",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_Temetra_24HR_STATS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_Temetra_Potential_Leaks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Temetra_24HR_STATS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"databricks_cluster_id": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databricks_secret_name": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"databricks_cluster_id": {
						"type": "string",
						"defaultValue": "0417-051914-axons909"
					},
					"databricks_secret_name": {
						"type": "string",
						"defaultValue": "databricks-token"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_API_Response')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_BlobToASQL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Hourly_Consumption')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Analysis_Service')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Potential_Leaks')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_24HR_STATS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Temetra_Potential_Leaks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute Temetra_Potential_Leaks databricks notebook",
				"activities": [
					{
						"name": "Temetra_Potential_Leaks",
						"description": "/edw_discovery/Temetra/Temetra_Potential_Leaks",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/Temetra/Temetra_Potential_Leaks"
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricks_cluster_id",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databricks_secret_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"databricks_cluster_id": {
						"type": "string"
					},
					"databricks_secret_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Temetra"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_DBR_ADF_Job_Cluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_DataLanding_FileExists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"blobcontainer": {
						"type": "string"
					},
					"blobfolderpath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().blobfolderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().blobcontainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_DataLanding_FizeSize')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_Datalanding')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"TargetFileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "\""
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelimiter",
						"type": "Expression"
					},
					"rowDelimiter": "\n",
					"escapeChar": "º",
					"quoteChar": {
						"value": "@dataset().QuoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_Dataloading')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"targetblobfoldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().targetblobfoldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_SUMS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"targetblobfoldername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().targetblobfoldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_FS_TFS_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_quueadadlslanding001",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"targetblobfoldername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().targetblobfoldername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_quueadadlslanding001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_EDWDiscovery')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_EDWDiscovery",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_EDWDiscovery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_FTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_FTP",
					"type": "LinkedServiceReference",
					"parameters": {
						"Host": "ftp://ftp.bom.gov.au/"
					}
				},
				"parameters": {
					"FileFolderPath": {
						"type": "string",
						"defaultValue": "anon/gen/clim_data/IDCKWCDEA0/tables/qld/ brisbane"
					},
					"FileFolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FtpServerLocation",
						"folderPath": {
							"value": "@concat(dataset().FileFolderPath,dataset().FileFolderName)",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_FTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_Archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Archive folder in GlobalScape",
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@concat(dataset().filefolder,'\\Archive')",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "tag_id",
						"type": "String"
					},
					{
						"name": "time",
						"type": "String"
					},
					{
						"name": "counter",
						"type": "String"
					},
					{
						"name": "event",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_SUMS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filefolder": {
						"type": "string",
						"defaultValue": "\\\\Nfujprd200\\EBI_PROD_LANDING\\SUMS"
					}
				},
				"folder": {
					"name": "SUMS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().filefolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_FS_GlobalScape_TFS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filefolder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().filefolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_File_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_FS_Globalscape",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DirectoryName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"QuoteCharacter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_FS_Globalscape')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Oracle_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ORAC_Framework",
					"type": "LinkedServiceReference",
					"parameters": {
						"HostName": {
							"value": "@dataset().HostName",
							"type": "Expression"
						},
						"PortNo": {
							"value": "@dataset().PortNo",
							"type": "Expression"
						},
						"SID": {
							"value": "@dataset().SID",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretPasswordName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"HostName": {
						"type": "string",
						"defaultValue": "QNDCPRD137.corporate.urbanutilities.internal"
					},
					"PortNo": {
						"type": "string",
						"defaultValue": "1521"
					},
					"SID": {
						"type": "string",
						"defaultValue": "SDCM"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "EBI_TECHM_USERS"
					},
					"SecretPasswordName": {
						"type": "string",
						"defaultValue": "gis-ebi-techm-users"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ORAC_Framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_EDWDiscovery_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_Framework",
					"type": "LinkedServiceReference",
					"parameters": {
						"Servername": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"Databasename": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"SecretPasswordName": {
							"value": "@dataset().SecretPasswordName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "PRDC04-SQL"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "EDW_Discovery"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "urbanutilities\\svc-EBI_PRDC04_AGT"
					},
					"SecretPasswordName": {
						"type": "string",
						"defaultValue": "SVC-EBI-PRDC04-AGT"
					}
				},
				"folder": {
					"name": "Framework"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_Framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_ELLIPSE_ANALYTICS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_ELLIPSE_ANALYTICS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Z_RUN_HISTORY"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_ELLIPSE_ANALYTICS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADF_LS_AKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://quu-ea-prd-da-key-vault.vault.azure.net/",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ADF_LS_AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_quueadadlslanding001')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_ABLB_quueadadlslanding001_properties_typeProperties_serviceEndpoint')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_EDWDiscovery')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_EDWDiscovery_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_DBR_ADF_Job_Cluster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Azure Databricks Access Token",
				"parameters": {
					"databricksclusterid": {
						"type": "string",
						"defaultValue": "0417-051914-axons909"
					},
					"databrickssecretname": {
						"type": "string",
						"defaultValue": "databricks-token"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://australiaeast.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().databrickssecretname",
							"type": "Expression"
						}
					},
					"existingClusterId": "@linkedService().databricksclusterid"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FS_FTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "FtpServer",
				"annotations": [],
				"typeProperties": {
					"host": "[parameters('LS_FS_FTP_properties_typeProperties_host')]",
					"port": 21,
					"enableSsl": false,
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				},
				"parameters": {
					"Host": {
						"type": "string",
						"defaultValue": "ftp://ftp.bom.gov.au/"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_FS_Globalscape')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_FS_Globalscape_properties_typeProperties_host')]",
					"userId": "[parameters('LS_FS_Globalscape_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "SVC-EBI-PRDC04-AGT"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ORAC_Framework')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"HostName": {
						"type": "string"
					},
					"PortNo": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('LS_ORAC_Framework_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_ELLIPSE_ANALYTICS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_SQL_ELLIPSE_ANALYTICS_properties_typeProperties_connectionString_secretName')]"
					},
					"userName": "[parameters('LS_SQL_ELLIPSE_ANALYTICS_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "svc-ebi-prdc04-agt"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_Framework')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Servername": {
						"type": "string",
						"defaultValue": "PRDC04-SQL"
					},
					"Databasename": {
						"type": "string",
						"defaultValue": "EDW_DISCOVERY"
					},
					"SecretPasswordName": {
						"type": "string",
						"defaultValue": "svc-ebi-prdc04-agt"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "urbanutilities\\svc-EBI_PRDC04_AGT"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_Framework_connectionString')]",
					"userName": "[parameters('LS_SQL_Framework_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretPasswordName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/ADF_LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABN_daily_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ABN data Ingestion via Web Api",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_ABN_Main",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-04-30T05:49:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_ABN_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BOM_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_BOM_SourceToAsql",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('BOM_Daily_Trigger_properties_PL_BOM_SourceToAsql_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:45:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								20
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_BOM_SourceToAsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ellipse9_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-06-15T07:28:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								18
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FSE_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_FSE_Source_To_ASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('FSE_Daily_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-06-23T06:30:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								45
							],
							"hours": [
								14
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_FSE_Source_To_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FSE_Hourly_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "FSE_Hourly_Trigger",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_FSE_Source_To_ASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('FSE_Hourly_Trigger_properties_PL_FSE_Source_To_ASQL_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-06-23T06:31:00.000Z",
						"endTime": "2020-06-24T06:31:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								50
							],
							"hours": [
								19,
								20,
								21,
								22,
								23,
								0,
								1,
								2,
								3,
								4,
								5,
								6,
								7,
								8,
								9
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_FSE_Source_To_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LIMS_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_LIMS_Source_To_ASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"Source_Name": "[parameters('LIMS_Daily_Trigger_properties_PL_LIMS_Source_To_ASQL_parameters_Source_Name')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:49:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								17
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_LIMS_Source_To_ASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LIWIS_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_LIWIS_SourceToAsql",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('LIWIS_Daily_Trigger_properties_PL_LIWIS_SourceToAsql_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:43:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_LIWIS_SourceToAsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MDS_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_MDSProd_SourceToASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('MDS_Daily_Trigger_properties_PL_MDSProd_SourceToASQL_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-26T22:52:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_MDSProd_SourceToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpenWindows_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "OpenWindows Daily Trigger",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Openwindows_SourceToASQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('OpenWindows_Daily_Trigger_properties_PL_Openwindows_SourceToASQL_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-04-30T05:47:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								21
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Openwindows_SourceToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REF_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Reference_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceName": "[parameters('REF_Daily_Trigger_properties_PL_Reference_Main_parameters_SourceName')]",
							"OnlySourceToBlob": "[parameters('REF_Daily_Trigger_properties_PL_Reference_Main_parameters_OnlySourceToBlob')]",
							"OnlyBlobtoASQL": "[parameters('REF_Daily_Trigger_properties_PL_Reference_Main_parameters_OnlyBlobtoASQL')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-26T22:56:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Reference_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SILO_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Silo_Weather_Observations",
							"type": "PipelineReference"
						},
						"parameters": {
							"Source_Name": "[parameters('SILO_Daily_Trigger_properties_PL_Silo_Weather_Observations_parameters_Source_Name')]",
							"Silo_load_type": "[parameters('SILO_Daily_Trigger_properties_PL_Silo_Weather_Observations_parameters_Silo_load_type')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:47:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Silo_Weather_Observations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SUMS_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_SUMS_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"Load_Type": "[parameters('SUMS_Daily_Trigger_properties_PL_SUMS_Main_parameters_Load_Type')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:44:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								22
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_SUMS_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEMETRA_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Temetra_Main",
							"type": "PipelineReference"
						},
						"parameters": {
							"databricks_cluster_id": "[parameters('TEMETRA_Daily_Trigger_properties_PL_Temetra_Main_parameters_databricks_cluster_id')]",
							"databricks_secret_name": "[parameters('TEMETRA_Daily_Trigger_properties_PL_Temetra_Main_parameters_databricks_secret_name')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:47:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Temetra_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TFS_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_TFSCS_SourceToASQL",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-15T00:48:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								17
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_TFSCS_SourceToASQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Self hosted runtime gateway nfujprd298",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FSE_StartFSECluster_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_StartFSECluster",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-06-24T05:27:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								45
							],
							"hours": [
								20,
								21,
								22,
								23,
								0,
								1,
								2,
								3,
								4,
								5,
								6,
								7,
								8,
								18,
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_StartFSECluster')]"
			]
		}
	]
}