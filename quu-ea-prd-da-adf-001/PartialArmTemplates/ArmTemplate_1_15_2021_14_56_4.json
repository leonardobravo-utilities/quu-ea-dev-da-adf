{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "quu-ea-prd-da-adf-001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_EDWDiscovery_DM_SourceToBlob_SalesForce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetIncrementalLoadTableList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_get_tablelist_by_sourceid]",
								"storedProcedureParameters": {
									"sourceid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.SourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetIncrementalLoadTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetIncrementalLoadTableList').output.value\n\n",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Framework_CopyDBtoBlob_Pipeline",
									"description": "Execute copy db to blob storage pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_DM_SourcetoBlob_Salesforce",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Data_Source_Table_Name": {
												"value": "@item().Data_Source_Table_Name",
												"type": "Expression"
											},
											"Data_Source_WaterMarkColumn": {
												"value": "@item().Data_Source_WaterMarkColumn",
												"type": "Expression"
											},
											"Data_Destination_Folder_Path": {
												"value": "@item().Data_Destination_Folder_Path",
												"type": "Expression"
											},
											"Control_Table_Table_Name": {
												"value": "@item().Control_Table_Table_Name",
												"type": "Expression"
											},
											"Control_Table_Column_Name": {
												"value": "@item().Control_Table_Column_Name",
												"type": "Expression"
											},
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"SourceServerName": {
												"value": "@item().SourceServerName",
												"type": "Expression"
											},
											"SourceDatabaseName": {
												"value": "@item().SourceDatabaseName",
												"type": "Expression"
											},
											"Data_Destination_File_Name": {
												"value": "@item().Data_Destination_File_Name",
												"type": "Expression"
											},
											"IncrementalLoadInd": {
												"value": "@item().IncrementalLoadInd",
												"type": "Expression"
											},
											"File_Name_Ext": {
												"value": "@item().File_Name_Ext",
												"type": "Expression"
											},
											"File_Name_DateTime_Ind": {
												"value": "@item().File_Name_DateTime_Ind",
												"type": "Expression"
											},
											"Join_Condition": {
												"value": "@item().Join_Condition",
												"type": "Expression"
											},
											"Source_Column_List": {
												"value": "@item().Source_Column_List",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"source_where_filter": {
												"value": "@item().Source_Where_Filter",
												"type": "Expression"
											},
											"UserName": {
												"value": "@item().UserName",
												"type": "Expression"
											},
											"SecretPasswordName": {
												"value": "@item().SecretPasswordName",
												"type": "Expression"
											},
											"SourceName": {
												"value": "@item().SourceName",
												"type": "Expression"
											},
											"DeltaTargetTableName": {
												"value": "@item().DeltaTargetTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceID": {
						"type": "string",
						"defaultValue": "3"
					}
				},
				"folder": {
					"name": "EDW_Discovery"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Framework_DM_SourcetoBlob_Salesforce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Salesforce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "ADF_DS_SF",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure2",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "ADF_DS_SF",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List} from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere \n@{pipeline().parameters.Data_Source_WaterMarkColumn} > @{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}Z\nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= @{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}Z",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "ADF_DS_SF",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure1",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADF_DS_SF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Salesforce_DM_SourcetoBlob_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSourceID",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select SourceID FROM etl.SourceSystem where \nSourceName='@{pipeline().parameters.Source_Name}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "CheckSourceToBlobInd",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetSourceID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SourceToBlob,true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute_Salesforce_DM_SourceToBlob",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_DM_SourceToBlob_SalesForce",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckBlobtoAsqlInd",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckSourceToBlobInd",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.BlobtoAsql,true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute_Salesforce_TRFM_BlobToASQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_EDWDiscovery_TRFM_BlobToASQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceID": {
												"value": "@activity('GetSourceID').output.Firstrow['SourceID']",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Source_Name": {
						"type": "string",
						"defaultValue": "SalesForce"
					},
					"SourceToBlob": {
						"type": "bool",
						"defaultValue": true
					},
					"BlobtoAsql": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Salesforce"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_EDWDiscovery_DM_SourceToBlob_SalesForce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADF_DS_SF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SF",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SalesforceObject",
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SF')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Salesforce",
				"typeProperties": {
					"environmentUrl": "https://login.salesforce.com",
					"username": "analytics-support@urbanutilities.com.au",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "salesforce-prod-analytics-support-password"
					},
					"securityToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADF_LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "salesforce-prod-analytics-support-securitytoken"
					}
				}
			},
			"dependsOn": []
		}
	]
}