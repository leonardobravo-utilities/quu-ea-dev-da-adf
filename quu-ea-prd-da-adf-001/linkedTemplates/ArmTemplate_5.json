{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "quu-ea-prd-da-adf-001"
		},
		"SUMS_Mart_Daily_Trigger_properties_PL_SUMS_Daily_Consumption_And_Analysis_parameters_Source_Name": {
			"type": "string",
			"defaultValue": "SUMS"
		},
		"SUMS_Mart_Daily_Trigger_properties_PL_SUMS_Daily_Consumption_And_Analysis_parameters_Load_Type": {
			"type": "string",
			"defaultValue": "Incremental"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Export_To_NFUJPRD202')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will export the Files at Network Path \\\\Nfujprd202\\FDrive",
				"activities": [
					{
						"name": "Files List to Export",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from ETL.FileExportList a where IsActive=1 and \nexists (select 1  from etl.fileexport b where  IsActive=1 and a.FileExportID=b.FileExportID and \nUpper(b.FileExportName)=Upper('@{pipeline().parameters.FileExportName}') )\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachFile",
						"description": "Generate the Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Files List to Export",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Files List to Export').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Query Rowcount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "@if(empty(item().SourceRowCountQuery),'select 1 as SourceRowCount',item().SourceRowCountQuery)",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "First Row Exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Query Rowcount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Query Rowcount').output.firstRow.SourceRowCount,0))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "lkp_getlocattime",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": {
															"value": "DECLARE @DateTimeFormat as varchar(20);\nDECLARE @localdatetime as datetime;\nSet @DateTimeFormat ='@{item().DateTimeFormatInFileName}';\nEXEC @localdatetime = [dbo].[udf_getLocalDTM];\nselect FORMAT(@localdatetime, Case when len(@DateTimeFormat)=0 then'yyyy_MM_dd_HHmmss' else @DateTimeFormat end) as  localstarttime;",
															"type": "Expression"
														},
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Generate File",
												"description": "",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "lkp_getlocattime",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@item().SourceQuery",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ""
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 0
												},
												"inputs": [
													{
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_File_NFUJPRD202",
														"type": "DatasetReference",
														"parameters": {
															"TargetFilePath": {
																"value": "@item().TargetFilePath",
																"type": "Expression"
															},
															"TargetFileName": {
																"value": "@if(equals(item().IncludeDateTimeInFile_Name,1)\n,  concat(item().TargetFileName\n             ,'_'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,item().TargetFileNameExt)\n,\nconcat(\nitem().TargetFileName\n,item().TargetFileNameExt)\n)\n\n",
																"type": "Expression"
															},
															"ColumnDelimiter": {
																"value": "@item().ColumnDelimiter",
																"type": "Expression"
															},
															"QuoteCharacter": {
																"value": "@item().QuoteCharacter",
																"type": "Expression"
															},
															"EscapeCharacter": {
																"value": "@item().EscapeCharacter",
																"type": "Expression"
															},
															"FirstRowHeader": {
																"value": "@item().FirstRowHeader",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Update Incremental Date",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Generate File",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[ETL].usp_update_fileexport_incrementaldatevalue",
													"storedProcedureParameters": {
														"FileID": {
															"value": {
																"value": "@item().FileID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileExportName": {
						"type": "string",
						"defaultValue": "ICN"
					}
				},
				"folder": {
					"name": "File Export"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Export_To_globalscape')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will export the Files at Network Path \\\\Nfujprd310\\ebi_prod_landing",
				"activities": [
					{
						"name": "Files List to Export",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from ETL.FileExportList a where IsActive=1 and \nexists (select 1  from etl.fileexport b where  IsActive=1 and a.FileExportID=b.FileExportID and \nUpper(b.FileExportName)=Upper('@{pipeline().parameters.FileExportName}') )\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachFile",
						"description": "Generate the Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Files List to Export",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Files List to Export').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Query Rowcount",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "@if(empty(item().SourceRowCountQuery),'select 1 as SourceRowCount',item().SourceRowCountQuery)",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "First Row Exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Query Rowcount",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Query Rowcount').output.firstRow.SourceRowCount,0))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "lkp_getlocattime",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlMISource",
														"sqlReaderQuery": {
															"value": "DECLARE @DateTimeFormat as varchar(20);\nDECLARE @localdatetime as datetime;\nSet @DateTimeFormat ='@{item().DateTimeFormatInFileName}';\nEXEC @localdatetime = [dbo].[udf_getLocalDTM];\nselect FORMAT(@localdatetime, Case when len(@DateTimeFormat)=0 then'yyyy_MM_dd_HHmmss' else @DateTimeFormat end) as  localstarttime;",
															"type": "Expression"
														},
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Generate File",
												"description": "",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "lkp_getlocattime",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@item().SourceQuery",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ""
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 0
												},
												"inputs": [
													{
														"referenceName": "DS_ASQL_EDWDiscovery",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_File_globalscape",
														"type": "DatasetReference",
														"parameters": {
															"TargetFilePath": {
																"value": "@item().TargetFilePath",
																"type": "Expression"
															},
															"TargetFileName": {
																"value": "@if(equals(item().IncludeDateTimeInFile_Name,1)\n,  concat(item().TargetFileName\n             ,'_'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,item().TargetFileNameExt)\n,\nconcat(\nitem().TargetFileName\n,item().TargetFileNameExt)\n)\n\n",
																"type": "Expression"
															},
															"ColumnDelimiter": {
																"value": "@item().ColumnDelimiter",
																"type": "Expression"
															},
															"QuoteCharacter": {
																"value": "@item().QuoteCharacter",
																"type": "Expression"
															},
															"EscapeCharacter": {
																"value": "@item().EscapeCharacter",
																"type": "Expression"
															},
															"FirstRowHeader": {
																"value": "@item().FirstRowHeader",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Update Incremental Date",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Generate File",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[ETL].usp_update_fileexport_incrementaldatevalue",
													"storedProcedureParameters": {
														"FileID": {
															"value": {
																"value": "@item().FileID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_EDWDiscovery",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileExportName": {
						"type": "string",
						"defaultValue": "QAO"
					}
				},
				"folder": {
					"name": "File Export"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Monitoring')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup source files",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select FileFolderName, [FileName] TargetFileName, LastLoadedDate,CheckpointColumn,CheckpointColumnDatatype,CheckpointColumnValue\nfrom ETL.SourceFileLoad SFL join etl.SourceSystem SS on SS.SourceID = SFL.SourceID\njoin ETL.SourceTableDetails STD on replace(SFL.FileName,'.csv','') = STD.SourceTableName\nwhere  SourceName='@{pipeline().parameters.SourceName}' and IsActive = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup source files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup source files').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata",
									"description": "check if any files need to process in the blob container",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_FS_GlobalScape_FileSize",
											"type": "DatasetReference",
											"parameters": {
												"filefolder": {
													"value": "@item().FileFolderName",
													"type": "Expression"
												},
												"file": {
													"value": "@item().TargetFileName",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists",
											"lastModified"
										],
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Check if file exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Send email file not received",
												"type": "WebActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": {
														"value": "@pipeline().parameters.LogicAppURL",
														"type": "Expression"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"value": "{\n   \"DataFactoryName\": \"@{pipeline().DataFactory}\",\n   \"PipelineName\": \"@{pipeline().Pipeline}\",\n   \"Subject\": \"@{pipeline().parameters.Subject}\",\n   \"ErrorMessage\": \" File @{item().TargetFileName}  is not received\",\n   \"EmailTo\": \"@{pipeline().parameters.EmailTo}\"\n}\t",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set File Name",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileName",
													"value": {
														"value": "@string(item().TargetFileName)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Retrieve File Size",
												"type": "GetMetadata",
												"dependsOn": [
													{
														"activity": "Set File Name",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_FS_GlobalScape_FileSize",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@item().FileFolderName",
																"type": "Expression"
															},
															"file": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"size"
													],
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												}
											},
											{
												"name": "Set File Size",
												"description": "Assign the file size value to the variable",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Retrieve File Size",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileSize",
													"value": {
														"value": "@string(activity('Retrieve File Size').output.Size)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Retrieve File Modification Date",
												"type": "GetMetadata",
												"dependsOn": [
													{
														"activity": "Execute Pipeline for File size check",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_FS_GlobalScape_FileSize",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@item().FileFolderName",
																"type": "Expression"
															},
															"file": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"lastModified"
													],
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												}
											},
											{
												"name": "Set LastModified Date",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Retrieve File Modification Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "LastModifiedDate",
													"value": {
														"value": "@string(convertfromUtc(activity('Retrieve File Modification Date').output.LastModified,'E. Australia Standard Time'))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute Pipeline for File size check",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Set File Size",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_File_Monitoring_File_Size_Check",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"FileSize": {
															"value": "@variables('FileSize')",
															"type": "Expression"
														},
														"Subject": {
															"value": "@pipeline().parameters.Subject",
															"type": "Expression"
														},
														"FileName": {
															"value": "@variables('FileName')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@pipeline().parameters.EmailTo",
															"type": "Expression"
														},
														"LogicAppURL": {
															"value": "@pipeline().parameters.LogicAppURL",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute Pipeline for Lastmodified check",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Set LastModified Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_File_Monitoring_File_LastModifiedDate_Check",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"LastModifiedDate": {
															"value": "@variables('LastModifiedDate')",
															"type": "Expression"
														},
														"Subject": {
															"value": "@pipeline().parameters.Subject",
															"type": "Expression"
														},
														"LastLoadedDate": {
															"value": "@ITEM().LastLoadedDate",
															"type": "Expression"
														},
														"FileName": {
															"value": "@variables('FileName')",
															"type": "Expression"
														},
														"EmailTo": {
															"value": "@pipeline().parameters.EmailTo",
															"type": "Expression"
														},
														"LogicAppURL": {
															"value": "@pipeline().parameters.LogicAppURL",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Sourcename": {
						"type": "string",
						"defaultValue": "CHRIS21"
					},
					"Subject": {
						"type": "string",
						"defaultValue": "Chris21"
					},
					"ErrorMessageFileNotReceived": {
						"type": "string",
						"defaultValue": "File not received"
					},
					"EmailTo": {
						"type": "string"
					},
					"LogicAppURL": {
						"type": "string"
					}
				},
				"variables": {
					"OldFile": {
						"type": "Array"
					},
					"FileSize": {
						"type": "String"
					},
					"LastModifiedDate": {
						"type": "String"
					},
					"EmptyFile": {
						"type": "Array"
					},
					"FileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Source File Monitoring"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourceToBlob_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_Oracle_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"HostName": {
													"value": "@pipeline().parameters.Host_Name",
													"type": "Expression"
												},
												"PortNo": {
													"value": "@pipeline().parameters.Port_No",
													"type": "Expression"
												},
												"SID": {
													"value": "@pipeline().parameters.SID",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.User_Name",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.Secret_Password_Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure2",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "\nSELECT MAX(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Oracle_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"HostName": {
													"value": "@pipeline().parameters.Host_Name",
													"type": "Expression"
												},
												"PortNo": {
													"value": "@pipeline().parameters.Port_No",
													"type": "Expression"
												},
												"SID": {
													"value": "@pipeline().parameters.SID",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.User_Name",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.Secret_Password_Name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "select   @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition} \nWHERE\nTO_CHAR(@{pipeline().parameters.Data_Source_WaterMarkColumn} ,'YYYY-MM-DD HH24:MI:SS')>REPLACE( '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' ,'T',' ')\nand TO_CHAR(@{pipeline().parameters.Data_Source_WaterMarkColumn} ,'YYYY-MM-DD HH24:MI:SS')<= REPLACE('@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}','T',' ')\n\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_Oracle_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"HostName": {
													"value": "@pipeline().parameters.Host_Name",
													"type": "Expression"
												},
												"PortNo": {
													"value": "@pipeline().parameters.Port_No",
													"type": "Expression"
												},
												"SID": {
													"value": "@pipeline().parameters.SID",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.User_Name",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.Secret_Password_Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure1",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"Host_Name": {
						"type": "string"
					},
					"Port_No": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"User_Name": {
						"type": "string"
					},
					"Secret_Password_Name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_CSVFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "GetLandingMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_GlobalScape_FileExists",
								"type": "DatasetReference",
								"parameters": {
									"p_FileFolder": {
										"value": "@pipeline().parameters.SourceFolderLocation",
										"type": "Expression"
									},
									"p_FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "CheckAnyCSVFilesAndExecuteCopy",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Landing_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_Sort_Landing_Collection').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@replace(string(item().FileName),'\\\"\\\"','')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy_dataTocsvFile",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetProcessFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('processfile')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyFileToArchive_Empty",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS_Source",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															},
															"filename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@{concat(pipeline().parameters.SourceFolderLocation, '\\Archive')}",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteSourceFile_Empty",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFileToArchive_Empty",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_FS_GlobalScape_SUMS_Source",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															},
															"filename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy_CSV_to_Blob",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 2
												},
												"inputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS_Source",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															},
															"filename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_FS_SUMS",
														"type": "DatasetReference",
														"parameters": {
															"targetblobfoldername": {
																"value": "@replace(pipeline().parameters.Data_Destination_Folder_Path, 'ETL_READY/', '')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Archive_Data",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy_CSV_to_Blob",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS_Source",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															},
															"filename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_FS_GlobalScape_SUMS",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@{concat(pipeline().parameters.SourceFolderLocation, '\\Archive')}",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete_Old_From_GS",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Archive_Data",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_FS_GlobalScape_SUMS_Source",
														"type": "DatasetReference",
														"parameters": {
															"filefolder": {
																"value": "@pipeline().parameters.SourceFolderLocation",
																"type": "Expression"
															},
															"filename": {
																"value": "@variables('FileName')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": false
													}
												}
											}
										]
									}
								},
								{
									"name": "SetProcessFile",
									"description": "Process file if the file is csv and the file size is > 0 else do nothing",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "processfile",
										"value": {
											"value": "@if(AND(greater(variables('FileSize'),'0'), contains(variables('FileName'),'.csv') ),true,false)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RetrieveFileSize",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SetFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_FS_GlobalScape_SUMS_Source",
											"type": "DatasetReference",
											"parameters": {
												"filefolder": {
													"value": "@pipeline().parameters.SourceFolderLocation",
													"type": "Expression"
												},
												"filename": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "SetFileSize",
									"description": "Assign the file size value to the variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "RetrieveFileSize",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileSize",
										"value": {
											"value": "@string(activity('RetrieveFileSize').output.size)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "lkp_Sort_Landing_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetLandingMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetLandingMetadata').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Merge CSV Files in Blob",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "lkp_Sort_Blob_Collection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@{if(AND(greater(int(string(activity('lkp_Sort_Blob_Collection').output.count)), 0), equals(toLower(substring(pipeline().parameters.Data_Source_Table_Name, 0, indexOf(pipeline().parameters.Data_Source_Table_Name, '.'))), 'sums')), if(or(equals(toLower(substring(pipeline().parameters.Data_Source_Table_Name, add(indexOf(pipeline().parameters.Data_Source_Table_Name, '.'),1), sub(length(pipeline().parameters.Data_Source_Table_Name), add(indexOf(pipeline().parameters.Data_Source_Table_Name, '.'),1)))), 'meterdetails'), equals(toLower(substring(pipeline().parameters.Data_Source_Table_Name, add(indexOf(pipeline().parameters.Data_Source_Table_Name, '.'),1), sub(length(pipeline().parameters.Data_Source_Table_Name), add(indexOf(pipeline().parameters.Data_Source_Table_Name, '.'),1)))), 'observeredmeterreadings')), 'SUMS_MERGE', 'SUMS_UNMERGE'), 'OTHERS_UNMERGE')}",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "SUMS_MERGE",
									"activities": [
										{
											"name": "Sums_Prepare_Notebook",
											"type": "DatabricksNotebook",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/edw_discovery/SUMS/SUMS_Prepare",
												"baseParameters": {
													"Source_File_Name": {
														"value": "@pipeline().parameters.SourceFileName",
														"type": "Expression"
													},
													"initial_load": {
														"value": "@{if(equals(pipeline().parameters.IsInitialLoad, '1'), 'true', 'false')}",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "LS_DBR_ADF_Job_Cluster",
												"type": "LinkedServiceReference",
												"parameters": {
													"databricksclusterid": {
														"value": "@pipeline().parameters.databricksclusterid",
														"type": "Expression"
													},
													"databrickssecretname": {
														"value": "@pipeline().parameters.databrickssecretname",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "GetBlobStorageMetadata",
						"description": "check if any files need to process in the blob container",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "CheckAnyCSVFilesAndExecuteCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_FS_SUMS",
								"type": "DatasetReference",
								"parameters": {
									"targetblobfoldername": {
										"value": "@replace(pipeline().parameters.Data_Destination_Folder_Path, 'ETL_READY/', '')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "lkp_Sort_Blob_Collection",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetBlobStorageMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ETL].[usp_sort_blob_file_name]",
								"storedProcedureParameters": {
									"json": {
										"type": "String",
										"value": {
											"value": "@string(activity('GetBlobStorageMetadata').output)",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "string",
						"defaultValue": "1"
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceFolderLocation": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string"
					},
					"SourceLandingContainer": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DatabricksClusterId": {
						"type": "string"
					},
					"DatabricksSecretName": {
						"type": "string"
					},
					"SourceTableName": {
						"type": "string"
					},
					"IsInitialLoad": {
						"type": "string"
					}
				},
				"variables": {
					"FileName": {
						"type": "String"
					},
					"processfile": {
						"type": "Boolean"
					},
					"FileSize": {
						"type": "String"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Delete_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "lkp_getlocalstarttime2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_getlocalstarttime2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "select @{replace(replace(pipeline().parameters.BusinessKeyList,'[',''),']','')}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_Oracle_OnPrem",
								"type": "DatasetReference",
								"parameters": {
									"HostName": {
										"value": "@pipeline().parameters.Host_Name",
										"type": "Expression"
									},
									"PortNo": {
										"value": "@pipeline().parameters.Port_No",
										"type": "Expression"
									},
									"SID": {
										"value": "@pipeline().parameters.SID",
										"type": "Expression"
									},
									"UserName": {
										"value": "@pipeline().parameters.UserName",
										"type": "Expression"
									},
									"SecretPasswordName": {
										"value": "@pipeline().parameters.SecretPasswordName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "GenerateDeleteFile",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/ETL_Create_Delete_File",
							"baseParameters": {
								"blobcontainer": {
									"value": "@pipeline().parameters.BlobContainer",
									"type": "Expression"
								},
								"blobfilename": {
									"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
									"type": "Expression"
								},
								"columnlist": {
									"value": "@pipeline().parameters.Source_Column_List",
									"type": "Expression"
								},
								"businesskeylist": {
									"value": "@pipeline().parameters.BusinessKeyList",
									"type": "Expression"
								},
								"deltatargetdbname": {
									"value": "@pipeline().parameters.DeltaTargetDbName",
									"type": "Expression"
								},
								"storageaccount": {
									"value": "@pipeline().parameters.StorageAccount",
									"type": "Expression"
								},
								"columndelimiter": {
									"value": "@pipeline().parameters.ColumnDelimiter",
									"type": "Expression"
								},
								"quotecharacter": {
									"value": "@base64(pipeline().parameters.QuoteCharacter)",
									"type": "Expression"
								},
								"rowsource": {
									"value": "@pipeline().parameters.RowSource",
									"type": "Expression"
								},
								"dbhostname": {
									"value": "@pipeline().parameters.DbHostName",
									"type": "Expression"
								},
								"skipcsvrows": "0",
								"azuretargettablename": {
									"value": "@pipeline().parameters.AzureTargetTableName",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricksclusterid",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databrickssecretname",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetFileDetails",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "GenerateDeleteFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckFileExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetFileDetails').output.Exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteRecords",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/edw_discovery/ETL_Merge_Delete",
										"baseParameters": {
											"blobcontainer": {
												"value": "@pipeline().parameters.BlobContainer",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@pipeline().parameters.Source_Column_List",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@pipeline().parameters.BusinessKeyList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@pipeline().parameters.DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@pipeline().parameters.DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@pipeline().parameters.DeltaStageTableName",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@pipeline().parameters.AzureSqlTempTableName",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@pipeline().parameters.StorageAccount",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@pipeline().parameters.ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@base64(pipeline().parameters.QuoteCharacter)",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@pipeline().parameters.DeleteProcessCompletionDTM",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@pipeline().parameters.DeltaStagingTableParquetFilePath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@pipeline().parameters.DbHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@pipeline().parameters.RowSource",
												"type": "Expression"
											},
											"skipcsvrows": "0",
											"azuresqltargettablename": {
												"value": "@pipeline().parameters.AzureTargetTableName",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DBR_ADF_Job_Cluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"databricksclusterid": {
												"value": "@pipeline().parameters.databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@pipeline().parameters.databrickssecretname",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteRecordsInDatabase",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeleteRecords",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_delete_from_azuresqltable]",
										"storedProcedureParameters": {
											"table_source": {
												"value": {
													"value": "@pipeline().parameters.AzureSqlTempTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_target": {
												"value": {
													"value": "@pipeline().parameters.AzureTargetTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableid": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"BlobContainer": {
						"type": "string"
					},
					"BusinessKeyList": {
						"type": "string"
					},
					"DeltaTargetDbName": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"AzureTargetTableName": {
						"type": "string"
					},
					"DeltaStagingTableParquetFilePath": {
						"type": "string"
					},
					"DeleteProcessCompletionDTM": {
						"type": "string"
					},
					"DeltaStagingDbName": {
						"type": "string"
					},
					"DeltaStageTableName": {
						"type": "string"
					},
					"AzureSqlTempTableName": {
						"type": "string"
					},
					"Host_Name": {
						"type": "string"
					},
					"Port_No": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"databricksclustername": {
						"type": "string"
					},
					"databricksclusterid": {
						"type": "string"
					},
					"databrickssecretname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Delete_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "lkp_getlocalstarttime2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_getlocalstarttime2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select \n\n@{if(  AND(equals(pipeline().parameters.RowSource,'CHRIS21' ),\n equals(pipeline().parameters.Data_Destination_File_Name,'D_13_PDT')) ,\nreplace(pipeline().parameters.BusinessKeyList,'Position_Number','Position Number')\n,pipeline().parameters.BusinessKeyList)}\n\n\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.SourceServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.SourceDatabaseName",
										"type": "Expression"
									},
									"UserName": {
										"value": "@pipeline().parameters.UserName",
										"type": "Expression"
									},
									"SecretPasswordName": {
										"value": "@pipeline().parameters.SecretPasswordName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "GenerateDeleteFile",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/edw_discovery/ETL_Create_Delete_File",
							"baseParameters": {
								"blobcontainer": {
									"value": "@pipeline().parameters.BlobContainer",
									"type": "Expression"
								},
								"blobfilename": {
									"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
									"type": "Expression"
								},
								"columnlist": {
									"value": "@pipeline().parameters.Source_Column_List",
									"type": "Expression"
								},
								"businesskeylist": {
									"value": "@pipeline().parameters.BusinessKeyList",
									"type": "Expression"
								},
								"deltatargetdbname": {
									"value": "@pipeline().parameters.DeltaTargetDbName",
									"type": "Expression"
								},
								"storageaccount": {
									"value": "@pipeline().parameters.StorageAccount",
									"type": "Expression"
								},
								"columndelimiter": {
									"value": "@pipeline().parameters.ColumnDelimiter",
									"type": "Expression"
								},
								"quotecharacter": {
									"value": "@base64(pipeline().parameters.QuoteCharacter)",
									"type": "Expression"
								},
								"rowsource": {
									"value": "@pipeline().parameters.RowSource",
									"type": "Expression"
								},
								"dbhostname": {
									"value": "@pipeline().parameters.DbHostName",
									"type": "Expression"
								},
								"skipcsvrows": "0",
								"azuretargettablename": {
									"value": "@pipeline().parameters.AzureTargetTableName",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_DBR_ADF_Job_Cluster",
							"type": "LinkedServiceReference",
							"parameters": {
								"databricksclusterid": {
									"value": "@pipeline().parameters.databricksclusterid",
									"type": "Expression"
								},
								"databrickssecretname": {
									"value": "@pipeline().parameters.databrickssecretname",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetFileDetails",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "GenerateDeleteFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@concat(pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CheckFileExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('GetFileDetails').output.Exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DeleteRecords",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/edw_discovery/ETL_Merge_Delete",
										"baseParameters": {
											"blobcontainer": {
												"value": "@pipeline().parameters.BlobContainer",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,',',pipeline().parameters.Data_Destination_File_Name,pipeline().parameters.File_Name_Ext)",
												"type": "Expression"
											},
											"columnlist": {
												"value": "@pipeline().parameters.columnschemalist",
												"type": "Expression"
											},
											"businesskeylist": {
												"value": "@pipeline().parameters.BusinessKeyList",
												"type": "Expression"
											},
											"deltastagingdbname": {
												"value": "@pipeline().parameters.DeltaStagingDbName",
												"type": "Expression"
											},
											"deltatargetdbname": {
												"value": "@pipeline().parameters.DeltaTargetDbName",
												"type": "Expression"
											},
											"deltastagetablename": {
												"value": "@pipeline().parameters.DeltaStageTableName",
												"type": "Expression"
											},
											"azuresqltemptablename": {
												"value": "@pipeline().parameters.AzureSqlTempTableName",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@pipeline().parameters.StorageAccount",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@pipeline().parameters.ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@base64(pipeline().parameters.QuoteCharacter)",
												"type": "Expression"
											},
											"azuresqldbetllastmodifieddtm": {
												"value": "@pipeline().parameters.DeleteProcessCompletionDTM",
												"type": "Expression"
											},
											"deltastagingtableparquetfilepath": {
												"value": "@pipeline().parameters.DeltaStagingTableParquetFilePath",
												"type": "Expression"
											},
											"DbHostName": {
												"value": "@pipeline().parameters.DbHostName",
												"type": "Expression"
											},
											"RowSource": {
												"value": "@pipeline().parameters.RowSource",
												"type": "Expression"
											},
											"skipcsvrows": "0",
											"azuresqltargettablename": {
												"value": "@pipeline().parameters.AzureTargetTableName",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_DBR_ADF_Job_Cluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"databricksclusterid": {
												"value": "@pipeline().parameters.databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@pipeline().parameters.databrickssecretname",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteRecordsInDatabase",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeleteRecords",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_delete_from_azuresqltable]",
										"storedProcedureParameters": {
											"table_source": {
												"value": {
													"value": "@pipeline().parameters.AzureSqlTempTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_target": {
												"value": {
													"value": "@pipeline().parameters.AzureTargetTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableid": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"BlobContainer": {
						"type": "string"
					},
					"BusinessKeyList": {
						"type": "string"
					},
					"DeltaTargetDbName": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					},
					"RowSource": {
						"type": "string"
					},
					"DbHostName": {
						"type": "string"
					},
					"AzureTargetTableName": {
						"type": "string"
					},
					"DeltaStagingTableParquetFilePath": {
						"type": "string"
					},
					"DeleteProcessCompletionDTM": {
						"type": "string"
					},
					"DeltaStagingDbName": {
						"type": "string"
					},
					"DeltaStageTableName": {
						"type": "string"
					},
					"AzureSqlTempTableName": {
						"type": "string"
					},
					"databricksclustername": {
						"type": "string"
					},
					"databricksclusterid": {
						"type": "string"
					},
					"columnschemalist": {
						"type": "string"
					},
					"databrickssecretname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "FullCopyToBlob",
						"description": "Full Copy from source table into blob storage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetLastModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DS_File_Source",
								"type": "DatasetReference",
								"parameters": {
									"DirectoryName": {
										"value": "@pipeline().parameters.SourceFolderLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"ColumnDelimiter": ",",
									"QuoteCharacter": "\""
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_Datalanding",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.Data_Destination_Folder_Path",
										"type": "Expression"
									},
									"TargetFileName": {
										"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            , formatDateTime(convertFromUtc(activity('GetLastModifiedDate').output.lastModified,'E. Australia Standard Time'),'yyyyMMdd-HHmmss')\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"QuoteCharacter": {
										"value": "@pipeline().parameters.QuoteCharacter",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SqlServerStoredProcedure2",
						"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FullCopyToBlob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
							"storedProcedureParameters": {
								"TableID": {
									"value": {
										"value": "@pipeline().parameters.TableID",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_EDWDiscovery",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetLastModifiedDate",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_File_Source",
								"type": "DatasetReference",
								"parameters": {
									"DirectoryName": {
										"value": "@pipeline().parameters.SourceFolderLocation",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"ColumnDelimiter": ",",
									"QuoteCharacter": "\""
								}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceFolderLocation": {
						"type": "string"
					},
					"SourceFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_MySQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_MySQL",
											"type": "DatasetReference",
											"parameters": {
												"Databasename": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												},
												"Servername": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterFullLoad",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource",
											"query": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_MySQL",
											"type": "DatasetReference",
											"parameters": {
												"Databasename": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												},
												"Servername": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List} from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere\n@{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' \nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}'\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_MySQL",
											"type": "DatasetReference",
											"parameters": {
												"Databasename": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												},
												"Servername": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterDelta",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DeltaTargetTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_Salesforce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "ADF_DS_SF",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure2",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "ADF_DS_SF",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "select @{pipeline().parameters.Source_Column_List} from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere \n@{pipeline().parameters.Data_Source_WaterMarkColumn} > @{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}Z\nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= @{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}Z",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "ADF_DS_SF",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SqlServerStoredProcedure1",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_DM_SourcetoBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterFullLoad",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": "urbanutilities\\svc-EBI_PRDC04_AGT",
												"SecretPasswordName": "SVC-EBI-PRDC04-AGT"
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List} from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere\n@{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' \nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}'\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingAfterDelta",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DeltaTargetTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_Migration_SourceToBlob_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "Incremental or Full",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckCDCMigrationCompleted",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.IncrementalLoadInd,'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FullCopyToBlob",
									"description": "Full Copy from source table into blob storage",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getlocalstarttime2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\nfrom @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\n@{pipeline().parameters.source_where_filter}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocalstarttime2').output.firstrow.localstarttime2\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingFull",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullCopyToBlob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocalstarttime2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime2",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "lkp_getpreviousdatevalue",
									"description": "Retrieve  the last high-watermark value stored in external control table",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": {
												"value": "select isnull(@{pipeline().parameters.Control_Table_Column_Name},'1753-01-01') as WatermarkValue from @{pipeline().parameters.Control_Table_Table_Name}\nwhere TableID = @{pipeline().parameters.TableID}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "lkp_getcurrentmaxvalue",
									"description": "Retrieve  the current maximum value in watermark column of source data store",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{pipeline().parameters.Data_Source_WaterMarkColumn}) AS NewWatermarkValue from @{pipeline().parameters.Data_Source_Table_Name}\n@{pipeline().parameters.Join_Condition}\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": "urbanutilities\\svc-EBI_PRDC04_AGT",
												"SecretPasswordName": "SVC-EBI-PRDC04-AGT"
											}
										}
									}
								},
								{
									"name": "DeltaCopyfromDB",
									"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "lkp_getpreviousdatevalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getcurrentmaxvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "lkp_getlocattime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.Source_Column_List}\n from @{pipeline().parameters.Data_Source_Table_Name} \n@{pipeline().parameters.Join_Condition}\nwhere\n@{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('lkp_getpreviousdatevalue').output.firstRow.WatermarkValue}' \nand @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue}'\n@{pipeline().parameters.source_where_filter}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.Data_Destination_Folder_Path",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@if(equals(pipeline().parameters.File_Name_DateTime_Ind,1)\n,  concat(pipeline().parameters.Data_Destination_File_Name\n             ,'-'\n            ,activity('lkp_getlocattime').output.firstrow.localstarttime\n             ,pipeline().parameters.File_Name_Ext)\n,\nconcat(\npipeline().parameters.Data_Destination_File_Name\n,pipeline().parameters.File_Name_Ext)\n)\n\n",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostProcessingDelta",
									"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DeltaCopyfromDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ETL].[usp_update_incrementaldatevalue]",
										"storedProcedureParameters": {
											"LastModifiedDTM": {
												"value": {
													"value": "@activity('lkp_getcurrentmaxvalue').output.firstRow.NewWatermarkValue",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableID": {
												"value": {
													"value": "@pipeline().parameters.TableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_EDWDiscovery",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "lkp_getlocattime",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlMISource",
											"sqlReaderQuery": "select dbo.udf_covert_utc_to_local_Datetime(getdate()) as  localstarttime",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckCDCMigrationCompleted",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(pipeline().parameters.CDCMigrationInd,1),not(equals(pipeline().parameters.CDCMigrationCompleted,1)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyCDCData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT  \n\t Case WHEN [__$operation] = 1 THEN 'DELETE'\n\t        WHEN [__$operation] = 2 THEN 'INSERT'\n\t\t\tWHEN [__$operation] = 4 THEN ' UPDATE' END as ROW_OPERATION\n    ,@{pipeline().parameters.Source_Column_List}\n  FROM @{concat('cdc.',pipeline().parameters.DeltaTargetTableName,'_CT',' ',  pipeline().parameters.Data_Destination_File_Name)}\n  WHERE [__$operation] !=3\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_EDWDiscovery_OnPrem",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.SourceServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.SourceDatabaseName",
													"type": "Expression"
												},
												"UserName": {
													"value": "@pipeline().parameters.UserName",
													"type": "Expression"
												},
												"SecretPasswordName": {
													"value": "@pipeline().parameters.SecretPasswordName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_Datalanding",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(pipeline().parameters.Data_Destination_Folder_Path,'/cdc')",
													"type": "Expression"
												},
												"TargetFileName": {
													"value": "@concat(pipeline().parameters.DeltaTargetTableName,pipeline().parameters.File_Name_Ext)",
													"type": "Expression"
												},
												"ColumnDelimiter": {
													"value": "@pipeline().parameters.ColumnDelimiter",
													"type": "Expression"
												},
												"QuoteCharacter": {
													"value": "@pipeline().parameters.QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.MSF660"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "CASE WHEN LAST_MOD_DATE <> '' AND LAST_MOD_TIME<>'' THEN (CAST(LAST_MOD_DATE AS DATETIME) + CAST(stuff(stuff(LAST_MOD_TIME ,3,0,':'),6,0,':') AS DATETIME)) END"
					},
					"Data_Destination_Folder_Path": {
						"type": "String",
						"defaultValue": "ellipse9-datalanding/MSF660"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ETL.SourceTableDetails"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "IncrementalKeyDateColumnLastRefreshValue"
					},
					"TableID": {
						"type": "string",
						"defaultValue": "1"
					},
					"Data_Destination_File_Name": {
						"type": "string",
						"defaultValue": "MSF660"
					},
					"SourceServerName": {
						"type": "string",
						"defaultValue": "NFUJDEV073"
					},
					"SourceDatabaseName": {
						"type": "string",
						"defaultValue": "Datamart"
					},
					"IncrementalLoadInd": {
						"type": "int",
						"defaultValue": 1
					},
					"File_Name_Ext": {
						"type": "string",
						"defaultValue": ".csv"
					},
					"File_Name_DateTime_Ind": {
						"type": "int",
						"defaultValue": 1
					},
					"Join_Condition": {
						"type": "string",
						"defaultValue": " "
					},
					"Source_Column_List": {
						"type": "string",
						"defaultValue": "*"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"QuoteCharacter": {
						"type": "string",
						"defaultValue": "¬"
					},
					"source_where_filter": {
						"type": "string",
						"defaultValue": " "
					},
					"UserName": {
						"type": "string"
					},
					"SecretPasswordName": {
						"type": "string"
					},
					"SourceName": {
						"type": "string"
					},
					"DeltaTargetTableName": {
						"type": "string"
					},
					"CDCMigrationCompleted": {
						"type": "int"
					},
					"CDCMigrationInd": {
						"type": "int"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Framework_TRFM_TransformSourceDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of Columns for Date Transformation",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSelect SDTD.TableID \n\t\t,SDTD.SourceColumn\n\t\t,STD.targetblobfilename\n\t\t,STD.targetblobcontainer \n\t\t,case when SS.sourcename = 'Daptiv' then 'Daptiv/' + STD.targetblobfilename else STD.targetblobfilename end as targetblobfilefolder \n\t\t,replace(STD.targetblobfilepath,'/transformed','') as targetblobfilefolderpath\n\t\t,STD.ColumnDelimiter\n\t\t,STD.QuoteCharacter\n\t\t,replace(STD.targetblobfilepath,'/transformed','') as blobfilename /* Keeping the blobfile name as targetblobcontainer. The actual filename gets appended to it at execute notebook - ETL_Change_DateFormat step in the \n\t\tPL_Framework_TRFM_TransformDateForEachtable pipeline*/\n\t\t,STD.sourcecolumnlist\n\t\t,STD.storageaccount\n\t\t,SS.databricksclusterid\n\t\t,SS.databrickssecretname\nFrom ETL.sourcesystem SS join ETL.sourcetabledetails STD on SS.sourceid = STD.sourceid\njoin ETL.SourceDateTransformationDetails SDTD on SDTD.tableid = STD.tableid \nwhere SS.sourcename = '@{pipeline().parameters.SourceName}'\nand STD.isactive = 1\nand SDTD.isactive = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each date transformation",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Columns for Date Transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Columns for Date Transformation').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Execute PL_Framework_TRFM_TransformDateForEachtable",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Framework_TRFM_TransformDateForEachtable",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TableID": {
												"value": "@item().TableID",
												"type": "Expression"
											},
											"SourceColumn": {
												"value": "@item().SourceColumn",
												"type": "Expression"
											},
											"targetblobcontainer": {
												"value": "@item().targetblobcontainer",
												"type": "Expression"
											},
											"targetblobfilefolderpath": {
												"value": "@item().targetblobfilefolderpath",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"QuoteCharacter": {
												"value": "@item().QuoteCharacter",
												"type": "Expression"
											},
											"sourcecolumnlist": {
												"value": "@item().sourcecolumnlist",
												"type": "Expression"
											},
											"storageaccount": {
												"value": "@item().storageaccount",
												"type": "Expression"
											},
											"targetblobfilefolder": {
												"value": "@item().targetblobfilefolder",
												"type": "Expression"
											},
											"databricksclusterid": {
												"value": "@item().databricksclusterid",
												"type": "Expression"
											},
											"databrickssecretname": {
												"value": "@item().databrickssecretname",
												"type": "Expression"
											},
											"blobfilename": {
												"value": "@item().blobfilename",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceName": {
						"type": "string",
						"defaultValue": "Daptiv"
					}
				},
				"folder": {
					"name": "FrameWork"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ICN_Data_Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from Fileshare to Blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".*"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_NFUJPRD301_ICN",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_DataLanding_ICN",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ICN Data Copy"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ICN_Payment_Extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Generate Extract File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Ellipse9].[usp_get_Icn_Payment_Extract]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ICN_Payment_Extract_File",
								"type": "DatasetReference",
								"parameters": {
									"FilePath": {
										"value": "@pipeline().parameters.FilePath",
										"type": "Expression"
									},
									"FileName": {
										"value": "@concat('ICN','_Payment_',convertFromUtc(utcnow(),'E. Australia Standard Time','yyyyMMdd_HHmmss'),'.txt')\n\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FilePath": {
						"type": "string",
						"defaultValue": "DEVELOPER CLIENT MANAGEMENT TEAM FOLDER\\14.00 ICNDbRegister\\Payment Reports"
					}
				},
				"folder": {
					"name": "ICN Payment Extract"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ServiceNow_DM_GSFileServerToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Transfer file to Blob storage",
				"activities": [
					{
						"name": "GetFileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_GlobalScape_ServiceNow",
								"type": "DatasetReference",
								"parameters": {
									"p_FileFolder": {
										"value": "@pipeline().parameters.p_GSFileFolderName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FilterOnlyCSVFiles",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileNames').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterOnlyCSVFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterOnlyCSVFiles').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "GetSourceDetails",
									"description": "Fetching SourceId from etl.SourceSystem",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select TableId, TargetBlobFilePath, IsActive from etl.SourceTableDetails a where a.SourceId = @{pipeline().parameters.p_SourceId} and lower(SUBSTRING(a.SourceFileName, 1, CHARINDEX('*', a.SourceFileName)-1)) = lower('@{substring(Item().name, 0, indexof(Item().name, '_'))}')",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ASQL_EDWDiscovery",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "If Record Exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetSourceDetails",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('GetSourceDetails').output.Firstrow['IsActive']",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy_Incident_Files_GSFileServer_to_Blob",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_BFS_GlobalScape_ServiceNow",
														"type": "DatasetReference",
														"parameters": {
															"p_FileFolder": {
																"value": "@pipeline().parameters.p_GSFileFolderName",
																"type": "Expression"
															},
															"p_FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_ABLB_FS_ServiceNow_Sink",
														"type": "DatasetReference",
														"parameters": {
															"p_snk_blob_container_name": {
																"value": "@activity('GetSourceDetails').output.Firstrow['TargetBlobFilePath']",
																"type": "Expression"
															},
															"p_snk_blob_file_name": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Archive_GSFileServer_File",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy_Incident_Files_GSFileServer_to_Blob",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_BFS_GlobalScape_ServiceNow",
														"type": "DatasetReference",
														"parameters": {
															"p_FileFolder": {
																"value": "@pipeline().parameters.p_GSFileFolderName",
																"type": "Expression"
															},
															"p_FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_BFS_GlobalScape_ServiceNow",
														"type": "DatasetReference",
														"parameters": {
															"p_FileFolder": {
																"value": "@concat(pipeline().parameters.p_GSFileFolderName,'\\Archive')",
																"type": "Expression"
															},
															"p_FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Delete_Processed_GSFileServer_File",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Archive_GSFileServer_File",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_BFS_GlobalScape_ServiceNow",
														"type": "DatasetReference",
														"parameters": {
															"p_FileFolder": {
																"value": "@pipeline().parameters.p_GSFileFolderName",
																"type": "Expression"
															},
															"p_FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_GSFileFolderName": {
						"type": "string",
						"defaultValue": "ServiceNow\\\\Pre-Prod"
					},
					"p_SourceId": {
						"type": "string",
						"defaultValue": "61"
					}
				},
				"variables": {
					"v_blob_container_name": {
						"type": "String",
						"defaultValue": "servicenow-datalanding"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ServiceNow_DM_SourceToGSFileServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_All_Files_MidServer_to_GSFileServer",
						"description": "Copy all the files from MidServer to GSFileServer\nMidServer Location: \\\\NFUJPRD281\\c$\\Utils\\PROD\\export\\updates\n\nGSFileServer Location: \\\\nfujprd200\\EBI_PROD_LANDING\\ServiceNow",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@variables('v_FileType')",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_MidServer_ServiceNow_Source",
								"type": "DatasetReference",
								"parameters": {
									"p_MidServerLocation": {
										"value": "@pipeline().parameters.p_MidServerLocation",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FS_MidServer_ServiceNow_Destination",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@pipeline().parameters.p_GSFileFolderName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_GSFileFolderName": {
						"type": "string",
						"defaultValue": "ServiceNow\\\\Pre-Prod"
					},
					"p_SourceId": {
						"type": "string"
					},
					"p_MidServerLocation": {
						"type": "string",
						"defaultValue": "\\\\NFUJPRD281\\c$\\Utils\\PROD\\export\\updates"
					}
				},
				"variables": {
					"v_FileType": {
						"type": "String",
						"defaultValue": "*.csv"
					}
				},
				"folder": {
					"name": "Service Now"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TFSCS_DM_SourcetoBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TFSCS_Copy_to_Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lkp_getfilemetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 4
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_GlobalScape_TFS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ABLB_FS_TFS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"targetblobfoldername": {
										"value": "@variables('targetblobfoldername')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Archive_Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TFSCS_Copy_to_Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": false,
									"wildcardFileName": "*.*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_FS_GlobalScape_TFS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_FS_GlobalScape_Archive",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete_Processed_files From_CardServices",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_FS_GlobalScape_TFS",
								"type": "DatasetReference",
								"parameters": {
									"filefolder": {
										"value": "@activity('Lkp_getfilemetadata').output.Firstrow['FileFolderName']",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": false,
								"wildcardFileName": "*.*"
							}
						}
					},
					{
						"name": "Lkp_getfilemetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  FileFolderName\nfrom etl.sourcesystem\nwhere sourcename = '@{pipeline().parameters.sourcename}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_EDWDiscovery",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourcename": {
						"type": "string",
						"defaultValue": "Tanker Filling Station Card Services"
					}
				},
				"variables": {
					"Testvar": {
						"type": "String"
					},
					"targetblobfoldername": {
						"type": "String",
						"defaultValue": "tankerfillingstation-dataloading/CardService"
					}
				},
				"folder": {
					"name": "Tanker Filling Station Card Services"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FSE_StartFSECluster_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_StartFSECluster",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-06-24T05:27:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								45
							],
							"hours": [
								5,
								6,
								7,
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								16,
								17,
								18,
								19,
								4
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SUMS_Mart_Daily_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_SUMS_Daily_Consumption_And_Analysis",
							"type": "PipelineReference"
						},
						"parameters": {
							"Source_Name": "[parameters('SUMS_Mart_Daily_Trigger_properties_PL_SUMS_Daily_Consumption_And_Analysis_parameters_Source_Name')]",
							"Load_Type": "[parameters('SUMS_Mart_Daily_Trigger_properties_PL_SUMS_Daily_Consumption_And_Analysis_parameters_Load_Type')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-08-03T00:15:00",
						"timeZone": "E. Australia Standard Time",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								12
							]
						}
					}
				}
			},
			"dependsOn": []
		}
	]
}